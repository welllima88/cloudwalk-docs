en:
  posxml_supported: "POSXML supported"
  ruby_supported: "Ruby supported"
  troubleshooting: "Troubleshooting"
  description: "Learn how to create, deploy and manage CloudWalk apps."
  author: "Author"
  copy: "Copy"
  version: "Version"
  apps:
    globalpayments:
      title: "Global Payments"
      description: "Payment application from Global Payments"
      intro: "Payment application from Global Payments"
      versions:
        1.1.3:
          date: "09/08/2015"
          changelog:
            paragraph_1: "First production release"
  cli:
    setup:
      title: "CloudWalk CLI - Set Up"
      description: "Learn how to install and get started with the CloudWalk CLI"
      introduction: "This guide will walk you through the process of installing the CloudWalk CLI on Windows, Linux and Mac OS environments. Be aware of the prerequisites and follow the installation process carefully."
      for_windows_users: "For Windows users:"
      for_windows_unix_like: "For Linux and Mac OS users:"
      table_of_contents:
        prerequisites: "Prerequisites"
        installing: "Installing"
        commands: "Available commands"
      prerequisites:
        installer: "Download the installer at:"
        more_info: "more information at:"
      installing:
        paragraph_1: "Assuming that you have already downloaded the install package (<a href='https://dl.cloudwalk.io/cli/install.exe' class='external'>setup.exe</a>), simply double-click the file and follow the setup instructions."
        paragraph_2: "Assuming that you have already installed <a href='http://git-scm.com/book/en/v2/Getting-Started-Installing-Git' class='external'>Git</a> and <a href='https://www.ruby-lang.org/en/documentation/installation' class='external'>Ruby</a>, enter the following on the terminal (bash):"
        paragraph_3: "Once installed, you can use <span class='code'>cloudwalk</span> from your command line interface. In case you do not have a CloudWalk account, you can create one as follows:"
        paragraph_4: "Simply answer the questions and login with:"
        paragraph_5: "After accessing your account, you should be able to run more commands, such as:"
      commands:
        logout: "Log out of your account."
        apps: "List your applications."
        app: "Manage your applications e.g. create, show details, edit and delete."
        keys: "List your SSH keys which are used to access and make changes to your repositories."
        key: "Manage your SSH keys (add and remove them)."
        logs: "View application logs in real-time."
        users: "List users within your account."
        note: "The full list of commands is available if you run <strong>cloudwalk</strong> without any other additional command."
    creating_a_new_app:
      title: "CloudWalk CLI - Creating a new app"
      description: "Learn how to create a new Ruby application with the CloudWalk CLI"
      introduction: "This guide will walk you through the process of creating and emulating a new Ruby application using the CloudWalk CLI. Be aware of the prerequisites and follow all the steps carefully."
      table_of_contents:
        prerequisites: "Prerequisites"
        creating_the_new_app: "Creating the new app"
        emulating: "Emulating"
      prerequisites:
        cli_is_installed: "The CloudWalk CLI is installed"
        git_is_configured: "Git is configured. Not sure? Please check <a href='https://help.github.com/articles/set-up-git' class='external'>https://help.github.com/articles/set-up-git</a>"
      creating_the_new_app:
        paragraph_1: "Assuming that the CloudWalk CLI is installed and that Git is properly configure, let's run <span class='code'>cloudwalk app create</span>:"
        paragraph_2: "Let's understand what happened:"
        paragraph_3: "Your SSH key at <code>~/.ssh/id_rsa.pub</code> was automatically added into your account"
        paragraph_4: "A random application name was set, as no name was specified (see <span class='code'>cloudwalk help app create</span>)"
        paragraph_5: "A new folder was created with the new app name filled with the <a href='https://github.com/cloudwalkio/cloudwalk-skeleton' class='external'>default app's</a> contents"
      emulating:
        paragraph_1: "Once your application is created, we can see it working using one of two possible commands on the CLI:"
        emulate: "Run apps generated by our build process <strong>with</strong> our graphical emulator. It will spawn a new window containing a colorful device, with a screen, buttons and a printer. Use <span class='code'>cloudwalk help emulate</span> to learn more about this command."
        run: "Run apps generated by our build process <strong>without</strong> our graphical emulator. As it is only in text mode, the capabilities are limited, but it is useful for testing. Use <span class='code'>cloudwalk help run</span> to learn more about this command."
    customizing_an_app:
      title: "CloudWalk CLI - Customizing an app"
      description: "Learn how to customize a Ruby application with the CloudWalk CLI"
      introduction: "This guide will walk you through the process of customizing a Ruby application with the CloudWalk CLI. Be aware of the prerequisites and follow all the steps carefully."
      table_of_contents:
        prerequisites: "Prerequisites"
        settings: "Settings"
        source_code: "Source code"
        hello_world: "Hello world"
      prerequisites:
        previous_step: "This guide assumes that you have completed the previous step:"
      settings:
        paragraph_1: "The CloudWalk Manager provides an interface for customizing an app's settings on the web, and the CLI completes it with an easy way to edit those settings from the terminal. By running <span class='code'>cloudwalk app edit</span> you will be prompted with the available options to set including the previous values. This command requires an app ID or app name, so in this example <span class='code'>cloud-walking-1</span> will be used, but in case it is necessary to check the names/IDs of the apps, the command <span class='code'>cloudwalk apps</span> can be used:"
        paragraph_2: "Either the ID <strong>123</strong> or the name <strong>cloud-walking-1</strong> can be used to edit this app:"
        paragraph_3: "After performing the changes, the command <span class='code'>cloudwalk app show</span> can be used:"
      source_code:
        paragraph_1: "A new application comes with the following source code in the <strong>lib/main.rb</strong> file:"
        paragraph_2: "It describes some of the main steps of building an application. Let's look at it in detail:"
        paragraph_3: "It is how gems are required. It is Ruby so there must be gems!"
        paragraph_4: "The <strong>simplehttp</strong> gem was required in the <strong>Gemfile</strong> at the root of the project, and it is also <a href='https://github.com/cloudwalkio/simplehttp' class='external'>open source</a>. If you are an experienced Ruby developer, this information could be enough for you to build your custom gems for your application!"
        paragraph_5: "It is where the Main class is defined. This is a requirement, all your applications must have a Main class."
        paragraph_6: "Note that it doesn't necessarily have to inherit from the Device class. If you don't inherit, you might write Device specific methods including the name of the class, for example instead of writing puts, you would write <strong>Device.puts</strong>."
        paragraph_7: "Function that is executed each time the application runs. This function is a requirement and must be defined. Note that this function is executed inside a <strong>loop</strong>, so plan ahead."
        paragraph_8: "Displays the string <strong>Card...</strong> on the terminal screen."
        paragraph_9: "Holds the execution by asking for a key to be pressed."
        paragraph_10: "At the end of the <strong>Main.call</strong> method states wether the loop must continue or not."
      hello_world:
        paragraph_1: "As a simple example, we can change this application to welcome whoever runs it, ask for a name and then say greetings to the given name."
        paragraph_2: "If you are a Ruby developer, this is the code you might expect:"
        paragraph_3: "By putting that code inside the <span class='code'>Main.call</span> method, before the <span class='code'>true</span> at the end, a name will be requested, and after that the name will be displayed in the next line."
        paragraph_4: "Try it yourself! Make the changes, run <span class='code'>rake</span> and then <span class='code'>cloudwalk emulate</span>. The <strong>main.rb</strong> file should end up like this:"
    deploying_an_app:
      title: "CloudWalk CLI - Deploying an app"
      description: "Learn how to deploy a Ruby application with the CloudWalk CLI"
      introduction: "This guide will walk you through the process of deploying a Ruby application with the CloudWalk CLI. Be aware of the prerequisites and follow all the steps carefully."
      table_of_contents:
        prerequisites: "Prerequisites"
        deploying_with_git: "Deploying with Git"
      prerequisites:
        previous_step: "This guide assumes that you have the CloudWalk CLI installed and a working Ruby application"
      deploying_with_git:
        paragraph_1: "When an app is created, it is initialized with a default structure to make it easy to see a proof of concept working, however this skeleton has not yet being pushed to CloudWalk."
        paragraph_2: "Considering the application previously created and customized (cloud-walking-1), let's commit the changes:"
        paragraph_3: "The code that is available in the repo was already added to the history of changes (just not pushed), so simply run <span class='code'>git push</span> - the output will look something like this:"
        paragraph_4: "Once it finishes, the application will be built and deployed!"
  api:
    description: Description
    method: Method and URL format
    name: Name
    response: Example of response
    sample: Example of use
    type: Type
    object_type: '{type}'
    version: '{version}'
    overview:
      title: Developer API
      description: 'Access to the API must be done from the domain https://manager.cloudwalk.io/api.'
      table_of_contents:
        functionality: Functionality
        versioning: Versioning
        api_token: API Token
        rate_limiting: "Rate limiting"
        crud: 'CRUD: Create, Retrieve, Update and Destroy'
        pagination: Pagination
      functionality:
        paragraph_1: The access to the API must be done from the domain <span class='code'>https://api.cloudwalk.io/%{version}</span>.
        paragraph_2: The requests should be made using the <strong>HTTPS</strong> protocol.
        paragraph_3: 'All date and time records are returned in ISO 8601 standard:'
      versioning:
        paragraph_1: When using the CloudWalk API, it is necessary to provide the version being used. Currently only the version <strong>v1</strong> is available for use, but eventually new versions will become available.
        paragraph_2: 'Example of URL: <span class="code">https://api.cloudwalk.io/v1/devices</span>'
      api_token:
        paragraph_1: 'All operations available on the API interface should always use a valid API token. The API token management is done directly on the CloudWalk Manager, by simply accessing the top menu <strong>My account</strong>, and then the option <strong>API</strong>.'
        paragraph_2: 'Example of URL:'
      rate_limiting:
        paragraph_1: "By default, an IP address is allowed to perform up to 5,000 requests per hour. The rate limit status can be checked on the HTTP headers of any API request:"
      crud:
        paragraph_1: To perform an operation on a resource (app, logical number, group, etc), a HTTP request is made to the URL using the appropriate HTTP verb.
        paragraph_2: 'The four HTTP verbs used in CRUD operations are:'
        paragraph_3: '<strong>GET: </strong>Finds a specific resource or collection of resources from an URL. For example, <span class="code">GET /%{version}/devices</span> returns a list with all serial numbers, while a <span class="code">GET /%{version}/devices/135</span> returns only the serial number with the ID 135.'
        paragraph_4: '<strong>POST: </strong>Creates a new resource. For example, <span class="code">POST /%{version}/devices</span> creates a new serial number. The information sent in the POST request would then be used to fill the properties of the serial number.'
        paragraph_5: '<strong>PUT: </strong>Updates an existing resource. For example, <span class="code">PUT /%{version}/devices/135</span> updates the serial number with the ID 135. The information sent in the PUT request would then be used to update the properties of the serial number.'
        paragraph_6: '<strong>DELETE: </strong>Deletes an existing resource. For example, <span class="code">DELETE /%{version}/devices/135</span> deletes the serial number with the ID 135.'
      pagination:
        paragraph_1: Requests that return multiple records are paginated, where the default pagination size is 30 records. The sub-sequent pages are defined by the parameter <span class='code'>&page</span>, which starts on 1. The default amount of returned records can be changed by defining the parameter <span class='code'>&per_page</span>, up to 100 records.
    v1:
      apps:
        description: Check how CRUD operations for application should be performed.
        title: Developer API - Applications
        table_of_contents:
          types: Application types
          attributes: Application attributes
          create: Create a new application
          destroy: Delete an application
          index: List of all applications
          show: Find a specific application
          update: Update an application
        types:
          paragraph_1: Currently only POSXML apps are supported, but soon Ruby apps will be available as well, so app requests should always indicate the app type.
        attributes:
          list:
            authorizer_url: Authorizer IP address or URL.
            communication_format: Authorizer communication format (HTTP, ISO8583 or ISO20022).
            crc: Application <a href='http://en.wikipedia.org/wiki/Cyclic_redundancy_check' class='external'>CRC</a>
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            description: Brief description
            displayable: Determine wether the application should be displayed in the services menu
            id: Record ID
            name: Application name
            pos_display_label: POS exibition name (if displayable is true)
            language: Programming language used to develop the application
            binary: Application binary
            size: Application size (bytes)
            updated_at: Timestamp in ISO 8601 format
            uuid: Universally unique identifier
          paragraph_1: 'An application have the following attributes:'
        create:
          paragraph_1: Create a new application.
        destroy:
          paragraph_1: Delete an application.
        index:
          paragraph_1: Return an array with all applications.
        show:
          paragraph_1: Return the details of a specific application.
        update:
          paragraph_1: Update an existing application.
          paragraph_2: The bytecode sent on the parameter <strong>binary</strong> must be encoded with Base64.
      assets:
        attributes:
          list:
            content: File content (binay), Base64 encoded
            crc: File <a href='http://en.wikipedia.org/wiki/Cyclic_redundancy_check' class='external'>CRC</a>
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            description: File description
            id: Record ID
            name: File name
            size: File size (bytes)
            updated_at: Timestamp in ISO 8601 format
            file_type: File type (Asset or Torrent)
          paragraph_1: 'A file have the following attributes:'
        create:
          paragraph_1: Create a new file.
          paragraph_2: "<strong>@file.dat</strong> is the file being registered, so in this example, there is a file called <strong>file.dat</strong> in the current directory, where the command curl is being executed."
        description: Check how CRUD operations for files should be performed.
        destroy:
          paragraph_1: Delete a file.
        index:
          paragraph_1: Return an array with all files.
        show:
          paragraph_1: Return the details of a specific file.
        table_of_contents:
          attributes: File attributes
          create: Create a new file
          destroy: Delete a file
          index: List of all files
          show: Find a specific file
          update: Update a file
        title: Developer API - Files
        update:
          paragraph_1: Update an existing file.
      devices:
        attributes:
          list:
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            enabled: Determine wether the device can access CloudWalk (default true)
            id: Record ID
            serial_number: Equipment serial number
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: 'A device have the following attributes:'
        create:
          paragraph_1: Grant CloudWalk access to a new device.
        description: Check how CRUD operations for unlocking devices should be performed.
        destroy:
          paragraph_1: Delete a device. The equipment with the deleted serial number will not be able to access CloudWalk.
        index:
          paragraph_1: Return an array with all devices.
        show:
          paragraph_1: Return the details of a specific device.
        table_of_contents:
          attributes: Device attributes
          create: Grant access to a new device
          destroy: Delete a device
          index: List of all devices
          show: Find a specific device
          update: Update a device
        title: Developer API - Devices
        update:
          paragraph_1: Update an existing device.
      groups:
        description: Check how CRUD operations for groups should be performed.
        title: Developer API - Groups
        name: group name
        table_of_contents:
          types: Group types
          attributes: Group attributes
          create: Create a new group
          destroy: Delete a group
          index: List of all groups
          show: Find a specific group
          update: Update a group
        types:
          paragraph_1: Currently only POSXML groups are supported, but soon Ruby groups will be available as well, so group requests should always indicate the group type.
        attributes:
          list:
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            id: Record ID
            name: Group name
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: 'A group have the following attributes:'
        create:
          paragraph_1: Create a new group.
        destroy:
          paragraph_1: Delete a group. To perform this operation the group must be empty (no apps or logical numbers).
        index:
          paragraph_1: Return an array with all groups.
        show:
          paragraph_1: Return the details of a specific group.
        update:
          paragraph_1: Update an existing logical number.
      logical_numbers:
        attributes:
          list:
            app_ids: List of app IDs (from group) that the logical number has access
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            group_id: Group ID that the logical number belongs
            id: Record ID
            number: Logical number
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: 'A logical number have the following attributes:'
        create:
          paragraph_1: Create a new logical number.
        description: Check how CRUD operations for logical numbers should be performed.
        destroy:
          paragraph_1: Delete a logical number. The equipment with the deleted logical number will not be able to download CloudWalk apps.
        index:
          paragraph_1: Return an array with all logical numbers.
        show:
          paragraph_1: Return the details of a specific logical number.
        table_of_contents:
          attributes: Logical number attributes
          create: Create a new logical number
          destroy: Delete a logical number
          index: List of all logical numbers
          show: Find a specific logical number
          update: Update a logical number
        title: Developer API - Logical numbers
        update:
          paragraph_1: Update an existing logical number.
      transactions:
        attributes:
          list:
            app_name: Application that originated the transaction
            detail: Additional details about the transaction (might be empty)
            finished_at: Timestamp in ISO 8601 format
            framework_version: Framework version installed on the device
            id: Record ID
            logical_number: Device logical number
            serial_number: Device serial number
            started_at: Timestamp in ISO 8601 format
            status: 'Record status: Success <span class="code">success</span>, Processing <span class="code">running</span> or Error <span class="code">fail</span>'
            sent: Information sent to the host
            received: Information received from the host
            transaction_type: 'Record type: Release <span class="code">company</span>, Transaction <span class="code">switch</span> or Download <span class="code">get_asset</span>'
          paragraph_1: 'A transaction have the following attributes:'
        description: The transaction records have some acronyms in fields transaction_type, status and received. Check out the definition of all acronyms.
        index:
          paragraph_1: Return an array with all transactions.
        search_by_multiple_params:
          paragraph_1: Return an array with all transactions with the defined parameters.
        search_by_serial_number:
          paragraph_1: Return an array with all transactions with the <strong>serial number</strong> defined on parameter <span class='code'>&serial_number</span>.
          paragraph_2: It is also possible to search for transactions of a specific <strong>logical number</strong> by defining the parameter <span class='code'>&logical_number</span>
          serial_number: serial number
        search_by_app_name:
          paragraph_1: Return an array with all transactions with the <strong>app name</strong> defined on parameter <span class='code'>&app_name</span>.
          app_name: app name
        search_by_date:
          paragraph_1: Return an array with all transactions within the interval defined on parameters <span class='code'>&since</span> and <span class='code'>&until</span>.
          since: inicial date
          until: final date
        search_by_status:
          paragraph_1: Return an array with all transactions with the <strong>status</strong> defined on parameter <span class='code'>&status</span>.
        search_by_transaction_type:
          paragraph_1: Return an array with all transactions with the <strong>record type</strong> defined on parameter <span class='code'>&transaction_type</span>.
          transaction_type: record type
        table_of_contents:
          attributes: Transaction attributes
          index: List of all transactions
          search_by_multiple_params: Find transactions by multiple parameters
          search_by_serial_number: Find transactions by serial number
          search_by_app_name: Find transactions by app name
          search_by_date: Find transactions by date
          search_by_status: Find transactions by status
          search_by_transaction_type: Find transactions by type
        title: Developer API - Transactions
      parameters:
        attributes:
          list:
            created_at: Timestamp in ISO 8601 format
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            description: Parameter description
            group_id: Group ID, if the parameter belongs to a group
            id: Record ID
            key: Parameter key
            logical_number_id: Logical number ID, if the parameter belongs to a logical number
            updated_at: Timestamp in ISO 8601 format
            value: Parameter value
          paragraph_1: A parameter can reference a <strong>logical number</strong> or a <strong>group</strong>. What defines the type of parameter being handled is the definition of the properties <strong>number</strong> (refer to a logical number) or <strong>name</strong> (refer to a group).
          paragraph_2: 'A parameter have the following attributes:'
        create:
          paragraph_1: Create a new parameter.
        description: The parameters can be related to a logical number or a group. Check how CRUD operations for parameters should be performed.
        destroy:
          paragraph_1: Delete a parameter.
        group: Group
        index:
          paragraph_1: Return an array with all parameters of a group or logical number.
        logical_number: Logical number
        show:
          paragraph_1: Return the details of a specific parameter.
        table_of_contents:
          attributes: Parameter attributes
          create: Create a new parameter
          destroy: Delete a parameter
          index: List of all parameters
          show: Find a specific parameter
          update: Update a parameter
        title: Developer API - Parameters
        update:
          paragraph_1: Update an existing parameter.
      push_notifications:
        title: Developer API - Push notifications
        description: Check how to send push notifications though the CloudWalk API.
        attributes:
          list:
            created_at: Timestamp in ISO 8601 format
            id: Record ID
            content: Notification content (payload)
            created_by: User ID that created the record
            created_via: Channel used to create the record (Interface or API)
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: 'A push notification have the following attributes:'
        index:
          paragraph_1: Return an array with all notifications.
        show:
          paragraph_1: Return the details of a specific notification.
        table_of_contents:
          attributes: Push notification attributes
          index: List of all push notifications
          show: Find a specific push notification
          create: Create a new push notification
        create:
          paragraph_1: Create a new push notification.
          extra_info:
            group_id: "<strong>group_id:</strong> The ID of the group that should receive the notification"
            range: "<strong>range:</strong> <span class='code'>group</span> to notify the whole group or <span class='code'>specific_logical_numbers</span> to notify only specific logical numbers"
            logical_numbers: "<strong>logical_numbers:</strong> If the range \"specific_logical_numbers\" was select, enter the logical numbers (comma separated)"
            kind: "<strong>kind:</strong> <span class='code'>show</span> for instant displaying the content or <span class='code'>processing</span> for custom handling of the content"
            app_id: "<strong>app_id:</strong> (optional) If the kind \"processing\" was selected, enter the ID of the application responsible to handle the notification"
      users:
        attributes:
          list:
            created_at: Timestamp in ISO 8601 format
            email: Account e-mail
            name: User name
            id: Record ID
            last_sign_in_at: Timestamp of last session (ISO 8601)
            last_sign_in_ip: IP address used on last sign in
            sign_in_count: Sign in count
            time_zone: Time zone utilizado no CloudWalk Manager (padrão UTC)
            updated_at: Timestamp in ISO 8601 format
          paragraph_1: 'An user have the following attributes:'
        description: Check how CRUD operations for users should be performed.
        index:
          paragraph_1: Return an array with all users.
        show:
          paragraph_1: Return the details of a specific user.
        table_of_contents:
          attributes: User attributes
          index: List of all users
          show: Find a specific user
          token: Get the API Token of an specific user
        title: Developer API - Users
        token:
          paragraph_1: It is possible to get the API Token of a specific user, through its email and password.
  ide:
    overview:
      compilation_console:
        paragraph_1: 'Important information is displayed in the compilation console, such as the return of the compilation proccess: "Compilation Succeeded!" and additional application details, as follows:'
        properties:
          base64: Compiled source code
          functions: Number of declared functions
          integers: Number of declared integer variables
          maxfuncs: Maximum amount of function declaration allowed
          maxvars: Maximum amount of variable declaration allowed
          size: Application size
          strings: Number of declared string variables
      description: The CloudWalk IDE enables the application development for mobile devices using POSXML language.
      introduction:
        paragraph_1: The Cloudwalk service provides a simple, fast and intuitive development environment accessible to anyone using a web browser, it provides the innovative use of real-time collaboration, by which multiple developers can work on the same application simultaneously.
        paragraph_2: 'Meet the CloudWalk IDE interface:'
      real_time_colaboration:
        paragraph_1: In CloudWalk, we're always working on increasing developers productivity, therefore we have incorporated real-time collaboration in our IDE (development environment). To start with it, simply copy the <strong>complete</strong> URL of the project once open in the CloudWalk IDE and share it with the developers that are going to work together.
        paragraph_2: 'The image below demonstrates an example URL:'
      table_of_contents:
        compilation_console: Compilation console
        introduction: Introduction
        real_time_colaboration: Real time colaboration
      title: CloudWalk IDE
    emulator:
      description: "Web emulator used to view and test applications being developed"
      title: "CloudWalk IDE - Emulator"
      table_of_contents:
        introduction: Introduction
        workflow: Testing workflows
        printing: Printing
      introduction:
        paragraph_1: In order to increase productivity and to facilitate the development of POSXML applications, we have created an emulator that precisely reproduces the behavior of a POS terminal or a smartphone.
        paragraph_2: The emulator runs directly on CloudWalk IDE (in a web browser), eliminating the need of any kind of installation or configuration.
        paragraph_3: It has never been easier to develop applications for POS terminals!
      workflow:
        paragraph_1: A common task in any kind of development is to test the workflow of the application being developed. With CloudWalk IDE you can at any time press the <strong>Compile</strong> button, and then press the <strong>Emulator</strong> button to start the emulation.
        paragraph_2: "We have prepared a video for demonstration purposes, a simple Hello World with a pause between the messages that are displayed:"
      printing:
        paragraph_1: Another very common task is to print tickets and vouchers. In a convensional development environment, the definition and customization of vouchers and printing tickets might take several days and also consume several rolls of paper, which go straight to trash.
        paragraph_2: With CloudWalk IDE you can define, test, view and modify the vouchers and printing tickets in a virtual, simple and fast interface.
        paragraph_3: "Check out the video below where we demonstrate some basic printing commands:"
        paragraph_4: "Say goodbye to those stacks of printing paper :)"
  errors:
    not_found:
      description: Sorry we could not find the requested page.
      title: Page not found
  footer:
    get_in_touch: Get in touch
    paragraph_1: The names and logos WALK are trademarks of Plano Bê. All rights reserved.
    terms: Terms of Responsability
  search:
    placeholder: "Search..."
    helper: "Please add at least one search parameter"
    success:
      title: "Search results"
      no_results: "No search results found. We couldn't find anything relevant."
    error:
      title: "An error occurred while performing the search"
      paragraph_1: "We've received a notification and the search form will soon be functioning properly."
      paragraph_2: "Sorry for the inconvenience."
  integration:
    advanced_http:
      description: There is a way to integrate CloudWalk POSXML applications with REST APIs using the command network.send.
      http_samples:
        http_verb: HTTP-VERB
        path: PATH
        variables: VARIABLES
      introduction:
        paragraph_1: 'There is a way to integrate CloudWalk POSXML applications with <a href="https://en.wikipedia.org/wiki/REST" class="external">REST</a> APIs. It can be done by using the command <a href="/posxml/commands/network.send" class="command">network.send</a> with a string in the following format:'
        paragraph_2: The CloudWalk Switch will receive the request sent through the command <a href="/en/posxml/commands/network.send" class='command'>network.send</a> and will perform the HTTP request on the url defined on the application configured on <a href='https://manager.cloudwalk.io'>https://manager.cloudwalk.io</a>.
        paragraph_3: To receive the answer from CloudWalk Switch, it is necessary to use the command <a href='/en/posxml/commands/network.receive' class='command'>network.receive</a> to receive the first 4 bytes that indicates the size of the message, and then receive the rest of the message with a second <a href='/en/posxml/commands/network.receive' class='command'>network.receive</a> call. This approach avoid timeouts and long wait times to receive the response from your HTTP endpoint.
      posxml_sample:
        paragraph_1: 'The following example can be used to test this kind of HTTP integration:'
        posxml:
          comment_01: "The preconnect command attempts to connect the device on CloudWalk"
          comment_02: "Creating a string in the format 'POST / buf=0123456789&anotherVariable=ABCDEF\'"
          comment_03: "Converting the string to hexadecimal"
          comment_04: "Sending the hexadecimal string with the command network.send"
          comment_05: "Receiving the host response with the command network.receive"
          comment_06: "Receiving the 4 bytes of size"
          comment_07: "Receiving the message"
          comment_08: "Converting the hexadecimal response and displaying the message"
      table_of_contents:
        http_samples: Examples of HTTP verbs and paths
        introduction: Introduction
        posxml_sample: Example of POSXML application
      title: Host integration - REST HTTP
    architecture:
      description: 'Simplified architecture of CloudWalk service, with all the components involved: mobile device, authorizer, transactional switch, etc.'
      service_architecture:
        paragraph_1: 'The diagram below shows a simplified architecture of CloudWalk service, with all the components involved: A mobile device, an authorizer, the transactional switch, etc.'
      table_of_contents:
        service_architecture: Service architecture
      title: Host integration
    http:
      description: One way to establish communication between the CloudWalk service and a host authorizer is through HTTP. Example of use, configuring the device, compiling the application, configuring the CloudWalk Manager, testing the communication.
      pos_setup:
        paragraph_1: This guide assumes that your device already has the WALK Framework properly installed and configured, and that the device serial number is already registered on WALK Manager.
        paragraph_2: If you are unsure of the steps above, please refer to <a href='/en/framework/configuration'>%{configuration}</a>
      sample:
        list:
          item_1: '<strong>Account at CloudWalk Manager: </strong>Create free at <a href="https://manager.cloudwalk.io" class="external">https://manager.cloudwalk.io</a>'
          item_2: '<strong>CloudWalk Framework: </strong> Device properly installed and configured'
          item_3: '<strong>Internet access: </strong> It is necessary that the device has internet access (Ethernet, Dial-up or GPRS)'
        paragraph_1: For testing purposes, we provide a host authorizer that is really simple and ready to use.
        prerequisites: Prerequisites
      table_of_contents:
        ide: Compiling the application
        pos_setup: Configuring the device
        sample: Example of use
        testing: Testing the communication
        understanding_the_service: Understanding the communication
        manager_setup: Configuring the CloudWalk Manager
      testing:
        download_application: 1. Download the application
        if_fail: Upon failure
        paragraph_1: 'With the device properly prepared; application compiled and everything correctly configured in CloudWalk Manager, it''s time to test the communication between all the components involved: device, CloudWalk and host authorizer.'
        paragraph_2: 'Press the green button and the process of downloading will start:'
        paragraph_3: 'At the end of the process, the following message appears:'
        paragraph_4: After downloading the application and pressing the green button, the application will be executed.
        paragraph_5: Be sure to carefully review each of the steps above and check the device communication setup, cables and internet connection..
        paragraph_6: 'Several tools and services can help you to test the return of the requests. An example is <a href="http://hurl.it" class="external">hurl.it</a>, which offers a very simple interface, as can be seen below:'
        run_application: 2. Application execution
        testing_post_request: Testing your request
      title: Host integration - Simple HTTP
      understanding_the_service:
        list:
          item_1: The device executes the command <a href="/en/posxml/commands/network.send" class='command'>network.send</a>;
          item_2: The CloudWalk transactional switch receives the content and forwards it to the end point (URL or IP and Port) configured for that application on the CloudWalk manager;
          item_3: The response of the socket is returned to the transactional switch;
          item_4: The device executes the command <a href='/en/posxml/commands/network.receive' class='command'>network.receive</a> and receives the response.
        paragraph_1: 'One way to establish communication between the CloudWalk service and a host authorizer is through HTTP. The diagram below represents communication between the mobile device, the CloudWalk service and the host authorizer:'
        paragraph_2: <strong>Attention:</strong> After performing a network.send and network.receive, you must perform a <a href="/en/posxml/commands/network.hostdisconnect" class='command'>network.hostdisconnect</a> so you can make a new call (send).
      manager_setup:
        associate_logical_number:
          header: Associate the logical number
          paragraph_1: 'The next step is to associate the device with the newly created logical number.</br>Press <strong>F1</strong> (Verifone) or <strong>F</strong> (Ingenico) and enter the default password (55555). The following screen will appear:'
          paragraph_2: 'Select option <strong>1 CLOUDWALK</strong> and this will open the following menu:'
          paragraph_3: 'Select option <strong>1 LOGICAL NUMBERS</strong> and enter the logical number registered in the previous step:'
          paragraph_4: After entering the logical number, press enter (green).
        create_application:
          list:
            item_1: Login to your <a href="https://manager.cloudwalk.io/" class='command'>WALK Manager</a> account
            item_9: A message indicating that the application was successfully registered should be be shown
            item_10: Copy the POSXML source code below. Click <strong>Edit source code</strong> and paste the copied code into the editor. Click on <strong>Deploy</strong>, the fourth icon from the bottom on the left.
            item_2: Select <strong>Apps</strong> from the left menu bar
            item_3: 'Click the button <strong>New application</strong>'
            item_4: 'Enter a name for your application in the Name field under Application details, for example: <strong>httpapp</strong>'
            item_5: Fill in the application description in the Description field, for example <strong>Test with HTTP</strong>
            item_6: Fill <strong>HTTP</strong> in the Label field to be displayed on the POS application list
            item_7: Fill in the Endpoint field with the URL <strong>http://http-echo.cloudwalk.io</strong>
            item_8: 'Click the button: <strong>Register application</strong>'
          posxml:
            comment_01: "The preconnect command attempts to connect the device on CloudWalk"
            comment_02: "Performs the transaction after connecting"
            comment_03: "The content of the variable buffer should be hexadecimal. In the example\n  below, the value 0123456789 is being sent. It is possible to use command\n  string.tohex to convert any string to hexadecimal format, and then\n  use the command string.length to get the string size"
            comment_04: "In order to send data properly, it is necessary to send\n  at least 7 bytes to CloudWalk"
            comment_05: "The answer will also be stored in hexadecimal on the variable variablebuffer. Use\n    the command string.fromhex to convert the content to ASCII"
            comment_06: "Always use the network.hostdisconnect command before using\n  again the commands network.send and network.receive"
        create_group:
          header: Register a group
          list:
            item_1: 'Select <strong>Groups</strong> from the left menu bar'
            item_2: Click on the button <strong>New Group</strong>
            item_3: 'Fill in the group name, for example: <strong>GROUP TEST</strong>'
            item_4: Click on the button <strong>Register group</strong>
            item_5: Next click on the button <strong>Update group</strong>
            item_6: Select the application previously registered by clicking the checkbox next to it from the list of application names
            item_7: Click on the button <strong>Update group applications</strong>
        create_logical_number:
          header: Register logical number
          list:
            item_1: 'Select the option: <strong>Logical Numbers</strong> from the left menu bar'
            item_2: Click on the button <strong>New logical number</strong>
            item_3: Fill in a logical number, for example <strong>0001</strong>
            item_4: Select the previously registered group (GROUP TEST) and click on the button <strong>Register logical number</strong>
          paragraph_1: 'Every device must have a logical number, which is the device identification on CloudWalk. To configure the logical number, follow these steps:'
        paragraph_1: 'The last step is to configure the CloudWalk Manager. Follows the procedure:'
    tcp:
      description: One way to establish communication between the CloudWalk service and a host authorizer is through TCP/IP. Example of use, configuring the device, compiling the application, configuring the CloudWalk Manager, testing the communication.
      pos_setup:
        paragraph_1: This guide assumes that your device already has the CloudWalk Framework properly installed and configured, and that the device serial number is already registered on CloudWalk Manager.
        paragraph_2: If you are unsure of the steps above, please refer to <a href='/en/framework/configuration'>%{configuration}</a>
      sample:
        list:
          item_1: '<strong>Account at CloudWalk Manager: </strong>Create free at <a href="https://manager.cloudwalk.io" class="external">https://manager.cloudwalk.io</a>'
          item_2: <strong>CloudWalk Framework:</strong> Device properly installed and configured
          item_3: <strong>Internet access:</strong> It is necessary that the device has internet access (Ethernet, Dial-up or GPRS)
        paragraph_1: For testing purposes, we provide a host authorizer that is really simple and ready to use.
        prerequisites: Prerequisites
      table_of_contents:
        ide: Compiling the application
        pos_setup: Configuring the device
        sample: Example of use
        testing: Testing the communication
        understanding_the_service: Understanding the communication
        manager_setup: Configuring the CloudWalk Manager
      testing:
        download_application: 1. Download the application
        if_fail: Upon failure
        paragraph_1: 'With the device properly prepared; application compiled and everything correctly configured in CloudWalk Manager, it''s time to test the communication between all the components involved: device, CloudWalk and host authorizer.'
        paragraph_2: 'Press the green button and the process of downloading will start:'
        paragraph_3: 'At the end of the process, the following message appears:'
        paragraph_4: After downloading the application and pressing the green button, the application will be executed.
        paragraph_5: Be sure to carefully review each of the steps above and check the device communication setup, cables and internet connection..
        paragraph_6: 'Several tools and services can help you to test the return of the requests. An example is <strong>telnet</strong>, which offers a very simple interface, as can be seen below:'
        run_application: 2. Application execution
        testing_post_request: Testing your request
      title: Host integration - Plain TCP (socket tunnel)
      understanding_the_service:
        list:
          item_1: The device executes the command <a href="/en/posxml/commands/network.send" class='command'>network.send</a>;
          item_2: The CloudWalk transactional switch receives the content and forwards it to the end point (URL or IP and Port) configured for that application on the CloudWalk manager;
          item_3: The response of the socket is returned to the transactional switch;
          item_4: The device executes the command <a href='/en/posxml/commands/network.receive' class='command'>network.receive</a> and receives the response.
        paragraph_1: 'One way to establish communication between the CloudWalk service and a host authorizer is through TCP/IP. The diagram below represents communication between the mobile device, CloudWalk service and host authorizer:'
        paragraph_2: <strong>Attention:</strong> After performing a network.send and network.receive, you must perform a <a href="/en/posxml/commands/network.hostdisconnect" class='command'>network.hostdisconnect</a> so you can make a new call (send).
      manager_setup:
        associate_logical_number:
          header: Associate the logical number
          paragraph_1: 'The next step is to associate the device with the newly created logical number.</br>Press <strong>F1</strong> (Verifone) or <strong>F</strong> (Ingenico) and enter the default password (55555). The following screen will appear:'
          paragraph_2: 'Select option <strong>1 CLOUDWALK</strong> and this will open the following menu:'
          paragraph_3: 'Select option <strong>1 LOGICAL NUMBERS</strong> and enter the logical number registered in the previous step:'
          paragraph_4: After entering the logical number, press enter (green).
        create_application:
          list:
            item_1: Login to your <a href="https://manager.cloudwalk.io/" class='command'>WALK Manager</a> account
            item_9: A message indicating that the application was successfully registered should be be shown
            item_10: Copy the POSXML source code below. Click <strong>Edit source code</strong> and paste the copied code into the editor. Click on <strong>Deploy</strong>, the fourth icon from the bottom on the left.
            item_2: Select <strong>Apps</strong> from the left menu bar
            item_3: Click on the button <strong>New application</strong>
            item_4: 'Enter a name for your application in the Name field under Application details, for example: <strong>tcpapp</strong>'
            item_5: Fill in the application description in the Description field, for example <strong>Test with TCP IP</strong>
            item_6: Fill <strong>TCP IP</strong> in the Label field to be displayed on the POS application list
            item_7: Fill in the Endpoint field with the URL <strong>tcp://tcp-echo.cloudwalk.io:8000</strong>
            item_8: Click the button <strong>Register application</strong>
          posxml:
            comment_01: "The preconnect command attempts to connect the device on CloudWalk"
            comment_02: "Performs the transaction after connecting"
            comment_03: "The content of the variable buffer should be hexadecimal. In the example\n  below, the value 0123456789 is being sent. It is possible to use command\n  string.tohex to convert any string to hexadecimal format, and then\n  use the command string.length to get the string size"
            comment_04: "In order to send data properly, it is necessary to send\n  at least 7 bytes to CloudWalk"
            comment_05: "The answer will also be stored in hexadecimal on the variable variablebuffer. Use\n    the command string.fromhex to convert the content to ASCII"
            comment_06: "Always use the network.hostdisconnect command before using\n  again the commands network.send and network.receive"
        create_group:
          header: Register a group
          list:
            item_1: 'Select <strong>Groups</strong> from the left menu bar'
            item_2: Click on the button <strong>New Group</strong>
            item_3: 'Fill in the group name, for example: <strong>GROUP TEST</strong>'
            item_4: Click on the button <strong>Register group</strong>
            item_5: Next click on the button <strong>Update group</strong>
            item_6: Select the application previously registered by clicking the checkbox next to it from the list of application names
            item_7: Click on the button <strong>Update group applications</strong>
        create_logical_number:
          header: Register logical number
          list:
            item_1: 'Select the option: <strong>Logical Numbers</strong> from the left menu bar'
            item_2: Click on the button <strong>New logical number</strong>
            item_3: Fill in a logical number, for example <strong>0001</strong>
            item_4: Select the previously registered group (GROUP TEST) and click on the button <strong>Register logical number</strong>
          paragraph_1: 'Every device must have a logical number, which is the device identification on CloudWalk. To configure the logical number, follow these steps:'
        paragraph_1: 'The last step is to configure the CloudWalk Manager. Follows the procedure:'
  introduction:
    ide:
      description: The CloudWalk IDE enables the application development for mobile devices using POSXML language.
      overview:
        paragraph_1: The Cloudwalk service provides a simple, fast and intuitive development environment accessible to anyone using a web browser, it provides the innovative use of real-time collaboration, by which multiple developers can work on the same application simultaneously.
      table_of_contents:
        overview: Overview
      title: CloudWalk IDE
    cli:
      description: The CloudWalk CLI allows you to control your applications in an easy way.
      title: CloudWalk CLI
      table_of_contents:
        overview: Overview
        command_line_interface: Command Line Interface
        ruby_framework_api: Ruby Framework API
        skeleton: Skeleton
        mruby: MRuby
      overview:
        paragraph_1: CloudWalk provides a command line interface tool that allows applications to be manipulated in an easy way. It allows new applications to be set in minutes, and it empowers the developer to make lightning fast changes and deploy them directly into POS terminals from the command line interface.
      command_line_interface:
        paragraph_1: A command line interface (CLI) is a character user interface that was initially the only way to access computers (before graphical user interfaces were invented), but has prevailed since then as the favorite tool for many developers to interact with computers.
        paragraph_2: Every operative system still provides this environment. In Windows it's possible to access it through the <span class='code'>cmd</span> terminal (<span class='code'>CTRL+R</span> and enter <span class='code'>cmd</span>). In Mac OS it's accessible commonly through the Terminal (or iTerm) and in GNU/Linux it's usually called Terminal or Xterm. These boxes contain plenty of commands to interact with the operative system, many of them are very easy to use, simply using the command name and other words after it, separated by spaces, can trigger very powerful effects on the computer.
        paragraph_3: We introduce our CLI tool to help you take control over your apps with as little effort as possible; it's called <strong>cloudwalk</strong>, and it allows you (between other things) to compile, emulate and deploy your applications directly from the CLI.
      ruby_framework_api:
        paragraph_1: The CloudWalk Framework in Ruby was built to facilitate your development experience and is being initially released to work on the PAX platform, and additional platforms such as Verifone and Ingenico will be supported soon.
        paragraph_2: To let you build amazing Ruby applications, we have made an API client available within Ruby, that gives you all the methods you will need to start developing, making it easy to interact with the POS terminal's screen, printer, keyboard, network and to process different types of payments without the overhead of starting from scratch or using a low level language. This tool is called <strong>DaFunk</strong> and it's <a href='https://github.com/cloudwalkio/da_funk'>open source</a>.
      skeleton:
        paragraph_1: Ruby is a modern object-oriented language that has many beautiful properties and a huge community to explore and to support new ideas, such as those you might come up to. Ruby is too heavy of a language to work in a POS terminal by itself, therefore we use <a href='http://www.mruby.org'>MRuby</a>, a small version of Ruby intended to work on embedded systems.
      mruby:
        paragraph_1: Ruby is a modern object-oriented language that has many beautiful properties and a huge community to explore and to support new ideas, such as those you might come up to. Ruby is too heavy of a language to work in a POS terminal by itself, therefore we use <a href='http://www.mruby.org' class='external'>MRuby</a>, a small version of Ruby intended to work on embedded systems. Your applications will be built into MRuby programs that you'll be able to excecute using MRuby tools as well as in our frameworks.
    index:
      description: Open Payment Platform as a Service
      title: "Welcome!"
      intro: "Here you will discover how to get started with CloudWalk, learning the basics of the <a href='/en/introduction/manager'>Manager</a> and the <a href='/en/introduction/ide'>IDE</a>."
      table_of_contents:
        getting_started: "Getting started"
      getting_started:
        paragraph_1: "It is super easy to get started with CloudWalk! Follow the steps below and you should have a simple POS application running on an emulator, communicating with our sample endpoint."
        h3_1: "1. Create a free account"
        paragraph_2: "First, you will need to create a free CloudWalk account, which will let you use all the components of the platform:"
        paragraph_3: "<a href='https://manager.cloudwalk.io/users/sign_up' class='external'>https://manager.cloudwalk.io/users/sign_up</a>"
        h3_2: "2. Create your first app"
        paragraph_4: "Now that you have created your free CloudWalk account, you should be able to create your very first application:"
        paragraph_5: "<a href='https://manager.cloudwalk.io/apps/posxml/new' class='external'>https://manager.cloudwalk.io/apps/posxml/new</a>"
        paragraph_6: "Let's keep it simple and create an application that will just send a string to our test server and then return an echo."
        form:
          application_type_lbl: "Application type"
          application_type_val: "Standard app"
          application_name_lbl: "Application name"
          application_name_val: "helloworld"
          description_lbl: "Description"
          description_val: "A simple echo application"
          label_lbl: "Label"
          label_val: "HELLO WORLD"
          endpoint_lbl: "  Endpoint"
          endpoint_val: "http://http-echo.cloudwalk.io"
        h3_3: "3. Add the source code"
        paragraph_7: "Now that you have created your POSXML application, click on the button <strong>Edit source code</strong>, which will bring up the CloudWalk online IDE, where you can copy and paste the following POSXML code:"
        h3_4: "4. Emulate!"
        paragraph_8: "The last step is to emulate the sample application on the emulator. Click the <strong>Emulate</strong> button, followed by the <strong>Power</strong> button and be impressed!"
        paragraph_9: "Note that the application is just sending a sequence of numbers (variable <span class='code'>sBufSend</span>), and our test server is prepending the string <strong>CLOUDWALK</strong> onto it."
    authorizer:
      description: Component responsible to validate the information provided by POS terminals.
      overview:
        paragraph_1: 'Authorizer is the component responsible for the verification and validation of the information provided by POS terminals. The information that travels over the CloudWalk network follows the following flow:'
        item_1: The <strong>Device</strong> captures the data and sends it to the <strong>CloudWalk Service</strong>.
        item_2: The <strong>CloudWalk Service</strong> receives the data and forwards it to the <strong>Authorizer</strong>.
        item_3: The <strong>Authorizer</strong> validates the data and sends a response to the <strong>CloudWalk Service</strong>.
        item_4: Finally, the <strong>CloudWalk Service</strong> forwards the response to the <strong>Device</strong>.
      more_info:
        paragraph_1: The CloudWalk service is extremely flexible when it comes to the communication between POS terminals and the authorizer. Financial applications commonly use the communication protocol <a href='http://en.wikipedia.org/wiki/ISO_8583' class="external">ISO 8583</a>, but other patterns and standards can be used.
        paragraph_2: The transaction validation is an important step because it allows an Issuer to check if the payment mode used is authentic and that the data (value, transaction date, etc.) received by the authorizer is the same data used by the payment method when the transaction was created.
        paragraph_3: In addition to validating the data generated by the payment method, the authorizer is also able to sign the response message (e.g. "transaction authorized") before sending it to the POS terminal, so the authorizer can authenticate the POS and the POS can also authenticate the Issuer, assuring more safety on the process.
        paragraph_4: The CloudWalk service offers all the tools needed to develop applications for the main POS terminals in the market, but does not develop or provide authorization servers.
        paragraph_5: The authorizer development and maintenance is the customer's responsibility.
      table_of_contents:
        more_info: More information
        overview: Overview
      title: Authorizer
    posxml:
      description: Programming language that is used to create applications for mobile devices.
      more_info:
        paragraph_1: Learn more about the <a href='https://en.wikipedia.org/wiki/POSXML' class='external'>POSXML</a> language on Wikipedia!
      overview:
        paragraph_1: POSXML is a name given to the programming language created in-house. This guide will walk you through the process of installing the CloudWalk Framework on terminals Verifone, aimed at developing applications for devices such as POS terminals and smartphones. It is organized and structured in the form of tags, showing levels and subsets of a set of commands and instructions, which form the logical structure of a POSXML application.
        paragraph_2: Structured and based on XML (acronym for eXtensible Markup Language), POSXML is easy to learn, has mathematical features and powerful graphical capabilities that enable the creation of animated interfaces with icons and animations.
      table_of_contents:
        more_info: More information
        overview: Overview
      title: POSXML language
    framework:
      approved_devices:
        cloudwalk_reader: CloudWalk devices
        paragraph_1: The component CloudWalk Framework, which is installed on devices, differs between various lines of equipment, since each device has its own specifications. If the equipment you want to use does not appear on the list below, <a href='https://www.cloudwalk.io/contact'>contact us</a>, because we may consider approving it.
        paragraph_2: 'Currently, the following devices are approved by the CloudWalk Framework:'
      contactless:
        paragraph_1: 'CloudWalk also offers the possibility to use contactless technology on all devices with built-in native contactless, and also works through the pinpads <strong>1000 SE CTLS</strong> (Verifone) and <strong>IPP220 CTLS / IPP320 CTLS</strong> (Ingenico).'
      description: 'The CloudWalk Framework is a virtual machine that has the ability to interpret the commands of the POSXML language. Currently, the following devices are approved by the CloudWalk Framework: Verifone Verix Line, Verifone Evo Line, Ingenico Telium 2 Line.'
      overview:
        paragraph_1: The CloudWalk Framework, installed directly on the device, is a virtual machine that has the ability to interpret the commands of the POSXML language.
      table_of_contents:
        approved_devices: Approved devices
        overview: Overview
      title: CloudWalk Framework
    manager:
      api:
        paragraph_1: All operations available through the CloudWalk Manager web interface can also be performed using our JSON API which only requires an API Token.
        paragraph_2: More information on
      description: The CloudWalk Manager is a tool used to grant access to devices, register applications, files, logical numbers and groups. All operations available through CloudWalk Manager web interface can also be performed via JSON API.
      how_to_access:
        paragraph_1: Access to the CloudWalk Manager is granted via Internet, using the address <a href='https://manager.cloudwalk.io'>https://manager.cloudwalk.io</a>.
      overview:
        paragraph_1: 'CloudWalk Manager is a tool used to grant access to devices, register applications, files, logical numbers and groups. Within this environment you are also able to manage users and monitor the transactions performed by devices.'
      table_of_contents:
        api: API
        how_to_access: How to access
        overview: Overview
      title: CloudWalk Manager
  main_menu:
    docs: Documentation
    get_in_touch: Get in touch
    home: Home
    sign_in: Log in
    support: Support
  menu:
    api:
      group_name: Developer API
      overview: Overview
      v1:
        apps: Applications
        assets: Files
        devices: Devices
        groups: Groups
        logical_numbers: Logical numbers
        transactions: Transactions
        push_notifications: Push notifications
        parameters: Parameters
        users: Users
    ide:
      group_name: CloudWalk IDE
      overview: Overview
      emulator: Emulator
    cli:
      group_name: CloudWalk CLI
      setup: Set up
      creating_a_new_app: Creating a new app
      customizing_an_app: Customizing an app
      deploying_an_app: Deploying an app
    guides:
      group_name: Guides
      patterns: "Transaction patterns"
      emulator_card_swipe: "Emulator Card Swipe"
      emulator_serial_ports: "Emulator Serial Ports"
      using_http_headers: "Using HTTP headers"
    help:
      group_name: Help
      faq: "Frequently Asked Questions"
    integration:
      advanced_http: REST HTTP
      architecture: Service architecture
      group_name: Host integration
      http: Simple HTTP
      tcp: Plain TCP (socket tunnel)
    posxml:
      commands_list: List of commands
      configuration: Configuration
      file_system: File System
      group_name: POSXML language
      memory_and_variables: Variables and memory
      structure: Language structure
      useful_functions: Useful functions
    understanding_the_service:
      ide: CloudWalk IDE
      cli: CloudWalk CLI
      group_name: The Platform
      introduction: Introduction
      authorizer: Authorizer
      posxml: POSXML language
      framework: CloudWalk Framework
      manager: CloudWalk Manager
    framework:
      configuration: Device configuration
      first_launch: 'First launch'
      group_name: CloudWalk Framework
      ingenico_telium_1: Ingenico Telium 1
      ingenico_telium_2: Ingenico Telium 2
      pax_d200: PAX D200
      verifone_evo: Verifone EVO
      verifone_verix: Verifone Verix
    manager:
      apps: Applications
      assets: Files
      devices: Devices
      group_name: CloudWalk Manager
      groups: Groups
      logical_numbers: Logical numbers
      push_notifications: Push notifications
      transactions_monitor: Transactions monitor
  posxml:
    commands:
      deprecated: "Deprecated"
      deprecated_info: "This command has been deprecated and therefore does not work anymore"
      adjustdatetime:
        paragraph_1: "The date and time is automatically set by the CloudWalk host, based on your timezone. Note that the timezone can be changed on your <a href='https://manager.cloudwalk.io/users/edit'>Manager account</a>."
      break:
        description: The break command allows immediate exit from while loop
        paragraph_1: The command <span class='code'>break</span> is used to stop the execution of a loop.
        paragraph_2: In the example above, when the value of the variable <em>iNumber</em> is equal to <em>3</em> the condition of the command <a href='if' class='command'>if</a> is true, causing the execution of the command <strong>break</strong> which stops the execution of the block <a href='while' class='command'>while</a> even if the condition has not been met yet.
      callfunction:
        description: Makes a call on a previously defined function
        paragraph_1: The command <span class='code'>callfunction</span> performs a function (<a href='function' class='command'>function</a>).
        paragraph_2: In the example above, function <em>double_value</em> has been declared, that encapsulates the command <a href='mathematicaloperation' class='command'>mathematicaloperation</a> which doubles the value of the variable <em>$(iNumber)</em>.
        paragraph_3: The command <a href='callfunction' class='command'>callfunction</a> calls the function <em>double_value</em>.
        paragraph_4: To display the value of the variable <em>$(iNumber)</em>, which is an <a href='integervariable' class='command'>integervariable</a>, you need to convert your type to <a href='stringvariable' class='command'>stringvariable</a> using the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>name</strong> <span class='data-type'>[string]</span><br/>Function name.
      checkpaperout:
        description: Checks if the paper compartment still contains paper
        paragraph_1: The command <span class='code'>checkpaperout</span> is used to check if there is paper in the printer.
        paragraph_2: This example creates a variable <em>$(iPaper)</em> that will store the result of the command <strong>checkpaperout</strong> using the parameter <em>variablereturn</em>.
        paragraph_3: The block <a href='if' class='command'>if</a> checks the value of the variable <em>$(iPaper)</em> and displays the message on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the result of the command, 0 (no paper present) or 1 (paper present).
      cleandisplay:
        description: Clean the device display (like a clear or cls)
        paragraph_1: The command <span class='code'>cleandisplay</span> is used to delete the entire contents of <a href='display' class='command'>display</a>.
        paragraph_2: In the example above, the four lines that were displayed have been removed from <a href='display' class='command'>display</a>
      closeserialport:
        description: Closes the serial port
        paragraph_1: The command <span class='code'>closeserialport</span> is used to close an open serial port.
        paragraph_2: In the example above the command <a href='openserialport' class='command'>openserialport</a> will open a connection on port <strong>COM1</strong> with the rate <strong>115200</strong> and configuration <strong>A8N1</strong>.
        paragraph_3: The command <a href='closeserialport' class='command'>closeserialport</a> will close the serial port.
        parameters:
          parameter_1: <strong>variablehandle</strong> <span class='data-type'>[integer]</span><br/>Handle of the open door.
      comments: Comments
      comments_message: Leave your comment...
      convert_toint:
        description: Converts binary, decimal or hexadecimal to integer
        paragraph_1: The command <span class='code'>convert.toint</span> is used to convert a binary, decimal or hexadecimal value to an integer value.
        paragraph_2: In the example above the binary <strong>1010</strong> will be converted to decimal.
        paragraph_3: To display the converted value on the <a href='display' class='command'>display</a>, you need to convert it using the command  <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: '<strong>base</strong> <span class="data-type">[integer]</span><br/>The base that is used in the conversion:<ul><li>2: binary</li><li>10: decimal</li><li>16: hexadecimal</li></ul>'
          parameter_2: <strong>number</strong> <span class='data-type'>[string]</span><br/>Binary, decimal or hexadecimal that will be converted.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the result of the command.
      crypto_crc:
        description: 16-bit CRC calculation, support CRC-CCITT
        paragraph_1: The command <span class='code'>crypto.crc</span> is used for 16-bit CRC calculation and CRC-CCITT support.
        paragraph_2: In the example above, the buffer <strong>30313233343536</strong> will be used in the <strong>CRC</strong> calculation and the return of the command will be stored in the variable <strong>iReturn</strong>. This value will then be converted to a string using the command <a href='stringvariable' class='command'>stringvariable</a> and stored in the variable <strong>sReturn</strong>.
        paragraph_3: The return should be <strong>19462</strong>.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Hexadecimal representation that will be used to calculate CRC.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Number of bytes in buffer.
          parameter_3: <strong>type</strong> <span class='data-type'>[string]</span><br/>CRC or CRC-CCITT.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string or integer]</span><br/>Variable that will store the return of the command.
      crypto_encryptdecrypt:
        description: Encryption routines with algorithms DES, 3DES or NEWDES
        paragraph_1: The command <span class='code'>crypto.encryptdecrypt</span> is used to encrypt or decrypt data, in a specific format using DES, 3DES, 3DESTripleLength or NEWDES and using a specific key to return an encrypted or decrypted output.
        paragraph_2: In the example above, the command <a href='string.tohex' class='command'>string.tohex</a> has been used to transform the value of the variable <strong>sAscii</strong> in hexadecimal, which is the value required for the attribute <strong>crypto.encryptdecrypt</strong>.
        paragraph_3: The first <a href='display' class='command'>display</a> will display the value <strong>3031323334353637</strong> encrypted with type <strong>NEWDES</strong>.
        paragraph_4: The second <a href='display' class='command'>display</a> shows the decrypted value.
        parameters:
          parameter_1: <strong>cryptotype</strong> <span class='data-type'>[string]</span><br/>Algorithm to be used:<ul><li>DES</li><li>3DES</li><li>3DESTripleLength</li><li>NEWDES</li></ul>
          parameter_2: '<strong>key</strong> <span class="data-type">[string]</span><br/>Hexadecimal encryption key:<ul><li>DES: 8 bytes or 16 characters</li><li>3DES: 16 bytes or 32 characters</li><li>3DESTripleLength: 24 bytes or 48 characters</li><li>NEWDES: 15 bytes or 30 characters</li></ul>'
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Value, hexadecimal, which will be encrypted or decrypted. If the value has more than 8 bytes it must be parsed into blocks with the command <a href='string.elementat' class='command'>string.elementat</a>
          parameter_4: '<strong>type</strong> <span class="data-type">[integer]</span><br/><ul><li>0: Encrypt</li><li>1: Decrypt</li></ul>'
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      crypto_lrc:
        description: Generates a LRC byte of the string in the buffer
        paragraph_1: The command <span class='code'>crypto.lrc</span> is used to generate a <a href='https://en.wikipedia.org/wiki/Longitudinal_redundancy_check'>LRC</a> byte of the string in the buffer.
        paragraph_2: In the example above, the buffer <strong>30313233343536</strong> will be used to generate a <strong>LRC</strong> byte.
        paragraph_3: The return should be <strong>37</strong>.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Hexadecimal representation that will be used to generate a LRC byte.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Number of bytes in the buffer.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[string or integer]</span><br/>Variable that will store the return result.
      crypto_xor:
        description: Performs a binary XOR operation on the bytes of two strings
        paragraph_1: The command <span class='code'>crypto.xor</span> is used to perform a <a href="https://en.wikipedia.org/wiki/Exclusive_or">XOR</a> binary operation on the bytes of two strings.
        paragraph_2: In the example above, <strong>buffer1</strong> <strong>123456</strong> is different from <strong>buffer2</strong> <strong>123450</strong> making that the <strong>XOR</strong> operation returns the result (hexadecimal) <strong>000 006 000 000</strong>.
        parameters:
          parameter_1: <strong>buffer1</strong> <span class='data-type'>[string]</span><br/>Hexadecimal string that will be used on the XOR operation.
          parameter_2: <strong>buffer2</strong> <span class='data-type'>[string]</span><br/>Hexadecimal string that will be used on the XOR operation.
          parameter_3: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Buffer size in bytes.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the hexadecimal return value of the XOR command.
      deletefile:
        description: Deletes a file from the device memory
        paragraph_1: The command <span class='code'>deletefile</span> deletes a file from the device memory.
        paragraph_2: In the example above, the file <strong>test.txt</strong> has been downloaded using the command <a href='downloadfile' class='command'>downloadfile</a>.
        paragraph_3: The command <a href='deletefile' class='command'>deletefile</a> deletes the file <strong>test.txt</strong> from the device memory, ensuring that the variable <strong>sPopulation</strong> is empty and does not show anything on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
      description: Listing with a brief description of all POSXML commands.
      display:
        description: Displays a custom message on device's display
        paragraph_1: The command <span class='code'>display</span> is used to display a customized message on the device display, considering the row and column passed as parameters to the command.
        paragraph_2: In the example above, the message <strong>CLOUDWALK</strong> is displayed from line <strong>0</strong>, column <strong>0</strong>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column where the message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message that will be displayed.
      displaybitmap:
        description: Displays a monochromatic bitmap on the display
        paragraph_1: The command <span class='code'>displaybitmap</span> is used to display a bitmap image.
        paragraph_2: In the example above, to display a bitmap image using the command <strong>displaybitmap</strong>, first download the .bmp file using <a href='downloadfile' class='command'>downloadfile</a>.
        paragraph_3: (In this case it is not necessary to use the command <a href='display' class='command'>display</a> to view the image.)
        paragraph_4: The variable <strong>iReturn</strong> will store the result of the command and will be used to display the bitmap image on the device display.
        paragraph_5: 'The image dimensions that will be shown must be aligned according to the device model and specification. Check an example image: <a href="http://dl.dropboxusercontent.com/u/436039/CLOUDWALK/img/walk.bmp" class="external">CloudWalk_Wallpaper</a>'
        parameters:
          parameter_1: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the result of the command.<ul><li>-2: Bitmap is monochrome</li><li>-1: invalid bitmap size</li><li>0: bitmap not found</li><li>1: bitmap successfully displayed</li></ul>'
          parameter_2: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name with extension.
      downloadfile:
        description: Downloads a file previously registered on the CloudWalk Manager
        paragraph_1: The command <span class='code'>downloadfile</span> is used to download a file.
        paragraph_2: In the example above, the file <strong>wallpaper_walkpb.bmp</strong> will be downloaded by the command <strong>downloadfile</strong>, displaying the response <strong>1</strong> <em>(Download performed successfully)</em> on the <a href='display' class='command'>display</a>.
        paragraph_3: As the return of the command <strong>downloadfile</strong> is an <a href='integervariable' class='command'>integervariable</a>, it must be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a> with the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name with extension.
          parameter_2: <strong>remotepath</strong> <span class='data-type'>[string]</span><br/>File name with extension.
          parameter_3: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code. <ul><li>2: The file has the CRC of a file on the server </li><li>1: Download performed successfully </li><li>0: Error encode base 64 </li><li>-1: File not found or error on encode</li><li>-2: Connection error in buffer send</li><li>-4: Error when receiving Walk Server package </li><li>-5: Error connecting to Walk Server</li><li>-6: Error message transfer</li><li>-7: Error sending confirmation of completed download</li><li>-8: Number unauthorized</li></ul>'
      editfile:
        description: Allows write a file in WALK dbfile format (key/value)
        paragraph_1: The command <span class='code'>editfile</span> is used to edit a file in <a href='#walk_db' class='command'>Walk DB</a> format.
        paragraph_2: In the example above the file <strong>test.txt</strong> has been downloaded with the command <a href='downloadfile' class='command'> downloadFile </a>.
        paragraph_3: The command <a href='editfile' class='command'>editfile</a> makes an edit on the key <strong>Population</strong> changing the value from <strong>3.792.621</strong> to <strong>3.792.700</strong>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: <strong>key</strong> <span class='data-type'>[string]</span><br/>Key.
          parameter_3: <strong>value</strong> <span class='data-type'>[integer or string]</span><br/>New value for the key.
      else:
        description: Logical condition in a block of the if statement
        paragraph_1: The <span class='code'>else</span> statement is used to specify a condition contrary to the <span class='code'>if</span> statement in an POSXML application. Other commands can be used within an <span class='code'>else</span> block, and these commands are executed if the logical expression of the <span class='code'>if</span> statement is not true.
        paragraph_2: 'There are three conditions in the example above:'
        paragraph_3: 1st - comparison between two texts resulting in <strong>false</strong> because <strong>Blue</strong> is different from the value of the variable <strong>sColor</strong>;
        paragraph_4: 2nd - comparison between two numbers resulting in <strong>false</strong> because <strong>111</strong> isn't greater than the value of the variable <strong>iNumber</strong>;
        paragraph_5: 3rd - comparison between two texts resulting in <strong>false</strong> because <strong>blue</strong> is equal to the value of the variable <strong>sColor</strong>;
        paragraph_6: POSXML is <strong>case-sensitive</strong>, so uppercase letters are different than lowercase letters.
      emv_adddata:
        description: Adds parameters to EMV process
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_10: For the type <em><strong>'finish'</strong> &lt;emv.finishtransaction/&gt;</em>
        table_3:
            table_row_1: Communication status with the Host</br>0 - Successful Communication</br>1 - Failed to communicate with the host.
            table_row_2: Issuer type</br>0 - EMV “Full-Grade”</br>1 - EMV “Partial-Grade”.
            table_row_3: Authorization Response Code (em ASCII). Standard definitions:</br>00 - Approved</br>01 - Denied</br>Y1 - Offline approved</br>Y3 - Offline declined</br>Z1 - Unable to go online, offline approved</br>Z3 - Unable to go online, offline declined
            table_row_4: Field size of baTLVDataEMV.
            table_row_5: Tags list returned by the issuer. (Hex)
            table_row_6: Field size of baMandatoryTags.
            table_row_7: List of mandatory tags to be retrieved in the operation. (Hex)
        paragraph_11: The example above demonstrates an example for each parameter type, <span class='code'>init</span>, <span class='code'>process</span> and <span class='code'>finish</span>.
        paragraph_12: The example shown here is fictitious, since in order to succeed with a full EMV transaction it is necessary to meet several other requirements such having as an ISO-8583 answer from the card issuer, keys injected into the terminal and other requirements defined by the EMV standard.
        paragraph_2: The command <span class='code'>emv.adddata</span> is used to pass parameters to the <em>EMV Kernel</em> on commands <a href='emv.inittransaction' class='command'>emv.inittransaction</a>, <a href='emv.processtransaction' class='command'>emv.processtransaction</a> and <a href='emv.finishtransaction' class='command'>emv.finishtransaction</a>.
        paragraph_3: 'Allowed parameters:'
        paragraph_4: Parameter
        paragraph_5: Description
        paragraph_6: Contact
        paragraph_7: Cless
        paragraph_8: For the type <em><strong>'init'</strong> &lt;emv.inittransaction/&gt;</em>
        table_1:
            table_row_1: Acquiring Network Identifier
            table_row_2: 99 - All applications</br>0 - Only application selections in waAppArray
            table_row_3: Initial value (Amount authorized). 12 characters with 0 padding to the left, example:</br> “000000005000”(50,00)
            table_row_4: Date of the transaction (“AAMMDD”)
            table_row_5: Time of the transaction (“HHMMSS”)
            table_row_6: Timestamp for the tables (“DDMMAAAASS”), where SS is ​any sequential number. The Telium EMV Kernel validates the timestamp.
            table_row_7: Number of entries on the list waAppArray
            table_row_8: Array containing the acquiring network identifier + table index of EMV parameters. Where X is the sequential number of the application, starting from 1. Example waAppArray1, waAppArray2...
        paragraph_9: For the type <em><strong>'process'</strong> &lt;emv.processtransaction/&gt;</em>
        table_2:
          table_row_1: Value of the transaction (Amount, authorized); may include new values presented after the instruction emv.inittransaction. 12 characters with 0 padding to the left, example:</br>“000000005000”(50,00).
          table_row_2: 'Withdrawl value or change - cashback (Amount, other). 12 characters with 0 padding to the left, example: “000000005000”(50,00).'
          table_row_3: Cancel the previous transaction</br>1 - yes</br>0 - no
          table_row_4: Results of querying the blacklist (EMV)</br>0 - PAN not blacklisted</br>1 - PAN blacklisted.
          table_row_5: Mandatory connection</br>0 - Transaction can be made offline</br>1 - Transaction can only be made online.
          table_row_6: PIN entry</br>0 - Not required</br>1 - Required.
          table_row_7: Encryption mode to capture PIN online</br>2 - DUKPT DES(8 bytes)</br>3 - DUKPT 3DES(18 bytes)
          table_row_8: EMV Risk Management</br>0 - Do not make a risk assessment</br>1 - Make a risk assessment.
          table_row_9: Terminal Floor Limit (in cents).
          table_row_10: Threshold Value for Biased Transaction Selection (in cents).
          table_row_11: Maximum Target Percentage to be used for Biased Transaction Selection.
          table_row_12: Field size of baMandatoryTags.
          table_row_13: List of the tags necessary to assemble the field 55 of the ISO-8583 message. (Hex)
          table_row_14: Field size of baOptionalTags.
          table_row_15: List of desirable tags to be retrieved in the operation. (Hex)
        parameters:
          parameter_1: <strong>parameter</strong> <span class='data-type'>[string]</span><br/> Parameter name to be sent. <a href='#table-of-parameters'>(see table below)</a>
          parameter_2: '<strong>type</strong> <span class="data-type">[string]</span><br/> Possible types: <br/><ul><li>init</li><li>process</li><li>finish</li></ul>'
          parameter_3: <strong>value</strong> <span class='data-type'>[string]</span><br/> Parameter value.
          parameter_4: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/> Return codes: <br/><ul><li>0: OK</li><li>-1: Error. Type, key or value doesn''t exist.</li></ul>'
      emv_cleanstructures:
        description: Clears all input and output parameters
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.cleanstructures</span> is used to clean the data entry and search information structures. It is necessary to execute this command before starting a transaction.
        paragraph_3: In the example above, the first command executed is <span class='code'>emv.cleanstructures</span> command. This is used to clean up the data structures to prepare for a new transaction, followed by the command <a href='emv.adddata' class='command'>emv.adddata</a> which is executed to pass the parameters to the <em>EMV Kernel</em>, and finally the command <a href='emv.inittransaction' class='command'>emv.inittransaction</a> initiates the transaction.
        paragraph_4: The command <a href='if' class='command'>if</a> should be used to evaluate the command returns. In the process of developing an application, the commands <a href='inttostring' class='command'>inttostring</a> and <a href='print' class='command'>print</a> can be used to <strong>DEBUG</strong> and help the developer.
      emv_finishtransaction:
        description: Terminates the execution of the EMV process
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.finishtransaction</span> finishes chip processing if <a href='emv.processtransaction' class='command'>emv.processtransaction</a> has requested online approval or if the transaction has already been approved offline.
        paragraph_3: A transaction denied in <a href='emv.processtransaction' class='command'>emv.processtransaction</a> does not require a call to this instruction.
        paragraph_4: In the example above, the command <a href='emv.adddata' class='command'>emv.adddata</a> is used to pass parameters to the <em>EMV Kernel</em>.
        paragraph_5: After that, the command <span class='code'>emv.finishtransaction</span> is executed to finish the chip processing. As the command return is an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable that will be displayed using the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<br/><ul><li>0: OK</li><li>11: Invalid parameter passed on <em>emv.adddata</em></li><li>12: Timeout</li><li>13: Insert, card swipe or choose application operation canceled by the user</li><li>15: Library EMV not initiated</li><li>16: Internal error</li><li>20: Device timestamp does not match with the parameter''s timestamp passed through <em>emv.adddata</em></li><li>40: Execution error</li><li>41: Error while reading the card</li><li>43: Card removed in the middle of the operation</li></ul>'
      emv_getinfo:
        description: Returns information parameters after the execution of the EMV process
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_10: For the type <em><strong>'finish'</strong> &lt;emv.finishtransaction/&gt;</em>
        table_3:
          table_row_1: Decision taken</br>0 - Approved</br>1 - Declined by card</br>2 - Declined by host
          table_row_2: Mandatory and Optional tags required in emv.processtransaction
          table_row_3: Size of Issuer Script Results
          table_row_4: Results of scripts execution (EMV 4.2, Book 4, Section A5)
        paragraph_11: In the example above, the command <span class='code'>emv.getinfo</span> was used to fetch the parameters following the execution of the commands <a href='emv.inittransaction' class='command'>emv.inittransaction</a>, <a href='emv.processtransaction' class='command'>emv.processtransaction</a> and <a href='emv.finishtransaction' class='command'>emv.finishtransaction</a>. The command <a href='print' class='command'>print</a> was used to display the ticket information.
        paragraph_12: Note that before performing the commands <strong>init</strong>, <strong>process</strong> and <strong>finish</strong> it is necessary to pass parameters to the <em>EMV Kernel</em> with the command <a href='emv.adddata' class='command'>emv.adddata</a>.
        paragraph_2: The command <span class='code'>emv.getinfo</span> is used to search for results in the instructions <a href='emv.inittransaction' class='command'>emv.inittransaction</a>, <a href='emv.processtransaction' class='command'>emv.processtransaction</a> and <a href='emv.finishtransaction' class='command'>emv.finishtransaction</a>.
        paragraph_3: 'Allowed parameters:'
        paragraph_4: Parameter
        paragraph_5: Description
        paragraph_6: Contact
        paragraph_7: Cless
        paragraph_8: For the type <em><strong>'init'</strong> &lt;emv.inittransaction/&gt;</em>
        table_1:
          table_row_1: Card type</br>0 - Magnetic stripe</br>3 - EMV chip card.
          table_row_2: Status of the last card read</br>0 - OK</br>1 - Fallback is necessary</br>2 - App not supported.
          table_row_3: Application selection type (as per the parameters table)</br>01 - Credit</br>02 - Debit</br>03 - Voucher
          table_row_4: Acquiring network identifier (as per the parameters table).
          table_row_5: Registry index in the parameter table.
          table_row_6: Field size of bTrack1.
          table_row_7: Track 1 (Hex).
          table_row_8: Field size of bTrack2.
          table_row_9: Track 2 (Hex).
          table_row_10: Field size of bTrack3.
          table_row_11: Track 3 (Hex).
          table_row_12: Field size of baPAN.
          table_row_13: PAN
          table_row_14: PAN Sequence.
          table_row_15: Field size of baApplicationLabel.
          table_row_16: Application Name.
          table_row_17: Service Code (padded to the left with zeros).
          table_row_18: Field size of baCardHolderName.
          table_row_19: Cardholder name.
          table_row_20: Expiry date (“AAMMDD”).
          table_row_21: Field size of baExternalNumber.
          table_row_22: External card number.
          table_row_23: Balance, allowed in money (wallet).
          table_row_24: Country code of the Issuer.
        paragraph_9: For the type <em><strong>'process'</strong> &lt;emv.processtransaction/&gt;</em>
        table_2:
          table_row_1: Decision taken</br>0 - Approved Offline</br>1 - Declined</br>2 - Go Online
          table_row_2: Signature on paper should be obtained</br>0 - No</br>1 - Yes
          table_row_3: PIN was verified Offline</br>0 - No</br>1 - Yes
          table_row_4: Number of invalid PIN entries Offline
          table_row_5: Offline PIN was blocked at the last invalid entry</br>0 - No</br>1 - Yes
          table_row_6: PIN captured for online verification</br>0 - No</br>1 - Yes
          table_row_7: Key Serial Number and Key Counter in the case of PIN Online
          table_row_8: Field size of baTLVDataEMV
          table_row_9: Mandatory and Optional Tags required in parameter baMandatoryTags of AddData (cryptogram to be analyzed by the card issuer in the event of an online transaction)
          table_row_10: Amount available for offline approval
          table_row_11: VLP Issuer Authorization Code. Only for Visa and JCB cards
          table_row_12: VISA Card Transaction Qualifiers
          table_row_13: Application expiration date
          table_row_14: Application effective from date (“DDMMAA”)
          table_row_15: Field size of baTrack1EquivalentData
          table_row_16: Track 1 Equivalent Data
          table_row_17: Field size of baTrack2EquivalentData
          table_row_18: Track 2 Equivalent Data
          table_row_19: Card type</br>0 - Magnetic stripe</br>3 - EMV chip card
          table_row_20: Field size of baApplicationIdentifier
          table_row_21: Application Identifier
          table_row_22: Field size of bTrack1
          table_row_23: Track 1 (Hex)
          table_row_24: Field size of bTrack2
          table_row_25: Track 2 (Hex)
          table_row_26: Field size of baPAN
          table_row_27: PAN
          table_row_28: PAN Sequence
          table_row_29: Field size of baApplicationLabel
          table_row_30: Application Name
          table_row_31: Field size of baCardHolderName
          table_row_32: Cardholder name
        parameters:
          parameter_1: <strong>parameter</strong> <span class='data-type'>[string]</span><br/>Parameter name to search for <a href='#table-of-parameters'>(see table below)</a>.
          parameter_2: <strong>type</strong> <span class='data-type'>[string]</span><br/>Possible types:<br/><ul><li>init</li><li>process</li><li>finish</li></ul>
          parameter_3: <strong>value</strong> <span class='data-type'>[string]</span><br/>Variable that will store the parameter value that will be returned by the <em>EMV Kernel</em>.
      emv_inittransaction:
        description: Initializes the EMV process with inserted parameters
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.inittransaction</span> starts processing of the EMV card, either magnetic stripe or chip. At this time, the EMV library will ask the card for <strong>insertion/swipe</strong> in order to choose and start the EMV application on the smartcard. The response is the card data to be analyzed by the device application.
        paragraph_3: This instruction uses the timeout set for <b>card insertion</b> and <b>choice of application</b>, if it has been defined by <a href='emv.settimeout' class='command'>emv.settimeout</a>.
        paragraph_4: In the example above, the command <a href='emv.cleanstructures' class='command'>emv.cleanstructures</a> was used to clean the data structures, and the command <a href='emv.adddata' class='command'>emv.adddata</a> was used pass the parameters to the <em>EMV Kernel</em>.
        paragraph_5: After that, the command <span class='code'>emv.inittransaction</span> is executed to start the EMV processing. As the command return code is an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable that will be displayed using the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<br/><ul><li>0: OK</li><li>11: Invalid parameter passed on <em>emv.adddata</em></li><li>12: Timeout</li><li>13: Insert, card swipe or choose application operation canceled by the user</li><li>15: Library EMV not initiated</li></ul>'
      emv_loadtables:
        description: load tables EMV and PKI of the file for the buyer
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.loadtables</span> is used to load the table settings for each application by EMV acquirer network.
        paragraph_3: The loading of tables should be done in the device initialization. To load a table, a file should be sent to the device, with a standard name plus the number of the acquirer network.
        paragraph_4: In the example above, the command <a href='emv.open' class='command'>emv.open</a> is initialize to start the EMV library, and then the command <a href='if' class='command'>if</a> is used to evaluate the result of the operation.
        paragraph_5: The command <span class='code'>emv.loadtables</span> is used to load the tables, and since the command return is a <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert and display the variable using the command <a href='display' class='command'>display</a>.
        paragraph_6: <strong>ATTENTION!</strong>
        paragraph_7: It is necessary to initialize the library EMV and load the tables only if the device is <strong>turned on</strong> or <strong>restarted</strong>, otherwise it is not necessary to use this command every time an EMV transaction starts.
        parameters:
          parameter_1: <strong>acquirer</strong> <span class='data-type'>[integer]</span><br/> Acquirer network identification number.
          parameter_2: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<br/><ul><li>0: OK</li><li>10: Error while starting the tables</li><li>15: Library EMV not initiated</li><li>16: Internal error</li><li>21: Error while trying to store records</li><li>30: Communication error, PIN-Pad serial port is probably busy</li></ul>'
      emv_open:
        description: Initializes EMV library
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.open</span> is used to initialize the EMV library, allocating hardware and software resources necessary for the EMV Kernel operation. A successful call to this command is a prerequisite for all other EMV library calls.
        paragraph_3: In the example above, the command <span class='code'>emv.open</span> is used to initialize the device's EMV library. Since the command returns an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> was used to convert the variable to <a href='stringvariable' class='command'>stringvariable</a>, displaying its content through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>mkslot</strong> <span class='data-type'>[integer]</span><br/> Device slot that the master key is stored.
          parameter_2: '<strong>pinpadtype</strong> <span class="data-type">[integer]</span><br/> PIN-Pad type: <br/><ul><li>1: Internal</li><li>2: External</li></ul>'
          parameter_3: <strong>pinpadwk</strong> <span class='data-type'>[string]</span><br/> Working key used on the pinpad session.
          parameter_4: '<strong>showamount</strong> <span class="data-type">[integer]</span><br/> Defines wether the library should show the amount: <br/><ul><li>1: Show the amount</li><li>0: Does not show the amount</li></ul>'
          parameter_5: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/> Return codes: <br/><ul><li>0: OK</li><li>14: Library already started</li><li>16: Error</li></ul>'
      emv_processtransaction:
        description: Starts the execution of the EMV process
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.processtransaction</span> continues the chip card handling process. If the command <a href='emv.inittransaction' class='command'>emv.inittransaction</a> returns that a magnetic card was swiped, then this command should not be executed.
        paragraph_3: This command uses the timeout defined by <a href='emv.settimeout' class='command'>emv.settimeout</a> when capturing the PIN.
        paragraph_4: In the example above, the command <a href='emv.adddata' class='command'>emv.adddata</a> is used to pass parameters to the <em>EMV Kernel</em>.
        paragraph_5: Then the command <span class='code'>emv.processtransaction</span> is executed to continue the chip card handling process. Since the command returns an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable, displaying its content through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: '<strong>ctls</strong> <span class="data-type">[integer]</span><br/>Defines the transaction type <em><strong>contact-less</strong></em> or <em><strong>contact</strong></em>, where:<br/><ul><li>1: Contact-less transaction</li><li>0: Contact (standard) transaction</li></ul>'
          parameter_2: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<br/><ul><li>0: OK</li><li>11: Invalid parameter passed on <em>emv.adddata</em></li><li>12: Timeout</li><li>13: Insert, card swipe or choose application operation canceled by the user</li><li>15: Library EMV not initiated</li><li>16: Internal error</li><li>19: Absence of data for the mandatory field 55, or mandatory data is not accessible (if that is the case, pass the tag on baOptionalTags)</li><li>31: PIN-Pad communication error</li><li>40: Execution error</li><li>43: Card removed in the middle of the operation</li></ul>'
      emv_removecard:
        description: Waits for card removal
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.removecard</span> is implemented for chip card removal. It is advised to always use this command at the end of the operation flow, whether successful or unsuccessful.
        paragraph_3: This command uses the timeout to remove the card as defined by <a href='emv.settimeout' class='command'>emv.settimeout</a>.
        paragraph_4: In the example above, the command <a href='emv.adddata' class='command'>emv.adddata</a> is used to pass parameters to the <em>EMV Kernel</em>.
        paragraph_5: Then the command <span class='code'>emv.finishtransaction</span> is executed to finish the chip card handling process. After that, the command <span class='code'>emv.removecard</span> requests the user to remove the chip card. Since the command returns an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable, displaying its content through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<br/><ul><li>0: OK</li><li>11: Invalid parameter set on <em>emv.adddata</em></li><li>12: Timeout</li><li>13: Insert, card swipe or choose application operation canceled by the user</li><li>15: Library EMV not initiated</li></ul>'
      emv_settimeout:
        description: Define timeout (in seconds) of the library of the EMV process
        paragraph_1: Knowledge about the <a href='http://www.emvco.com' class='external'>EMV</a> standard is required to use this command.
        paragraph_2: The command <span class='code'>emv.settimeout</span> is used to set a timeout between commands.
        paragraph_3: This timeout can be changed before performing a command, that is, this statement can be called several times during the transaction cycle.
        paragraph_4: In the example above, the command <span class='code'>emv.settimeout</span> is executed passing 10 seconds to the parameter <em><strong>seconds</strong></em>, that is, when the next command <a href='emv.inittransaction' class='commands'>emv.inittransaction</a> is executed, the device will wait for 10 seconds until the user inserts or swipes the card.
        parameters:
          parameter_1: <strong>timeout</strong> <span class='data-type'>[integer]</span><br/>Timeout in seconds
          parameter_2: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<br/><ul><li>0: OK</li><li>15: Library EMV not initiated</li><li>16: Internal error</li></ul>'
      example: Example
      execute:
        app_name: 'Application name:'
        description: Execute a POSXML application stored on the device
        paragraph_1: The command <span class='code'>execute</span> executes a compiled POSXML file.
        paragraph_2: In the examples above, two POSXML applications were created; The first one with the name <strong>appone</strong> and the second one with the name <strong>apptwo</strong>.
        paragraph_3: By starting the first application and assuming that the connection is successfully established, the second application is going to be downloaded and then excuted through the command <a href='execute' class='command'>execute</a>. The second application (<strong>apptwo</strong>) will then show a confirmation message when executed by the application <strong>appone</strong>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>Name of the POSXML file that will be executed.
      exit:
        description: Immediately closes the execution of the POSXML application
        paragraph_1: The command  <span class='code'>exit</span> is used to cancel the execution of a POSXML application.
        paragraph_2: In the example above, the <a href='display 'class='command'>display</a> command will run and present a message on screen. The command <a href='waitkey' class='command'>waitkey</a> is added to wait for user input before continuing. Then the <strong>exit</strong> command will run and close the application.
      file_close:
        description: Closes a file that was previously opened by file.open
        paragraph_1: The command  <span class='code'>file.close</span> is used to close an open file.
        paragraph_2: In the example above the file <strong>test.txt</strong> has been downloaded using the command <a href='downloadfile' class='command'>downloadfile</a>.
        paragraph_3: The file <strong>test.txt</strong> has been opened for reading (<strong>r</strong>) by the command <a href='file.open' class='command'>file.open</a> and closed by command <a href='file.close' class='command'>file.close</a>.
        parameters:
          parameter_1: <strong>handle</strong> <span class='data-type'>[integer]</span><br/>Handle of the opened file.
      file_open:
        description: Opens a file for reading or writing
        paragraph_1: The command <span class='code'>file.open</span> is used to open a file for reading or writing.
        paragraph_2: In the example above, the file <strong>test.txt</strong> has been downloaded using the command <a href='downloadfile' class='command'>downloadfile</a>. The file <strong>test.txt</strong> has been opened for reading (<strong>r</strong>) by the command <a href='file.open' class='command'>file.open</a>.
        paragraph_3: The command <a href='display' class='command'>display</a> will display a return <strong>> 0</strong>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: '<strong>mode</strong> <span class="data-type">[string]</span><br/><ul><li>r: Read</li><li>w: Write</li><li>a: Append</li></ul>'
          parameter_3: '<strong>variablehandle</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<ul><li>-1: Could not open file</li><li>>= 0: File opened</li></ul>'
      file_read:
        description: Reads a file that was previously opened by file.open
        paragraph_1: The command <span class='code'>file.read</span> is used to read an open file.
        paragraph_2: In the example above the file <strong>test.txt</strong> has been downloaded using the command <a href='downloadfile' class='command'>downloadfile</a>. The file <strong>test.txt</strong> has been opened for reading (<strong>r</strong>) using the command <a href='file.open' class='command'>file.open</a>
        paragraph_3: Note that to find the file size in bytes, for use by the command <a href='file.read' class='command'>file.read</a>, we use the command <a href='filesystem.filesize' class='command'>filesystem.filesize</a>.
        paragraph_4: The result of <a href='file.read' class='command'>file.read</a> will be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>handle</strong> <span class='data-type'>[integer]</span><br/>Handle of the opened file.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Number of bytes to be read.
          parameter_3: <strong>variablebuffer</strong> <span class='data-type'>[string]</span><br/>Hexadecimal of the content of read bytes.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Number of read bytes.
      file_write:
        description: Writes a file that was previously opened by file.open
        paragraph_1: The command <span class='code'>file.write</span> is used to write to an open file.
        paragraph_2: In the example above the file <strong>test.txt</strong> has been downloaded using the command <a href='downloadfile' class='command'>downloadfile</a>. The file <strong>test.txt</strong> has been opened for reading (<strong>r</strong>) by the command <a href='file.open' class='command'>file.open</a>.
        paragraph_3: Note that to find the file size in bytes, for use by the command <a href='file.read' class='command'>file.read</a>, we use the command <a href='filesystem.filesize' class='command'>filesystem.filesize</a>.
        paragraph_4: The result of <a href='file.read' class='command'>file.read</a> will be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>handle</strong> <span class='data-type'>[integer]</span><br/>Handle of the opened file.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Number of bytes to be written.
          parameter_3: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Hexadecimal of the content to be written.
      filesystem_filesize:
        description: Returns the size of a file in the memory of the POS
        paragraph_1: The command <span class='code'>filesystem.filesize</span> is used to get the size, in bytes, of a file in the device memory.
        paragraph_2: In the example above, the file <strong>wallpaper_walkpb.bmp</strong> will be downloaded by the command <strong>downloadfile</strong> and the command <strong>filesystem.filesize</strong> will return the size in bytes.
        paragraph_3: As the return of the command <strong>filesystem.filesize</strong> is an <a href='integervariable' class='command'>integervariable</a>, it must be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a> by the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name with extension.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      filesystem_listfiles:
        description: Lists the files of a directory by saving them in a file
        paragraph_1: The command <span class='code'>filesystem.listfiles</span> is used to list the directory files by saving them in a file.
        paragraph_2: At this moment this command is not supported by <strong>Telium 2</strong> terminals.
        paragraph_3: In the example above, a file called <em><strong>files.dat</strong></em> will be created, and this file will save the name and size of all files that are in the directory being analyzed, in this case the directory <strong>F</strong>.<br/> As the command return is an <a href='integervariable' class='command'>integervariable</a>, the command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable that will be displayed using the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>dir</strong> <span class='data-type'>[string]</span><br/>Directory which is going to be checked, that can be I or F (Verifone).
          parameter_2: <strong>listfilename</strong> <span class='data-type'>[string]</span><br/>Name of the file that will store the name and size of the files in the specified directory.
          parameter_3: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<ul><li>0: File list created</li><li>-1: Empty directory</li></ul>'
      filesystem_renamefile:
        description: Rename a file
        paragraph_1: The command <span class='code'>filesystem.renamefile</span> is used to rename a file.
        paragraph_2: In the example above, the file called <em><strong>file_temp.dat</strong></em> was renamed to <em><strong>file.dat</strong></em>.
        parameters:
          parameter_1: <strong>oldname</strong> <span class='data-type'>[string]</span><br/>Current name of the file.
          parameter_2: <strong>newname</strong> <span class='data-type'>[string]</span><br/>New name, that will replace the current one.
          parameter_3: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<ul><li>0: File was renamed</li><li>-1: File does not exist</li></ul>'
      filesystem_space:
        description: Checks the space (free and used) and the number of files in memory
        paragraph_1: This command does not work on <strong>Telium</strong> terminals
        paragraph_2: The command <span class='code'>filesystem.space</span> is used to retrieve information about the device memory.
        paragraph_3: In the example above, information about the device memory is displayed.
        paragraph_4: As the return of the command <strong>filesystem.filespace</strong> is an <a href='integervariable' class='command'>integervariable</a>, it must be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a> by the command <a href='inttostring' class='command'>inttostring</a>
        parameters:
          parameter_1: <strong>dir</strong> <span class='data-type'>[string]</span><br/>Directory which is going to be checked, that can be I or F (Verifone).
          parameter_2: '<strong>type</strong> <span class="data-type">[string]</span><br/><ul><li>total: Total space</li><li>used: Used space</li><li>free: Free space</li><li>countfiles: Number of files</li></ul>'
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      function:
        description: Defines a block of code that can be executed later
        paragraph_1: The command <span class='code'>function</span> encapsulates other commands and actions and can be called by the command <a href='callfunction' class='command'>callfunction</a> when needed. Functions are used to avoid code repetition.
        paragraph_2: In the example above, the function <em>double_value</em> has been declared that encapsulates the command <a href='mathematicaloperation' class='command'>mathematicaloperation</a> which doubles the value of the variable <em>$(iNumber)</em>.
        paragraph_3: The command <a href='callfunction' class='command'>callfunction</a> calls the function <em>double_value</em>.
        paragraph_4: To display the value of the variable <em>$(iNumber)</em>, which is an <a href='integervariable' class='command'>integervariable</a>, you need to convert your type to <a href='stringvariable' class='command'>stringvariable</a> using the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>name</strong> <span class='data-type'>[string]</span><br/>Name given to the function that is used when the function is called.
      getcardvariable:
        description: Gets the card number and stores it directly on a variable
        paragraph_1: The command <span class='code'>getcardvariable</span> is used to retrieve the card number when passed through a magnetic reader.
        paragraph_2: In the example above, when the card is passed through the magnetic reader, the number will be displayed.
        parameters:
          parameter_1: <strong>firstmessage</strong> <span class='data-type'>[string]</span><br/>Message that appears before the card is passed through the magnetic reader.
          parameter_2: <strong>maximum</strong> <span class='data-type'>[integer]</span><br/>The maximum size of the card number.
          parameter_3: <strong>minimum</strong> <span class='data-type'>[integer]</span><br/>The minimum size of the card number.
          parameter_4: <strong>secondmessage</strong> <span class='data-type'>[string]</span><br/>Message that appears when the user presses the <strong>Enter</strong> key.
          parameter_5: <strong>variable</strong> <span class='data-type'>[string]</span><br/>Variable that will store the function return.
      getdatetime:
        description: Stores in a variable date and time at runtime
        paragraph_1: The command <span class='code'>getdatetime</span> is used to get the device date and time.
        paragraph_2: In the example above, the command <a href='getdatetime' class='command'>getdatetime</a> retrieves the current date and time which is then displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: '<strong>format</strong> <span class="data-type">[string]</span><br/>Date format retrieved where:<ul><li>yy: four-digit year</li><li>y: two-digit year</li><li>M: two-digit month</li><li>d: two-digit day</li><li>h: two-digit hour</li><li>m: two-digit minute</li><li>s: two-digit second</li></ul>'
          parameter_2: <strong>returnvariable</strong> <span class='data-type'>[string]</span><br/> Store the returned date.
      if:
        description: Instruction of decision making or logical comparison
        operators:
          operator_1: <strong>greaterthan:</strong> greater than <span class='code'>&gt;</span>
          operator_2: <strong>lessthan:</strong> less than <span class='code'>&lt;</span>
          operator_3: <strong>greaterthanorequalto:</strong> grater than or equal to <span class='code'>&gt;=</span>
          operator_4: <strong>lessthanorequalto:</strong> less than or equal to <span class='code'>&lt;=</span>
          operator_5: <strong>equalto:</strong> equal to <span class='code'>=</span>
          operator_6: <strong>notequalto:</strong> not equal to <span class='code'>!</span>
        operators_integer:
          paragraph_1: <strong>Logic operations with integer variables</strong>
          paragraph_2: Integer operations are performed the same way as in any other programming language.
        operators_list: <strong>List of operators</strong>
        operators_string:
          paragraph_1: <strong>Logic operations with string variables</strong>
          paragraph_2: String operations with the operators <span class='code'>greaterthan</span>, <span class='code'>lessthan</span>, <span class='code'>greaterthanorequalto</span>, <span class='code'>lessthanorequalto</span>, happen in two stages; firstly the value is converted to a <b>float</b>, and then the logical operation is performed.
        other_operators: String operations with the operators <span class='code'>equalto</span> and <span class='code'>notequalto</span> are performed the same way as in any other programming language.
        paragraph_1: The command <span class='code'>if</span> is used to specify a decision or logic comparison in a POSXML application. Other commands can be used within block <span class='code'>if</span>, and these commands are executed if the logical expression is true.
        paragraph_2: In the example above, there are three conditions:<ul><li>1st - compares two strings with the operator <span class='code'>equalto</span> which results in <em>true</em> as <em>blue</em> is equal to the value of the variable <em>sColor</em></li><li>2nd - compares two numbers with the operator <span class='code'>greaterthan</span> which results in <em>true</em> as <em>111</em> is not greater than the value of the variable <em>iNumber</em></li><li>3rd - compares two strings using the operator <span class='code'>notequalto</span> which results in <em>true</em> as <em>Blue</em> is different from the value of the variable <em>sColor</em>. POSXML considers uppercase and lowercase letters (<em>case-sensitive</em>)</li></ul> The command <a href='waitkey' class='command'>waitkey</a> awaits a click of any key to continue code execution.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[integer or string]</span><br/>Variable that will be used in the comparision.
          parameter_2: '<strong>operator</strong> <span class="data-type">[string]</span><br/>Comparison operators: <span class="code">lessthan</span>, <span class="code">greaterthan</span>, <span class="code">equalto</span>, <span class="code">notequalto</span>, <span class="code">greaterthanorequalto</span> or <span class="code">lessthanorequalto</span>.'
          parameter_3: <strong>value</strong> <span class='data-type'>[string or integer]</span><br/>Value that will be used in the comparison.
      input_getvalue:
        description: Captures a string and displays it on the screen in any position
        paragraph_1: The command <span class='code'>input.getvalue</span> is used to store a value in a variable.
        paragraph_2: In the example above the command <a href='input.getvalue' class='command'>input.getvalue</a> will receive an input and store the value in the variable <strong>sReturn</strong>.
        parameters:
          parameter_1: <strong>allowsempty</strong> <span class='data-type'>[string]</span><br/>Defines if it is required or not.
          parameter_2: <strong>caption</strong> <span class='data-type'>[string]</span><br/>Header.
          parameter_3: <strong>columncaption</strong> <span class='data-type'>[integer]</span><br/>Column where the entered value should appear.
          parameter_4: <strong>linecaption</strong> <span class='data-type'>[integer]</span><br/>Line where the entered value should appear on the header.
          parameter_5: <strong>columninput</strong> <span class='data-type'>[integer]</span><br/>Column where the entered value should appear.
          parameter_6: <strong>lineinput</strong> <span class='data-type'>[integer]</span><br/>Line where the entered value should appear.
          parameter_7: <strong>maximum</strong> <span class='data-type'>[integer]</span><br/>Maximum number of characters.
          parameter_8: <strong>minimun</strong> <span class='data-type'>[integer]</span><br/>Minimum number of characters.
          parameter_9: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the value returned.
      inputfloat:
        description: Allows the entry of a value with dot (.) by pressing (*)
        paragraph_1: The command <span class='code'>inputfloat</span> is used to allow the entry of a decimal value (for example 1.99).
        paragraph_2: In the example above, the string variable <strong>sNumber</strong> Dwill store the <em>float</em> value entered by the user. The value is then displayed through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column where the message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      inputformat:
        description: Allows the entry of a value based on a pre-defined format
        paragraph_1: The command <span class='code'>inputformat</span> is used to define the entrance to a value based on a pre-defined format.
        paragraph_2: In the example above, each command has a predefined format. The value is displayed on the <a href='display' class='command'>display</a> when a key is pressed and its numerical value is stored in the variable <strong>sReturn</strong>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column where the message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
          parameter_5: '<strong>format</strong> <span class="data-type">[integer]</span><br/>Input format <ul><li>9: any numeric character</li><li>A: any non-numeric character</li><li>*: password</li></ul> You can use only one format per command call.'
      inputinteger:
        description: Allows the entry of an integer
        paragraph_1: The command <span class='code'>inputinteger</span> is used to allow entry of an integer restricted by a maximum and a minimum limit.
        paragraph_2: In the example above the command <strong>inputinteger</strong> captures an integer, which is converted to a string to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column where the message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
          parameter_5: <strong>minimum</strong> <span class='data-type'>[integer]</span><br/>Maximum length of the number.
          parameter_6: <strong>maximum</strong> <span class='data-type'>[integer]</span><br/>Minimum length of the number.
      inputmoney:
        description: Allows the entry of a monetary value
        paragraph_1: The command <span class='code'>inputmoney</span> is used to enter monetary values. The separators are automatically added, eliminating the need for the user to type a dot or a comma.
        paragraph_2: In the example above the command <strong>inputinteger</strong> captures an integer integer number entered by the user. The entered value will be stored without formatting, and then the value is converted to <a href='stringvariable' class='command'>stringvariable</a> through the command <a href='inttostring' class='command'>inttostring</a>, and after that the value is displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column where the message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      inputoption:
        description: Allows the entry of an integer
        paragraph_1: The command <span class='code'>inputoption</span> is used to allow entry of an integer restricted by a maximum and a minimum limit.
        paragraph_2: In the example above the command <strong>inputoption</strong> captures an integer, which is converted to a string to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>line</strong> <span class='data-type'>[integer]</span><br/>Line where the message appears.
          parameter_2: <strong>column</strong> <span class='data-type'>[integer]</span><br/>Column where the message appears.
          parameter_3: <strong>message</strong> <span class='data-type'>[string]</span><br/>Custom message to be displayed.
          parameter_4: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
          parameter_5: <strong>minimum</strong> <span class='data-type'>[integer]</span><br/>Maximum length of the number.
          parameter_6: <strong>maximum</strong> <span class='data-type'>[integer]</span><br/>Minimum length of the number.
      integerconvert:
        description: Conversion from integer to binary, octal or hexadecimal
        paragraph_1: The command <span class='code'>integerconvert</span> is used to convert an integer into binary, octal or hexadecimal.
        paragraph_2: In the example above number <strong>10</strong> will be converted to binary, octal and hexadecimal values and will be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: '<strong>base</strong> <span class="data-type">[integer]</span><br/>The base that is used in the conversion:<ul><li>2: binary</li><li>8: octal</li><li>16: hexadecimal</li></ul>'
          parameter_2: <strong>number</strong> <span class='data-type'>[string]</span><br/>Decimal number to be converted.
          parameter_3: <strong>sizereturn</strong> <span class='data-type'>[integer]</span><br/>Size of the return, if the number entered is larger, there will be added 0 from the left.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      integeroperator:
        description: Increases by 1 (+1) or decrements by 1 (-1) a variable of integer type
        paragraph_1: The command <span class='code'>integeroperator</span> is used to increment or decrement a value contained in a variable.
        paragraph_2: In the example above number <strong>10</strong> will be incremented by a value of 1 (to <strong>11</strong>) and its value stored in the variable <strong>sGreaterNumber</strong>.
        paragraph_3: The new value of the variable <strong>iNumber</strong>, <strong>11</strong> will be decremented by a value of 1 (to <strong>10</strong>) and its value stored in the variable <strong>sLowerNumber</strong>.
        paragraph_4: To display the values on the <a href='display' class='command'>display</a>, you will need to convert them to <a href='stringvariable' class='command'>stringvariable</a> with the command <a href='inttostring' class='command'>inttostring</a>.
        parameters:
          parameter_1: <strong>operator</strong> <span class='data-type'>[string]</span><br/>Increase (++) or decrease (--).
          parameter_2: <strong>variablesource</strong> <span class='data-type'>[integer]</span><br/>Number that will be used in the operation.
      integervariable:
        description: Creates an instance of the variable of integer type
        paragraph_1: The command <span class='code'>integervariable</span> is used to declare a variable to store only whole numbers, positive or negative.
        paragraph_2: To display a variable of type <strong>integervariable</strong>, you must convert your type to <a href='stringvariable' class='command'>stringvariable</a>, as has been done in the example above.
        paragraph_3: In the example above, two variables have been created, one of <strong>integervariable</strong> type and another of <a href='stringvariable' class='command'>stringvariable</a> type. The variable <em>$(iNumber)</em> has an initial value of <em>10</em>.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[string]</span><br/>Variable Name.
          parameter_2: <strong>value</strong> <span class='data-type'>[integer or string]</span><br/>Initial value of the variable.
      inttostring:
        description: Conversion from integer to string
        paragraph_1: The command <span class='code'>inttostring</span> is used to convert an integer to string.
        paragraph_2: In the example above number <strong>10</strong> will be converted into string and displayed on the <a href='display' class='command'>display</a>.
        paragraph_3: The command <a href='display' class='command'>display</a> displays only variables of type <a href='stringvariable' class='command'>stringvariable</a>.
        parameters:
          parameter_1: <strong>variableinteger</strong> <span class='data-type'>[integer]</span><br/>Integer value to be converted to string.
          parameter_2: <strong>variablestring</strong> <span class='data-type'>[string]</span><br/>Variable that will store the converted value.
      iso8583_analyzemessage:
        description: Starts the process of analysis and decomposition of the fields of the message
        paragraph_1: The command <span class='code'>iso8583.analyzemessage</span> is used to start the process of analysis and decomposition of the fields of the message.
        paragraph_2: The command <span class='code'>iso8583.analyzemessage</span> is used to start the process of analysis and decomposition of the fields of the message.
        paragraph_3: In the example above, after performing the transaction with the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>, the authorizer responds by sending another ISO message, which is stored in the variable <em><strong>ReceiveMsgISO</strong></em>, and the amount of bytes of the variable on <em><strong>iRecvBytes</strong></em>.
        paragraph_4: The command <span class='code'>iso8583.analyzemessage</span> is executed to analyze the message returned by the authorizer, if executed successfully, then the function <em><strong>Getfields</strong></em> is executed to retrieve the fields of the reply message.
        parameters:
          parameter_1: <strong>format</strong> <span class='data-type'>[string]</span><br/> Format of the message to be analyzed, which can be ASCII or BCD.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/> Size of the message being analyzed.
          parameter_3: <strong>variableid</strong> <span class='data-type'>[string]</span><br/> Variable that stores the message ID.
          parameter_4: <strong>variablemessage</strong> <span class='data-type'>[string]</span><br/> Variable that stores  the message to be analyzed.
          parameter_5: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/> Variable that will store the return code, where: <br/><ul><li> 0: message successfully analyzed <br/></li><li> -806: error on the analyzed message</li></ul>'
      iso8583_endmessage:
        description: Ends assembly of the ISO message
        paragraph_1: The command <span class='code'>iso8583.endmessage</span> is used to finish the ISO8583 message being mounted.
        paragraph_2: In the example above, after starting the ISO8583 message through the command <a href='iso8583.initmessage' class='command'>iso8583.initmessage</a> and inserting the fields through the command <a href='iso8583.putfield' class='command'>iso8583.putfield</a> according to the bitmap (<strong>bitmap.dat</strong>), the command <a href='iso8583.endmessage' class='command'>iso8583.endmessage</a> will be responsible to finish the message, storing the message size in the variable <strong>iSizeMessageISO</strong> and also storing the complete message on the variable <strong>sMsgIso8583</strong>.
        paragraph_3: To visualize the data stored on the variable <strong>sMsgIso8583</strong>, the command <a href='print' class='command'>print</a> was used, where the command <span class='code'>print</span> receives the message as a parameter, letting the device print it. Now it is possible to begin the transaction through the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>.
        paragraph_4: To view the data stored in the variable <strong>sMsgIso8583</strong>, the command <a href='print' class='command'>print</a> was added, passing as a parameter the ISO8583 message, to get the message printed. Now it's possible to start the transaction with the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>.
        parameters:
          parameter_1: <strong>variablesize</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the size of the message.
          parameter_2: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<br/><ul><li> 0: message successfully finished </li><li> -802: function error </li><li> -803: buffer overrun </li></ul></span>'
      iso8583_getfield:
        description: Extracts a field of the previously analyzed message
        paragraph_1: The command <span class='code'>iso8583.getfield</span> is used to extract a field from the message previously analyzed.
        paragraph_2: The command <span class='code'>iso8583.getfield</span> is used to extract a field from a message previously analyzed in ascending order.
        paragraph_3: In the example above, after processing the transaction and analyzing the ISO message returned by the authorizer, as shown in the example <a href='iso8583.analyzemessage' class='command'>iso8583.analyzemessage</a>, it is possible to start retrieving the field values of the message with the command <span class='code'>iso8583.getfield</span>.
        paragraph_4: <strong>ATTENTION!</strong>
        paragraph_5: The field extraction must be done in ascending order.
        parameters:
          parameter_1: <strong>fieldnumber</strong> <span class='data-type'>[integer]</span><br/> Number of the field to be extracted.
          parameter_2: <strong>type</strong> <span class='data-type'>[string]</span><br/> Field type to be extracted from the message, which can be <strong>string</strong> or <strong>integer</strong>.
          parameter_3: <strong>variablevalue</strong> <span class='data-type'>[string ou integer]</span><br/> Variable where the extracted value will be stored.
          parameter_4: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/> Variable that will store the return code, where: <ul/><li>0: Field extracted successfully</li><li>-801: Invalid parameter</li><li>-802: Function error</li><li>-803: Buffer overrun</li><li>-805: No field</li><li>-806: Msg error</li></ul></span>'
      iso8583_initfieldtable:
        description: Starts field table ISO8583 based on a specified file
        paragraph_1: The command <span class='code'>iso8583.initfieldtable</span> starts the ISO8583 field table according to the fields specified on the file defined on the parameter <strong>filename</strong>. This command must be executed before starting to use the ISO8583 messages.
        paragraph_2: 'In the example above, two functions are created:'
        paragraph_3: 1. <strong>downloadBitmap</strong> downloads the file <span class='code'>bitmap.dat</span> which contains the bitmap. The file should be stored on the <a href='/en/manager/assets'>files</a> repository on <a href='https://manager.cloudwalk.io' class='external'>CloudWalk Manager</a>.
        paragraph_4: 2. <strong>startEngineISO8583</strong> starts the table through the command <span class='code'>iso8583.initfieldtable</span>.
        paragraph_5: If the download has been successfully completed, the value 1 is defined on the parameter bitmap on file <span class='code'>params.dat</span>, only to indicate that the file is available on the device. Otherwise an error message (based on the command return) will be shown and the application will be closed after pressing the Enter key.
        paragraph_6: After downloading and being sure that file bitmap.dat is present, the function <strong>startEngineISO8583</strong> containing the command <span class='code'>iso8583.initfieldtable</span> is executed, in order to start the table. If the returned value on the variable <strong>iReturn</strong> is <strong>0</strong>, the table was successfully started. Otherwise the error <strong>-802</strong> will be shown, indicating a problem while starting the table.
        paragraph_7: After downloading and verifying the existence of the file bitmap.dat, the function <strong>startEngineISO8583</strong> will be executed. The function references the command <span class='code'>iso8583.initfieldtable</span> that initializes the table. If the value returned on the variable <strong>iReturn</strong> is <strong>0</strong>, the table was successfully initiated; other else the error <strong>-802</strong> will be displayed, indicating failure at starting up the bitmap table.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>Name of the file containing the size and format of all 128 fields defined by the ISO8583 standard.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      iso8583_initmessage:
        description: Initiates assembly of the ISO message
        paragraph_1: The command <span class='code'>iso8583.initmessage</span> is used to start mounting an ISO8583 message.
        paragraph_2: 'In the example above, the function <strong>initISO8583Message</strong> was created in order to perform the following steps:'
        paragraph_3: 1. Start mounting the ISO8583 message.
        paragraph_4: 2. Insert the value in the fields of each corresponding bit, according to the specification on the bitmap.
        paragraph_5: 3. Finish the ISO8583 message.
        paragraph_6: This procedure must be performed after validating the file <span class='code'>bitmap.dat</span> and after initializing the field table through the command <a href='iso8583.initfieldtable' class='command'>iso8583.initfieldtable</a>.
        paragraph_7: To better illustrate the process of building an ISO8583 message using the POSXML language, the bits BIT41 and BIT64 were included, and they are going to be added to the message through the command <a href='iso8583.putfield' class='command'>iso8583.putfield</a> after starting the ISO8583 message through the command <a href='iso8583.initmessage' class='command'>iso8583.initmessage</a>.
        paragraph_8: If no error occurs during the message initialization or while adding fields, the message is finished through the command <a href='iso8583.endmessage' class='command'>iso8583.endmessage</a>.
        paragraph_9: If no error occurs while starting up the message or while inserting the fields, the message is finished using the command <a href='iso8583.endmessage' class='command'>iso8583.endmessage</a>
        parameters:
          parameter_1: <strong>format</strong> <span class='data-type'>[string]</span><br/>Format of the message to be mounted, which can be ASCII or BCD.
          parameter_2: '<strong>id</strong> <span class="data-type">[string]</span><br/>Message identifier (4 digits), for example: 0800, 0200, 0400.'
          parameter_3: <strong>variablemessage</strong> <span class='data-type'>[string]</span><br/>Variable that stores the message being mounted.
          parameter_4: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Result of the operation, where:<br/> <ul><li> 0: message successfully started</li><li> -801: invalid parameter</li><li> -803: buffer overrun </li></ul></span>'
      iso8583_putfield:
        description: Inserts a field in the message, necessarily in ascending order
        paragraph_1: The command <span class='code'>iso8583.putfield</span> is used to insert a field in the message, in ascending order (mandatorily).
        paragraph_2: In the example above, the function <strong>initISO8583Message</strong> was created in order to start the message, insert the fields (those with values) and finish the message.
        paragraph_3: For demonstration purposes, only the bits <strong>BIT41</strong> and <strong>BIT64</strong> are being used. Both bits are going to be added to the ISO8583 message through the command <a href='iso8583.putfield' class='command'>iso8583.putfield</a>.
        paragraph_4: The value must be formatted and aligned according to the specification (<strong>bitmap.dat</strong>).
        paragraph_5: The value should be formatted and aligned according to the specification of the bitmap (<strong>bitmap.dat</strong>).
        parameters:
          parameter_1: <strong>fieldnumber</strong> <span class='data-type'>[integer]</span><br/>Field number of the message that the value should be inserted. It is possible to use from 2 to 128, according to the bitmap.
          parameter_2: <strong>type</strong> <span class='data-type'>[string]</span><br/>Inserted field type (<strong>string</strong> or <strong>integer</strong>).
          parameter_3: <strong>value</strong> <span class='data-type'>[string ou integer]</span><br/>Field content, formatted according to the specification.
          parameter_4: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Result of the operation, where:<br/> <ul><li> 0: field successfully inserted </li><li> -801: invalid parameter </li><li> -802: function error </li><li> -803: buffer overrun </li><li> -804: invalid field</li></ul></span>'
      iso8583_transactmessage:
        description: Adds size, header and trailer and sends the ISO message to the authorizer
        paragraph_1: The command <span class='code'>iso8583.transactmessage</span> is used to add the size, header, trailer and send the ISO message to the authorizer.
        paragraph_2: In the example above, the function <strong>transactIsoMessage</strong> was created to handle the host communication through the command <a href='preconnect' class='command'>preconnect</a>, and also to send the ISO message to the authorizer through the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>.
        paragraph_3: The ISO8583 message is stored on the variable <strong>sMsgIso8583</strong> and ready to be sent. The information regarding the header and trailer are going to be stored on the variables to be defined, according to the parameters defined on the command <a href='iso8583.transactmessage' class='command'>iso8583.transactmessage</a>, assuming that the host authorizer is expecting this behavior.
        paragraph_4: When successfully finishing the transaction, the ISO8583 message received from the host will be stored on the variable <strong>sReceiveMsgISO</strong>, with the information defined on the bitmap.
        paragraph_5: 'When successfully finishing the transaction, the ISO8583 message received from the host will be stored on the variable <strong>sReceiveMsgISO</strong>, with the data according to the bitmap specification. '
        parameters:
          parameter_1: '<strong>channel</strong> <span class="data-type">[string]</span><br/> Size that will be added. Available channels: <br/><ul><li> NONE: No size added </li><li> NAC: 2 binary bytes (x01 x00 or 0000-0001 0000-0000) </li><li> NCC: 2 bytes on the format BCD (x02 x56) </li><li> RAW: 4 binary bytes (x00 x00 x01 x00 ou 0000-0000 0000-0000 0000-0001 0000-0000) </li><li> ASCII: 4 ASCII bytes (x30 x32 x35 x36 or 0256)</li></ul>'
          parameter_2: <strong>header</strong> <span class='data-type'>[string]</span><br/> Header used to route and ensure the message integrity, added to the beginning of the message.
          parameter_3: <strong>trailler</strong> <span class='data-type'>[string]</span><br/> Trailer used to route and ensure the message integrity, added to the end of the message.
          parameter_4: <strong>isomsg</strong> <span class='data-type'>[string]</span><br/> ISO8583 message including the ISO data (message fields).
          parameter_5: <strong>variableresponse</strong> <span class='data-type'>[string]</span><br/> ISO8583 message with the data sent by the host authorizer.
          parameter_6: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/> Variable that will store the return code, where:<br/> <ul><li> 0: Size of the response message </li><li> -1: Channel unknown or not implemented </li><li> -2: Failed to connect to the host or while attempting to dial </li><li> -3: Failed to send send the message to the host authorizer </li><li> -4: Failed to receive the size of the response message </li><li> -5: Failed to receive the response message</li></ul>'
      joinstring:
        description: Concatenates in a string the value of another 2 strings
        paragraph_1: The command <span class='code'>joinstring</span> is used to concatenate two strings.
        paragraph_2: In the example above the command <a href='joinstring' class='command'>joinstring</a> will concatenate the string values of variables <strong>sTextOne</strong> and <strong>sTextTwo</strong>.
        parameters:
          parameter_1: <strong>firstvalue</strong> <span class='data-type'>[string]</span><br/>First string.
          parameter_2: <strong>secondvalue</strong> <span class='data-type'>[string]</span><br/>Second string.
          parameter_3: <strong>variabledestination</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      mathematicaloperation:
        description: Performs a mathematical operation between two values
        paragraph_1: The command <span class='code'>mathematicaloperation</span> is used to perform mathematical operations.
        paragraph_2: In the example above, 6 different mathematical operations have been performed on the values stored in the variables <strong>$(number_1)</strong> and <strong>$(number_2)</strong>.
        paragraph_3: '<ul><li>1st operation: 16 + 4 = <strong>20</strong></li><li>2nd operation: 16 - 4 = <strong>12</strong></li><li>3rd operation: 16 * 4 = <strong>64</strong></li><li>4th operation: 16 / 4 = <strong>4</strong></li><li>5th operation: 16 % 4 = <strong>0</strong></li><li>6th operation: 16 ^ 4 = <strong>65536</strong></li></ul>'
        parameters:
          parameter_1: <strong>firstvalue</strong> <span class='data-type'>[integer or string]</span><br/>First variable of the operation.
          parameter_2: <strong>operator</strong> <span class='data-type'>[string]</span></br>Mathematical Operators:<br /><ul><li><span class='code'> +</span> add</li><li><span class='code'>-</span> subtract</li><li><span class='code'>*</span> multiply</li><li><span class='code'>/</span> divide</li><li><span class='code'>%</span> modulus (remainder of the division)</li><li><span class='code'>^</span> exponent</li></ul>
          parameter_3: <strong>secondvalue</strong> <span class='data-type'>[integer or string]</span><br/>Second variable of the operation.
          parameter_4: <strong>variabledestination</strong> <span class='data-type'>[string ou integer]</span><br/>Variable where the result of operation will be stored.
      menu:
        description: Displays a menu based on the device screen (number of lines)
        paragraph_1: The command <span class='code'>Menu</span> is used to generate a list of options.
        paragraph_2: In the example above a menu list has been created with three options, where backslash <span class='code'>\</span> is the separator and the variable <strong>$(option)</strong> will store the list to be displayed, which is the values of the number keys pressed.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[integer]</span><br/>Variable that will be used in the comparison.
          parameter_2: <strong>options</strong> <span class='data-type'>[string]</span><br/>List containing descriptions of each menu item, separated by a backslash <span class='code'>\</span>.
      menuwithheader:
        description: Displays a header with a menu based on the device screen (number of lines)
        paragraph_1: The command <span class='code'>menuwithheader</span> is used to generate a list of options.
        paragraph_2: In the example above the file <strong>config.dat</strong> is changed to set the parameter <strong>iskeytimeout</strong> to <strong>1</strong>, which enables the command <strong>menuwithheader</strong> to work.
        paragraph_3: If the file <strong>config.dat</strong> does not have the parameter <strong>iskeytimeout</strong> set to <strong>1</strong>, there will be no error returned but the command <strong>menuwithheader</strong> will not work as expected.
        paragraph_4: If the value of the property <strong>timeout</strong> (in seconds) expires without user interaction, the command returned <strong>-1</strong>.
        parameters:
          parameter_1: <strong>header</strong> <span class='data-type'>[string]</span><br/>Define the content of the menu header, separated by a bar <span class='code'>|</span>. If the content is larger than one line, then the screen will display a plus sign <span class='code'>+</span> which indicates the text continues onto the next line.
          parameter_2: <strong>timeoutheader</strong> <span class='data-type'>[integer]</span><br/>Time in seconds for the description of the menu header to change.
          parameter_3: <strong>options</strong> <span class='data-type'>[string]</span><br/>Menu options separated by a backslash <span class='code'>\</span>.
          parameter_4: <strong>timeout</strong> <span class='data-type'>[integer]</span><br/>Value that determines the time in seconds to wait for user interaction.
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will receive the return of the command.
      network_checkgprssignal:
        description: Checks the status of the connection, if the POS supports GPRS
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Host integration - Simple HTTP</a>
        paragraph_2: The command <span class='code'>network.checkgprssignal</span> is used to check the GPRS signal level on a device that provides this type of communication.
        paragraph_3: In the example above the command <a href='network.checkgprssignal' class='command'>network.checkgprssignal</a> will check the GPRS signal level, storing the operation result in the integer variable $(iReturn).
        parameters:
          parameter_1: <strong>variablestatus</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the GPRS signal level.
      network_hostdisconnect:
        description: Disconnects the device from the host, keeping it connected to the network
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Host integration - Simple HTTP</a>.
        paragraph_2: The command <span class='code'>network.hostdisconnect</span> is used to disconnect from the host terminal but remain connected to the network.
        paragraph_3: In the example above the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the host. The command <a href='network.hostdisconnect' class='command'>network.hostdisconnect</a> will close this connection but the device will maintain the network connection.
        paragraph_4: <strong>ATTENTION!</strong>
        paragraph_5: If a dial-up <strong>(PPP and SDLC)</strong> connection was used to perform the transaction, it's necessary to use the command <a href='shutdownmodem' class='command'>shutdownmodem</a> to close the <strong>socket</strong>, preventing the device from keeping the line busy.
        paragraph_6: The command <span class='code'>network.hostdisconnect</span> also closes the socket that was opened with the  <a href='preconnect' class='command'>preconnect</a>, but only for connection types <strong>ETHERNET and GPRS </strong>.
      network_ping:
        description: Checks the status of the connection with the host
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Host integration - Simple HTTP</a>
        paragraph_2: The command <span class='code'> network.ping </span> is used to test connectivity with the host.
        paragraph_3: In the example above the command <a href='network.ping' class='command'>network.ping</a> will do a ping on the host and the return will be stored in the variable <strong>iReturn</strong> that should be converted into <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Return of the function:<ul><li>0: Success</li><li>-1: Error while connecting to the server</li><li>-2: Error while sending ping</li></ul>'
          parameter_2: <strong>host</strong> <span class='data-type'>[string]</span> <br/>Hostname or IP address to perform the ping.
      network_start:
        description: Starts the device's modem.
        paragraph_1: The command <span class='code'>network.start</span> is used to start the device's modem.
        paragraph_2: In the example above, the command <span class='code'>network.start</span> will start the device's modem and the value of return will be displayed.
        paragraph_3: '<strong>Differences between the commands <a href="preconnect" class="command">preconnect</a> and <a href="network.start" class="command">network.start</a> </strong> :'
        paragraph_4: The POSXML command <a href='preconnect' class='command'>preconnect</a> starts the device's modem and connects to host. The command <a href='network.start' class='command'>network.start</a> starts the device's modem but will <strong>NOT</strong> connect to host.
        parameters:
          parameter_1: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Return of the function:<ul><li>1: Modem initialized</li><li>Anything other than <strong>1</strong> means <strong>Error</strong> (modem not initialized)</li></ul>'
      network_receive:
        description: Receives from the host buffer previously connected
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Host integration - Simple HTTP</a>
        paragraph_2: The command <span class='code'>network.receive</span> is used to receive a message (hexadecimal) from the host.
        paragraph_3: In the example above the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the CloudWalk Walk Server and the return will be stored in the variable <strong>iConnect</strong>.
        paragraph_4: The command <a href='network.send' class='command'>network.send</a> will send a message, hexadecimal for the host and its return will be stored in the variable <strong>iReturn</strong>.
        paragraph_5: The command <a href='network.receive' class='command'>network.receive</a> will receive a message, hexadecimal from the host and the return will be stored in the variable <strong>variablebuffer</strong>, which should be converted into <a href='stringvariable' class='command'>stringvariable</a> with the function <a href='string.fromhex' class='command'>string.fromhex</a>.
        parameters:
          parameter_1: <strong>maxsize</strong> <span class='data-type'>[integer]</span><br/>Maximum message size that can be received.
          parameter_2: <strong>variablereceivedbytes</strong> <span class='data-type'>[integer]</span><br/>Number of received bytes.
          parameter_3: <strong>variablebuffer</strong> <span class='data-type'>[string]</span><br/>Variable that will receive the message from the host.
          parameter_4: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Return of the function:<ul><li>1: Message successfully received</li><li>0: Could not receive the message</li></ul>'
      network_send:
        description: Sends a buffer to the host previously connected
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Host integration - Simple HTTP</a>
        paragraph_2: The command <span class='code'>network.send</span> is used to send a message (hexadecimal) to the host.
        paragraph_3: In the example above the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the CloudWalk Walk Server and the return will be stored in the variable <strong>iConnect</strong>.
        paragraph_4: The command <a href='network.send' class='command'>network.send</a> will send a message, hexadecimal to the host and its return will be stored in the variable <strong>iReturn</strong>.
        paragraph_5: To convert the text of the variable <strong>sBufSend</strong> into hexadecimal, the command will be used <a href='string.tohex' class='command'>string.tohex</a> and size will be calculated by the command <a href='string.length' class='command'>string.length</a>.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Message, hexadecimal, which will be sent to the host.
          parameter_2: <strong>size</strong> <span class='data-type'>[integer]</span><br/>Size of the message in bytes.
          parameter_3: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Return of the function:<ul><li>1: Message successfully sent</li><li>0: Unable to send the message</li></ul>'
      openserialport:
        description: Opens the serial port for communication with external peripherals
        paragraph_1: The command <span class='code'>openserialport</span> is used to open a connection to the serial port.
        paragraph_2: In the example above the command <a href='openserialport' class='command'>openserialport</a> will open a connection on port <strong>COM1</strong> with the rate <strong>115200</strong> and configuration <strong>A8N1</strong>. The return will be stored in the variable <strong>iReturn</strong>, converted using the command <a href='inttostring' class='command'>inttostring</a> and displayed on the <a href='display' class='command'>display</a>.
        paragraph_3: The command <a href='closeserialport' class='command'>closeserialport</a> closes the serial port.
        parameters:
          parameter_1: <strong>port</strong> <span class='data-type'>[string]</span><br/>Port where the connection is open.<ul><li>COM1, COM2, COM3, COM4, COM5, COM6</li></ul>
          parameter_2: <strong>rate</strong> <span class='data-type'>[integer]</span><br/>The serial port rate (bits per second).<ul><li>300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, 12000, 14400, 28800, 33600</li></ul>
          parameter_3: <strong>configuration</strong> <span class='data-type'>[string]</span><br/>The serial port configuration.<ul><li>A7E1, A7N1, A7O1, A8E1, A8N1, A8O1</li></ul>
          parameter_4: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where: <ul><li>-2: Incorrect configuration</li><li>-1 or 0: Error opening serial port</li><li>0: Serial port successfully open</li></ul>'
      paperfeed:
        description: Sends a signal to the printer by adding blank lines on the ticket
        paragraph_1: The command <span class='code'>paperfeed</span> is used to send a signal that the printer will add a blank line.
        paragraph_2: In the example above, when the application is executed, the printer will add a blank line on the paper.
      parameters: Parameters
      pinpad_close:
        description: Terminates communication with the external or internal pinpad
        paragraph_1: The command <span class='code'>pinpad.close</span> is used to close the communication with an external or the internal pinpad.
        paragraph_2: In the example above, a connection is opened to the <strong>external PIN-Pad</strong>, then waits for a key press using the command <a href='waitkey' class='command'>waitkey</a>. After the key press, the communication with the PIN-Pad is terminated with the command <span class='code'>pinpad.close</span>.
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span> Message that will be displayed on the PIN-Pad's display after closing the communication.
      pinpad_display:
        description: Displays a custom message on the display of the pinpad
        paragraph_1: The command <span class='code'>pinpad.display</span> is used to display a custom message on the display of the pinpad.
        paragraph_2: In the example above, a connection is opened to the <strong>external PIN-Pad</strong> with the command <a href='pinpad.open' class='command'>pinpad.open</a>, and then the command <span class='code'>pinpad.display</span> is executed, displaying the message <strong><em>Hello World!</em></strong>.
        paragraph_3: After a key press on the <strong>POS terminal</strong> the connection to the PIN-Pad is closed using with the command <a href='pinpad.close' class='command'>pinpad.close</a>.
        paragraph_4: <strong>ATTENTION!</strong>
        paragraph_5: This command does not apply if the PIN-Pad used is an <strong>internal PIN-Pad</strong>.
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span> Message that will be displayed on the external PIN-Pad's display.
      pinpad_getkey:
        description: Captures a key that is pressed on the external pinpad
        paragraph_1: The command <span class='code'>pinpad.getkey</span> is used to capture a key that is pressed on the external pinpad.
        paragraph_2: In the example above, a connection is opened to the <strong>external PIN-Pad</strong> with the command <a href='pinpad.open' class='command'>pinpad.open</a>; after that the command <span class='code'>pinpad.getkey</span> is executed.
        paragraph_3: The PIN-Pad waits for 10 minutes and if no action is taken, <strong>-1</strong> is returned and stored in the variable <strong><em>sKey</em></strong>. If a key is pressed before 10 minutes (the configured timeout), the pressed key value is returned.
        paragraph_4: After that, the PIN-Pad is disconnected with the command <a href='pinpad.close' class='command'>pinpad.close</a> and the result is displayed through the command <a href='display' class='command'>display</a>.
        paragraph_5: <strong>ATTENTION!</strong>
        paragraph_6: This command does not apply if the PIN-Pad used is an <strong>internal PIN-Pad</strong>.
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span> Message that will be displayed on the external PIN-Pad.
          parameter_2: <strong>timeout</strong> <span class='data-type'>[integer]</span> Timeout in seconds that the statement should wait before resuming the execution.
          parameter_3: '<strong>variablereturn</strong> <span class="data-type">[string]</span> Return of the command, where: <br/><ul><li>-1: Timeout was reached and no action was taken</li></ul> If an action is taken, the PIN-Pad key that was pressed is returned: <strong>KEY_ENTER, KEY_CANCEL, KEY_CLEAR, KEY_EXTRAS</strong>.'
      pinpad_getpindukpt:
        description: Catches a PIN and encrypts it using DUKPT standard
        paragraph_1: The command <span class='code'>pinpad.getpindukpt</span> is used to capture a PIN and encrypts using standard DUKPT.
        paragraph_2: The command <span class='code'>pinpad.getpindukpt</span> captures a PIN and encrypts it using the standard DUKPT in the internal or external PIN-Pad, while displaying a message on the PIN-Pad or device display.
        paragraph_3: In the example above, a connection is opened with the <strong>internal PIN-Pad</strong> using the command <a href='pinpad.open' class='command'>pinpad.open</a>, and then the command <span class='code'>pinpad.getpindukpt</span> is executed.
        paragraph_4: The user is requested to type the <strong>PIN (password);</strong> the PIN is then encrypted and stored in the variable <strong><em>sEncriptedPIN</em></strong>, and the KSN is stored in the variable <strong><em>sKSN</em></strong>. Since the return value is an integer, the return is converted to <a href='stringvariable' class='command'>stringvariable</a> with the command <a href='inttostring' class='command'>inttostring</a>
        paragraph_5: The PIN-Pad is disconnected using the command <a href='pinpad.close' class='command'>pinpad.close</a> and then the values of the variables are displayed using the command <a href='display' class='command'>display</a>
        parameters:
          parameter_1: <strong>maxlen</strong> <span class='data-type'>[integer]</span> Maximum number of characters typed in the PIN.
          parameter_2: <strong>message</strong> <span class='data-type'>[string]</span> Message that will be displayed on the external PIN-Pad's display (or internal in the case of a POS terminal).
          parameter_3: <strong>pan</strong> <span class='data-type'>[string]</span> Card primary account number.
          parameter_4: '<strong>type</strong> <span class="data-type">[integer]</span> Type of algorithm used in the encryption, which can be: <br/><ul><li>0: DES</li><li>1: 3DES</li></ul>'
          parameter_5: <strong>variablereturnksn</strong> <span class='data-type'>[string]</span> Variable that will store the <strong>KSN</strong> returned by the encryption process.
          parameter_6: <strong>variablereturnpin</strong> <span class='data-type'>[string]</span> Variable that will store the encrypted <strong>PIN</strong>.
          parameter_7: '<strong>variablereturn</strong> <span class="data-type">[integer]</span> Variable that will store the return code, where: <br/><ul><li>0: OK</li><li>-1: COMM Error</li><li>-2: Canceled</li><li>-3: PIN Error</li></ul>'
      pinpad_loadipek:
        description: Records an initial key and an initial ksn on the memory of pinpad
        paragraph_1: Knowledge about <strong><a href="https://en.wikipedia.org/wiki/Derived_unique_key_per_transaction">DUKPT</a></strong> is required to use this command.
        paragraph_2: The command <span class='code'>pinpad.loadipek</span> is used to store an initial and a ksn key on the internal or extenal PIN-Pad memory, in order to make it possible to perform password encryption using <strong><em>DUKPT</em></strong>.
        paragraph_3: In the example above, a connection to the <strong>internal PIN-Pad</strong> is made using the command <a href='pinpad.open' class='command'>pinpad.open</a>; after that the keys ipek (initial) <strong><em>EA51888F7CF2EBA6BB80EF0D4267642E</em></strong> and ksn <strong><em>FFFF0123456789A00003</em></strong> are loaded to the PIN-Pad memory using the command <span class='code'>pinpad.loadipek</span>.
        paragraph_4: The connection with the PIN-Pad is closed using the command <a href='pinpad.close' class='command'>pinpad.close</a>, and then value of the variable is converted to <a href='stringvariable' class='command'>stringvariable</a> so it can be displayed through the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>ipek</strong> <span class='data-type'>[string]</span> Initial key in the format <strong>hex ascii 16</strong> or <strong>32</strong> characters.
          parameter_2: <strong>ksn</strong> <span class='data-type'>[string]</span> Initial KSN in the format <strong>hex ascii 20</strong> characters.
          parameter_3: '<strong>type</strong> <span class="data-type">[integer]</span> Type of algorithm used in the encryption, which can be: <br/><ul><li>0: DES</li><li>1: 3DES</li></ul>'
          parameter_4: '<strong>variablereturn</strong> <span class="data-type">[integer]</span> Return of the command, where: <br/><ul><li>0: OK</li><li>-1: Error</li></ul>'
      pinpad_open:
        description: Enables communication with the external or internal pinpad
        paragraph_1: The command <span class='code'>pinpad.open</span> is used to enable communication with an external or the internal pinpad.
        paragraph_2: In the example above, firstly a connection with the <strong>external PIN-Pad</strong> was opened, and then the command stored the result of the operation in the variable <em><strong>variablereturn</strong></em>.
        paragraph_3: The command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable to <a href='stringvariable' class='command'>stringvariable</a>, which is displayed using the command <a href='display' class='command'>display</a>, and finally the connection with the PIN-Pad is closed using the command <a href='pinpad.close' class='command'>pinpad.close</a>.
        paragraph_4: The same is applied for the <strong>external PIN-Pad</strong>, but in this case, the PIN-Pad serial number is stored on the variable <span class='code'>sSerialNumber</span>.
        parameters:
          parameter_1: '<strong>type</strong> <span class="data-type">[integer]</span> PIN-Pad type to be enabled: <br/><ul><li>0: Internal PIN-Pad</li><li>1: External PIN-Pad</li></ul>'
          parameter_2: <strong>variableserialnumber</strong> <span class='data-type'>[string]</span> Variable that will store the PIN-Pad's serial number that is being enabled.
          parameter_3: '<strong>variablereturn</strong> <span class="data-type">[integer]</span> Return codes: <br/><ul><li>0: PIN-Pad connected</li><li>-1: PIN-Pad not connected</li></ul>'
      preconnect:
        description: Connects to the host authorizer
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Host integration - Simple HTTP</a>
        paragraph_2: The command <span class='code'>preconnect</span> is used to establish a connection with CloudWalk.
        paragraph_3: In the example above the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the CloudWalk Walk Server, and the return will be stored in the variable <strong>iConnect</strong>.
        paragraph_4: Since the variable <strong>iConnect</strong> is of the type <a href='integervariable' class='command'>integervariable</a>, it must be converted into a <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: '<strong>variablestatus</strong> <span class="data-type">[integer]</span><br/>Return function:<ul><li>0: Connected successfully</li><li>-1: Error when trying to connect</li></ul> '
      predial:
        description: Performs a dial-up connection with the provider
        paragraph_1: Learn more about <a href='https://docs.cloudwalk.io/en/integration/http'>Host integration - Simple HTTP</a>
        paragraph_2: The command <span class='code'>predial</span> is used to perform a dial-up connection with the provider.
        paragraph_3: In the example above the first command <a href='predial' class='command'>predial</a> with <strong>option</strong> 1, will make a connection with the provider, and the return will be stored in the variable <strong>iReturn</strong>.
        paragraph_4: The second command <a href='predial' class='command'>predial</a> with <strong>option</strong> 2, will check if the dialing process was completed.
        parameters:
          parameter_1: '<strong>option</strong> <span class="data-type">[integer]</span><br/><ul><li>1: The command will perform a dial-up connection</li><li>2: The command will check if the dial-up connection was completed</li></ul>'
          parameter_2: <strong>variablestatus</strong> <span class='data-type'>[integer]</span><br/>Variable that will store return of the function.
      print:
        description: Prints a custom message in the default font size
        paragraph_1: The command <span class='code'>print</span> is used to print any message with a standard size.
        paragraph_2: In the example above, when the application runs, it will print the message <strong>Using PRINT</strong> with standard size.
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span><br/>Message that will be printed.
      printbarcode:
        description: Prints a bar code in the I25 format, horizontal or vertical
        paragraph_1: The command <span class='code'>printbarcode</span> is used to print a defined barcode.
        paragraph_2: In the example above, will print a barcode number <strong>123456</strong> in the <strong>horizontal</strong> position.
        parameters:
          parameter_1: <strong>horizontal</strong> <span class='data-type'>[integer]</span><br/>Define if the barcode will be horizontal (1) or vertical (0).
          parameter_2: <strong>number</strong> <span class='data-type'>[integer]</span><br/>Barcode number.
      printbig:
        description: Prints a custom message in the double font size
        paragraph_1: The command <span class='code'>printbig</span> is used to print a message using double sized font.
        paragraph_2: In the example above, when the application runs, it will print the message <strong>Using PRINTBIG</strong> using double sized font size.
        parameters:
          parameter_1: <strong>message</strong> <span class='data-type'>[string]</span><br/>Message to be printed.
      printbitmap:
        description: Prints a monochromatic bitmap
        paragraph_1: The command <span class='code'>printbitmap</span> is used to print a monochrome bitmap.
        paragraph_2: In the example above, when the application runs it will print the image set in the property <strong>filename</strong> of the command <strong>printbitmap</strong>
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will receive the return of the command <ul><li>-2: bitmap is monochrome </li><li>-1: invalid bitmap size</li><li>0: bitmap not found </li><li>1: bitmap successfully printed</li></ul>'
      readfile:
        description: Reads a dbfile WALK file (key/value)
        paragraph_1: The command <span class='code'>readfile</span> is used to read a file in the format <a href='#walk_db' class='command'>Walk</a> at a specified position. Each key should be on a separate line.
        paragraph_2: In the example above the file <strong>test.txt</strong> has been downloaded using the command <a href='downloadfile' class='command'>downloadfile</a>.
        paragraph_3: The command <a href='readfile' class='command'>readfile</a> reads the file looking for the specified key (<strong>key</strong>) and stores your return of the variable specified in the parameter <strong>variabledestination</strong>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: <strong>key</strong> <span class='data-type'>[string]</span><br/>Key Name.
          parameter_3: <strong>variabledestination</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      readfilebyindex:
        description: Reads a key from a file WALK dbfile
        paragraph_1: The command <span class='code'>readfilebyindex</span> is used to read a file in the format <a href='#walk_db' class='command'>Walk DB</a> at a specified position. Each key should be on a separate line.
        paragraph_2: In the example above the file <strong>test.txt</strong> has been downloaded using the command <a href='downloadfile' class='command'>downloadfile</a>.
        paragraph_3: The function <a href='readfilebyindex' class='command'>readfilebyindex</a> reads the file looking for the position (<strong>index</strong>) and stores the key specified in the variable <strong>sKeyName</strong> and the value in the variable <strong>sKeyValue</strong>. The variable <strong>iReturn</strong> stores the value specifying if the position (<strong>index</strong>) was found or not.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>File name.
          parameter_2: <strong>index</strong> <span class='data-type'>[integer]</span><br/>Key position, the first position is 0 (zero).
          parameter_3: <strong>variablekey</strong> <span class='data-type'>[integer]</span><br/>Key name.
          parameter_4: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store <ul><li>0: Item not found</li><li>1: found item</li></ul>'
          parameter_5: <strong>variablevalue</strong> <span class='data-type'>[string]</span><br/>Index value.
      readkey:
        description: Same as command waitkey, but holds the pressed key
        paragraph_1: The command <span class='code'>readkey</span> is used to pause the execution of the application for a certain time.
        paragraph_2: In the example above the variable <strong>$(sPressedKey)</strong> will store the variable that is pressed. The command <strong>readkey</strong> requires <strong>miliseconds</strong> to set the maximum time to wait for a key to be pressed.
        paragraph_3: If no key has been pressed at the defined time (<strong>5 seconds</strong>), the application assumes that the <strong>Cancel</strong> key has been pressed.
        parameters:
          parameter_1: <strong>miliseconds</strong> <span class='data-type'>[integer]</span><br/>Pause time in milliseconds.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      readserialport:
        description: Reads a buffer from an external device captured by the serial port
        paragraph_1: The command <span class='code'>readserialport</span> is used to write a message, hexadecimal on the serial port.
        paragraph_2: In the example above the command <a href='openserialport' class='command'>openserialport</a> will open a connection on port <strong>COM1</strong> with the rate <strong>115200</strong> and configuration <strong>A8N1</strong>.
        paragraph_3: The command <a href='readserialport' class='command'>readserialport</a> will read the return of the serial port and store in the variable <strong>sBufferReturned</strong>.
        paragraph_4: The content of the variable will be converted to <a href='stringvariable' class='command'>stringvariable</a> and displayed on the <a href='display' class='command'>display</a>.
        paragraph_5: The command <a href='closeserialport' class='command'>closeserialport</a> closes the serial port.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Buffer, hexadecimal, which will be written on the serial port.
          parameter_2: <strong>variablehandle</strong> <span class='data-type'>[integer]</span><br/>Handle of the open door.
          parameter_3: <strong>variablebuffer</strong> <span class='data-type'>[string]</span><br/> Variable that will store the buffer captured from the serial port.
          parameter_4: <strong>variablehandle</strong> <span class='data-type'>[integer]</span><br/> Open serial port identifier.
          parameter_5: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/> Variable that will store the return code, where: <br/><ul><li>-1: Timeout was reached and nothing was captured from the serial port<br/></li><li>>0: Number of bytes that was read from the serial port. </li></ul>'
      shutdownmodem:
        description: Turns off the modem and cancels the operations
        paragraph_1: The command <span class='code'>shutdownmodem</span> is used to disconnect the device from the host and the network.
        paragraph_2: In the example above the command <a href='preconnect' class='command'>preconnect</a> will make a connection with the host. The command <a href='shutdownmodem' class='command'>shutdownmodem</a> will completely disconnect the device.
      smartcard_closereader:
        description: Terminates communication process of with the smart card
        paragraph_1: The command <span class='code'>smartcard.closereader</span> is used to terminate the process of communication with the smart card.
        paragraph_2: In the example above, The command <a href='smartcard.startreader' class='command'>smartcard.startreader</a> is used to start the reader and try to read a card; after that the command <a href='inttostring' class='command'>inttostring</a> is used to convert and display the variable using the command <a href='display' class='command'>display</a>.
        paragraph_3: Then the command <span class='code'>smartcard.closereader</span> is used to close the reader communication, and the result of the operation is displayed.
        parameters:
          parameter_1: <strong>slot</strong> <span class='data-type'>[integer]</span><br/> slot number that was opened with the command <a href='smartcard.startreader' class='command'>smartcard.startreader</a>.
          parameter_2: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/> Return of the command, where:<br/><ul><li>-1: Invalid slot</li><li>1: Slot successfully closed</li></ul>'
      smartcard_insertedcard:
        description: Checks if the card is inserted in the smart card reader
        paragraph_1: The command <span class='code'>smartcard.insertcard</span> is used to check if a smart card is inserted in a given slot.
        paragraph_2: In the example above, the command <strong>smartcard.insertedcard</strong> checks whether or not the card is inserted in the defined slot. If there is no card in the slot, the return will be <strong>-2</strong>, otherwise it will be <strong>1</strong>.
        parameters:
          parameter_1: '<strong>slot</strong> <span class="data-type">[integer]</span><br/>Defines which slot is used by the command.<ul><li>1: principal</li><li>2: sam1</li><li>3: sam2</li><li>4: sam3</li><li>5: sam4</li></ul> '
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[integer or string]</span><br/>Variable that will store the return of the command.
      smartcard_startreader:
        description: Starts the smart card reader and try to start the card
        paragraph_1: The command <span class='code'>smartcard.startreader</span> is used to start the smart card reader and try to start the card.
        paragraph_2: In the example above, the command <span class='code'>smartcard.startreader</span> is used to start the reader and the smartcard, and the result of the operation is stored on the variable <strong>variablereturn</strong>.
        paragraph_3: The command <a href='inttostring' class='command'>inttostring</a> is used to convert the variable to <a href='stringvariable' class='command'>stringvariable</a>, and then displayed using the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: '<strong>slot</strong> <span class="data-type">[integer]</span><br/> slot that will be started:<br/><ul><li>main: 1</li><li>sam1: 2</li><li>sam2: 3</li><li>sam3: 4</li><li>sam4: 5</li></ul>'
          parameter_2: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Return of the command, where:<br/><ul><li>-2: Error while starting the reader or while reading the card</li><li>-1: Invalid slot</li><li>Reader started and command ATR successfully sent.</li></ul>'
      smartcard_transmitapdu:
        description: Sends an APDU command to the smart card
        paragraph_1: The command <span class='code'>smartcard.transmitAPDU</span> is used to send an APDU command to the smart card.
        paragraph_2: The parameters should receive only hexadecimal strings.
        paragraph_3: In the example above, a <a href='while' class='command'>while</a> loop waits for the command <a href='smartcard.insertedcard' class='command'>smartcard.insertedcard</a> to identify a card insertion.
        paragraph_4: Once the card is inserted, the command <a href='smartcard.startreader' class='command'>smartcard.startreader</a> initializes the reader and the card by sending an ATR command; then the command <span class='code'>smartcard.transmitAPDU</span> is executed. In the end the result is displayed using the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>datafield</strong> <span class='data-type'>[string]</span><br/>Hexadecimal datafield of an APDU command containing additional information. <b>Optional field:</b> if not used will default to <strong>00</strong>
          parameter_2: <strong>header</strong> <span class='data-type'>[string]</span><br/>APDU hexadecimal header, composed by CLA + INS + P1 + P2. Required field.
          parameter_3: <strong>LC</strong> <span class='data-type'>[string]</span><br/>Datafield parameter size in hexadecimal. <b>Optional field:</b> if not used will default to <strong>00</strong>.
          parameter_4: <strong>LE</strong> <span class='data-type'>[string]</span><br/>Expected size of the response in hexadecimal. <b>Optional field:</b> if not used will default to <strong>00</strong>. If the response size is greater than the two obligatory bytes SW1 and SW2, it is necessary to specify the size of the response in this field.
          parameter_5: <strong>slot</strong> <span class='data-type'>[string]</span><br/>slot that was opened with <span class='code'>smartcard.startreader</span>
          parameter_6: <strong>variabledatafieldresponse</strong> <span class='data-type'>[string]</span><br/>Variable that will store the hexadecimal return value of the APDU command.
          parameter_7: <strong>variableSW</strong> <span class='data-type'>[string]</span><br/>Variable that will store the obligatory two hexadecimal bytes from the APDU command.
          parameter_8: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Return of the command, where:<br/><ul><li>-2: Error while sending the command to the card</li><li>-1: Invalid slot</li><li>1: Command successfully sent</li></ul>'
      string_charat:
        description: Extracts specified string character
        paragraph_1: The command <span class='code'>string.charat</span> is used to return a character string from a specific position.
        paragraph_2: In the example above the command <a href='string.charat' class='command'>string.charat</a> will get the 1st and 4th characters of the variable <strong>sText</strong> and store in variables <strong>sReturnC</strong> and <strong>sReturnW</strong>.
        parameters:
          parameter_1: <strong>character_index</strong> <span class='data-type'>[integer]</span><br/>Character position.
          parameter_2: <strong>string</strong> <span class='data-type'>[string]</span><br/>String that will be manipulated.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_elementat:
        description: Returns a specific element in the string
        paragraph_1: The command <span class='code'>string.elementat</span> is used to separate a string into parts using a delimiter.
        paragraph_2: In the example above the text of the variable <strong>sText</strong> has been separated using the command <a href='string.elementat' class='command'>string.elementat</a>.
        paragraph_3: The numbers (<a href='stringvariable' class='command'>stringvariable</a>) have been converted to <a href='integervariable' class='command'>integervariable</a> and you can use the command <a href='display' class='command'>display</a> to set the row and column.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>String delimiter.
          parameter_2: <strong>element_index</strong> <span class='data-type'>[integer]</span><br/>Delimiter's position, with 0 being the first.
          parameter_3: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be separated.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the converted value.
      string_elements:
        description: Returns how many elements there are in the specified string
        paragraph_1: The command <span class='code'>string.elements</span> is used to return the number of elements found in a string based on a delimiter.
        paragraph_2: In the example above the command <a href='string.elements' class='command'>string.elements</a> will separate the contents of the variable <strong>sText</strong> based on delimiter <strong>;</strong> .
        paragraph_3: The variable <strong>iElements</strong> will be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>String delimiter.
          parameter_2: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be separated.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the result of the command.
      string_find:
        description: Searches for a substring in the specified string
        paragraph_1: The command <span class='code'>string.find</span> is used to return the position of a substring in a string.
        paragraph_2: In the example above the command <a href='string.find' class='command'>string.find</a> will search for text <strong>Walk</strong> in the variable <strong>sText</strong>, starting the search at position 0. The return is saved in the variable <strong>iElement</strong>.
        paragraph_3: The variable <strong>iElement</strong> is converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed on the <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>start</strong> <span class='data-type'>[string]</span><br/>Set the search starting point.
          parameter_2: <strong>string</strong> <span class='data-type'>[string]</span><br/>Define the string to be searched.
          parameter_3: <strong>substring</strong> <span class='data-type'>[string]</span><br/>Define the text to be found.
          parameter_4: '<strong>variablereturn</strong> <span class="data-type">[string]</span><br/>Variable that will store the result of the command <ul><li>-1: Text not found</li><li>>-1: position of the found text</li></ul>'
      string_fromhex:
        description: Converts a hexadecimal representation to a string
        paragraph_1: The command <span class='code'>string.fromhex</span> is used to convert a hexadecimal string to ASCII.
        paragraph_2: In the example above the hex value <strong>436C6F756457616C6B</strong> will be converted to ASCII.
        parameters:
          parameter_1: <strong>string</strong> <span class='data-type'>[string]</span><br/>Hexadecimal value to be converted.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_getvaluebykey:
        description: Searches in the string for a value based on key/value
        paragraph_1: The command <span class='code'>string.getvaluebykey</span> is used to return a value from a key in string.
        paragraph_2: In the example above the command <a href='string.getvaluebykey' class='command'>string.getvaluebykey</a> will search the string for the value of the key <strong>company</strong>.
        parameters:
          parameter_1: <strong>key</strong> <span class='data-type'>[string]</span><br/>Key to be found.
          parameter_2: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be searched.
          parameter_3: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_insertat:
        description: Inserts an element at specific index in string
        paragraph_1: The command <span class='code'>string.insertat</span> is used to separate a string based on a delimiter and insert a substring in a set position.
        paragraph_2: In the example above the command <a href='string.insertat' class='command'>string.insertat</a> will insert the text <strong>Walk</strong> in the second element generated by the separation of the string whose index is <strong>1</strong>.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>String delimiter.
          parameter_2: <strong>element_index</strong> <span class='data-type'>[integer]</span><br/>Delimiter's position, with 0 being the first.
          parameter_3: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be changed.
          parameter_4: <strong>string_to_be_inserted</strong> <span class='data-type'>[string]</span><br/>Text to be inserted.
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the converted value.
      string_length:
        description: Returns length of the specified string
        paragraph_1: The command <span class='code'>string.length</span> is used to return the length of a string.
        paragraph_2: In the example above the command <a href='string.length' class='command'>string.length</a> will return the size of the text in the variable <strong>sText</strong>.
        paragraph_3: The return of the command <a href='string.length' class='command'>string.length</a> is a <a href='integervariable' class='command'>integervariable</a> and will be converted to <a href='stringvariable' class='command'>stringvariable</a> to be displayed in <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>value</strong> <span class='data-type'>[string]</span><br/>Text that will be used by the command.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the converted value.
      string_pad:
        description: Adds a padding with specific character in string
        paragraph_1: The command <span class='code'>string.pad</span> is used to add content to the right or left side of a string.
        paragraph_2: In the example above the first command <a href='string.pad' class='command'>string.pad</a> will add character <strong>0</strong> to the left side of the string <strong>1234</strong>, the command will accept a maximum <strong>10</strong> characters, so the result will be <strong>0000001234</strong>.
        paragraph_3: The second command <a href='string.pad' class='command'>string.pad</a> will add character <strong>0</strong> to the right side of the string <strong>1234</strong>, the command will accept a maximum <strong>10</strong> characters, so the result will be <strong>1234000000</strong>.
        parameters:
          parameter_1: <strong>character</strong> <span class='data-type'>[string]</span><br/>Text to be inserted.
          parameter_2: <strong>length</strong> <span class='data-type'>[string]</span><br/>Maximum size of the changed text.
          parameter_3: <strong>align</strong> <span class='data-type'>[string]</span><br/>Alignment, left or right.
          parameter_4: <strong>origin</strong> <span class='data-type'>[string]</span><br/>Text that will be added to the <b>character</b>.
          parameter_5: <strong>destination</strong> <span class='data-type'>[integer]</span><br/>Variable that will receive the result of the command.
      string_removeat:
        description: Removes an element from specific index in string
        paragraph_1: The command <span class='code'>string.removeat</span> is used to separate a string into parts using a delimiter and remove one of them.
        paragraph_2: In the example above the command <a href='string.removeat' class='command'>string.removeat</a> will separate a contents of the variable <strong>sText</strong> according to the delimiter and will remove the separate part according to the index on the property <strong>element_index</strong>.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>String delimiter.
          parameter_2: <strong>element_index</strong> <span class='data-type'>[integer]</span><br/>Delimiter's position, with 0 being the first.
          parameter_3: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text that will be separated.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the result of the command.
      string_replace:
        description: Replace all occurrences of the specified substring
        paragraph_1: The command <span class='code'>string.replace</span> is used to replace part of a string.
        paragraph_2: In the example above the command <a href='string.replace' class='command'>string.replace</a> will overwrite the contents <strong>WalkCloud</strong> of the variable <strong>sText</strong> for the content <strong>CloudWalk</strong>.
        parameters:
          parameter_1: <strong>new_substring</strong> <span class='data-type'>[string]</span><br/>New text.
          parameter_2: <strong>old_substring</strong> <span class='data-type'>[string]</span><br/>Text to be replaced.
          parameter_3: <strong>original_string</strong> <span class='data-type'>[string]</span><br/>Original text.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the result of the command.
      string_replaceat:
        description: Replaces an element at a specific index in string
        paragraph_1: The command <span class='code'>string.replaceat</span> is used to replace a specific part of the string.
        paragraph_2: In the example above the command <a href='string.replaceat' class='command'>string.replaceat</a> will separate the string stored in the variable <strong>sText</strong> and replace the contents of the second part, defined by <strong>element_index</strong> 1, which is <strong>POSXML Application</strong> to <strong>POSXML</strong>.
        parameters:
          parameter_1: <strong>delimiter</strong> <span class='data-type'>[string]</span><br/>String delimiter.
          parameter_2: <strong>element_index</strong> <span class='data-type'>[integer]</span><br/>Delimiter's position, with 0 being the first.
          parameter_3: <strong>new_element</strong> <span class='data-type'>[integer]</span><br/>New text.
          parameter_4: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text that will be separated.
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_substring:
        description: Capture a specific part of string
        paragraph_1: The command <span class='code'>string.substring</span> is used to return a specific part of a <a href='stringvariable' class='command'>stringvariable</a>.
        paragraph_2: In the example above the variable <strong>$(sCompleteText)</strong> will be used by the command <strong>string.substring</strong> to locate the starting point from the 10th character (0 is the first, including spaces) and will return 10 characters that will be passed to the variable <strong>$(sHalfText)</strong>.
        parameters:
          parameter_1: <strong>length</strong> <span class='data-type'>[integer]</span><br/>Set the size of the returned string.
          parameter_2: <strong>start</strong> <span class='data-type'>[integer]</span><br/>Defines which position of the string the will be used as a reference.
          parameter_3: <strong>string</strong> <span class='data-type'>[string or variable]</span><br/>A string or a variable with the value that will be changed by the command.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[string or integer]</span><br/>Variable that will store the return of the command.
      string_tohex:
        description: Converts a string to its hexadecimal representation
        paragraph_1: The command <span class='code'>string.tohex</span> is used to convert an ASCII string to hexadecimal.
        paragraph_2: In the example above the text <strong>CloudWalk</strong> will be converted to hexadecimal.
        parameters:
          parameter_1: <strong>string</strong> <span class='data-type'>[string]</span><br/>Value to be converted.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      string_trim:
        description: Eliminates the blanks on the left and right of the string
        paragraph_1: The command <span class='code'>string.trim</span> is used to remove the blank spaces at the beginning and the end of the string.
        paragraph_2: In the example above the command <a href='string.trim' class='command'>string.trim</a> will remove the blank spaces at the beginning and the end of the content of the variable <strong>sText</strong>.
        paragraph_3: Two results will be displayed with the command <a href='display' class='command'>display</a>, showing text with and without the command string <a href='string.trim' class='command'>.trim</a>.
        parameters:
          parameter_1: <strong>string</strong> <span class='data-type'>[string]</span><br/>Text to be changed.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the result of the command.
      stringtoint:
        description: Conversion from string to integer
        paragraph_1: The command <span class='code'>stringtoint</span> is used to convert a string into integer.
        paragraph_2: In the example above text of the variable <strong>sText</strong> was separated using the command <a href='string.elementat' class='command'>string.elementat</a>.
        paragraph_3: The numbers (<a href='stringvariable' class='command'>stringvariable</a>) have been converted into <a href='integervariable' class='command'>integervariable</a> and you can use the command <a href='display' class='command'>display</a> to set the row and column.
        parameters:
          parameter_1: <strong>variableinteger</strong> <span class='data-type'>[integer]</span><br/>Integer value that will be converted into string.
          parameter_2: <strong>variablestring</strong> <span class='data-type'>[string]</span><br/>Variable that will store the converted value.
      stringvariable:
        description: Creates an instance of the variable of string type
        paragraph_1: The command <span class='code'>stringvariable</span> is used to declare a variable that stores only text. This type supports a number of mathematical operations but they will not be treated as numeric values, for example, <strong>variable123</strong>.
        paragraph_2: In the example above, a variable of type <strong>stringvariable</strong> has been created which has an initial value <strong>Initial value</strong>.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[string]</span></br>Variable Name.
          parameter_2: <strong>value</strong> <span class='data-type'>[integer or string]</span></br>Initial value of the variable.
      substring:
        description: Copies part of a variable string to another variable
        paragraph_1: The command <span class='code'>substring</span> is used to separate a string into substrings according to a delimiter.
        paragraph_2: In the example above the command <a href='substring' class='command'>substring</a> will separate the string stored in the variable <strong>sText</strong> according to the delimiter and store the substring defined by <strong>index</strong> 0 in the variable <strong>sReturn</strong>.
        parameters:
          parameter_1: <strong>character</strong> <span class='data-type'>[string]</span><br/>String delimiter.
          parameter_2: <strong>index</strong> <span class='data-type'>[integer]</span><br/>Delimiter's position, with 0 being the first.
          parameter_3: <strong>variabledestination</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the substring.
          parameter_4: <strong>variablesource</strong> <span class='data-type'>[string]</span><br/>Text that will be separated.
          parameter_5: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command. If nothing is found will return <strong>-1</strong>.
      system_backlight:
        description: Define the device's backlight intensity level.
        paragraph_1: The command <span class='code'>system.backlight</span> defines the device's backlight intensity level.
        paragraph_2: This command is often used when the device in on battery power as there is a considerable consumption of battery when the backlight is set to 100%.
        paragraph_3: In the example above, the command <span class='code'>system.backlight</span> is used to modify the backlight intensity level to 50%.
        paragraph_4: Since the return of the command is an <a href='integervariable' class='commands'>integervariable</a>, the command <a href='inttostring' class='commands'>inttostring</a> is used to convert and display the variable using the command <a href='display' class='commands'>display</a>.
        parameters:
          parameter_1: <strong>level</strong> <span class='data-type'>[integer]</span><br/>Backlight level percentage.
          parameter_2: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<br/><ul><li>-1: Error when defining the new value</li><li>0: OK</li></ul>'
      system_beep:
        description: Produces a short beep
        paragraph_1: The command <span class='code'>system.beep</span> is used to make the terminal beep.
        paragraph_2: In the example above, the command <strong>system.beep</strong> will cause the device to beep.
      system_checkbattery:
        description: Checks the device battery status
        paragraph_1: The command <span class='code'>system.checkbattery</span> is used to return the current percentage of battery.
        paragraph_2: In the example above, the command <strong>system.checkbattery</strong> will return to <a href='integervariable' class='command'>integervariable</a> <strong>$( battery_status)</strong>. As <strong>variablestatus</strong> only accepts an integer value, it is necessary to convert the value to <a href='stringvariable' class='command'>stringvariable</a> to display the value onscreen.
        paragraph_3: The value <strong>-1</strong> means that the device has no battery.
        parameters:
          parameter_1: '<strong>variablestatus</strong> <span class="data-type">[integer]</span></br>Variable that will store the return of the command. The returned value ranges from 0 to 100, scaling 1 by 1. Examples: 0, 1, 2, 3, 4, 5 ... 95, 96, 97, 98, 99, 100.'
      system_gettouchscreen:
        description: Captures the coordinates (x and y) where the display was pressed
        paragraph_1: The command <span class='code'>system.gettouchscreen</span> is used to capture the coordinates (x, y) where the display is pressed. The file config.dat must be changed in order to enable the use of the touchscreen in the application.
        parameters:
          parameter_1: <strong>axisx</strong> <span class='data-type'>[integer]</span><br/>X-axis coordinate of the display, where the display was pressed.
          parameter_2: <strong>axisy</strong> <span class='data-type'>[integer]</span><br/>Y-axis coordinate of the display, where the display was pressed.
          parameter_3: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Variable that will store the return code, where:<br/>1: display was pressed<br/> 0: display was not pressed'
        paragraph_2: In the example above, the command <strong>system.gettouchscreen</strong> will return in iXaxis the X coordinate and in iYaxis the Y coordinate of the point pressed on the display.
        paragraph_3: The while loop is to ensure that the display will continue to listen for a display press.
      system_info:
        description: Gets device information (MAC Address, SIM ID, etc)
        paragraph_1: The command <span class='code'>system.info</span> is used to return information from the device.
        paragraph_2: In the example above, the command <strong>system.info</strong> will return the <b>macaddress</b> of the device.
        parameters:
          parameter_1: <strong>type</strong> <span class='data-type'>[string]</span><br/>Information you want to return, <b>simid</b> or <b>macaddress</b>.
          parameter_2: <strong>variablereturn</strong> <span class='data-type'>[string]</span><br/>Variable that will store the return of the command.
      system_qrcode:
        description: Generate a QR Code based on the entered data
        paragraph_1: The command <span class='code'>system.qrcode</span> is used to generate a QR Code based on the content of the parameter <strong>input</strong>. The generated QR Code can be displayed or printed (if the device has a printer).
        paragraph_2: "In the example above, the command <strong>system.qrcode</strong> will generate a new bitmap of size: <strong>x1</strong> and version: <strong>4</strong> and a second bitmap of size: <strong>x5</strong> and version: <strong>4</strong>. Then, the <strong>x1</strong> QR Code will be displayed through the command <a href='displaybitmap' class='command'>displaybitmap</a> and the <strong>x5</strong> QR Code will be printed through the command <a href='printbitmap' class='command'>printbitmap</a> (if the device has a printer)."
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>Name of the bitmap file that will be created.
          parameter_2: <strong>input</strong> <span class='data-type'>[string]</span><br/>Content that will be used to generate the QR Code.
          parameter_3: "<strong>size</strong> <span class='data-type'>[string]</span><br/>Size of the bitmap image. Supported sizes: <strong>x1, x2, x3, x4 and x5</strong>."
          parameter_4: "<strong>version</strong> <span class='data-type'>[string]</span><br/>Symbol version of the QR Code. Each version has a different module configuration or number of modules. Supported versions: <strong>1, 2, 3, 4, 5 and 6</strong>."
      system_inputtransaction:
        description: "Instruction to receive the data card on a contactless transaction"
        paragraph_1: "The command <span class='code'>system.inputtransaction</span> is an instruction to receive the card data for a contactless transaction."
        paragraph_2: "In the above example, the variables will store values that were generated by the command <strong>system.inputtransaction</strong>. The application will wait for user interaction through a card or by pressing any key during the time set on the property <strong>timeout</strong>."
        parameters:
          parameter_1: "<strong>inputtype</strong> <span class='data-type'>[string]</span><br/>1 for magstripe, 2 for chip, 3 for contactless, 4 for keyboard, 5 for touch."
          parameter_2: "<strong>keyboard</strong> <span class='data-type'>[string]</span><br/>1 for keybard enabled and 0 for keyboard disabled."
          parameter_3: "<strong>cardvariable</strong> <span class='data-type'>[string]</span><br/>It contains the track 2 and/or track 1 only when inputtype equals to 1."
          parameter_4: "<strong>timeout</strong> <span class='data-type'>[integer]</span><br/>Time to wait before the command cancels the operation (in milliseconds)."
          parameter_5: "<strong>keyvariable</strong> <span class='data-type'>[string]</span><br/>When keyboard is 0, only return after the timeout or if the KEY_CANCEL key is pressed. If keyboard is 1, all keystrokes are returned."
          parameter_6: "<strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command, where:<br/>0: when a key is pressed or when the card input happens with success<br>-1: if it fails reading the tracks<br>-2: timeout<br><strong>For EMV chip or contactless</strong><br>1: success<br> >1: error"
      system_readcard:
        description: Waits until a card is passed or a key is pressed
        paragraph_1: The command <span class='code'>system.readcard</span> is used to read cards.
        paragraph_2: In the example above, the 4 variables will store values that were generated by the command <strong>system.readcard</strong>. The application will wait for user interaction through a card or by pressing any key during the time set on the property <strong>timeout</strong>.
        parameters:
          parameter_1: <strong>cardvariable</strong> <span class='data-type'>[string]</span><br/>Variable that will store the card number.
          parameter_2: <strong>keyvariable</strong> <span class='data-type'>[string]</span><br/>Variable that will store the value of the key pressed.
          parameter_3: <strong>timeout</strong> <span class='data-type'>[integer]</span><br/>Waiting time until the command cancels the operation.
          parameter_4: <strong>variablereturn</strong> <span class='data-type'>[integer]</span><br/>Variable that will store the return of the command.
      system_restart:
        description: Restarts the device
        paragraph_1: The command <span class='code'>system.restart</span> is used to restart the device.
        paragraph_2: In the example above when the application is started, the command <strong>system.restart</strong> will restart the device.
      time_calculate:
        description: Calculates time. Supports addition, subtraction and difference
        paragraph_1: The command <span class='code'>time.calculate</span> is used to calculate time. It supports addition, subtraction and difference.
        paragraph_2: 'In the example above, there are three operations: <strong><em>difference, sum</em></strong> and <strong><em>less</em></strong>.'
        paragraph_3: The first operation performed is <strong><em>difference</em></strong>, where the content of the variable <em><strong>sDate1</strong></em> is compared with the content of the variable <em><strong>sDate2</strong></em>, and the difference between them is returned in <strong><em>seconds</em></strong> and stored on <strong><em>variablereturn</em></strong>.
        paragraph_4: The second operation performed is <strong><em>sum</em></strong>, where <strong><em>10 hours</em></strong> is added on the date stored on <strong><em>sDate1</em></strong>. If the operation is successfully executed, the variable <strong><em>variablereturn</em></strong> receives 0, and the date stored on <strong><em>sDate1</em></strong> will be increased by <strong><em>10 hours</em></strong>.
        paragraph_5: The third operation performed is <strong><em>less</em></strong>, where <strong><em>10 minutes</em></strong> is subtracted from the date stored on <strong><em>sDate1</em></strong>. If the operation is successfully executed, the variable <strong><em>variablereturn</em></strong> receives 0, and the date stored on <strong><em>sDate1</em></strong> will be decreased by <strong><em>10 minutes</em></strong>.
        parameters:
          parameter_1: <strong>date</strong> <span class='data-type'>[string]</span><br/> Date that will be changed or that will be used in comparison by the operation <i><strong>difference</strong></i>.
          parameter_2: <strong>greaterdate</strong> <span class='data-type'>[string]</span><br/> Greater date that will be used by the <i><strong>difference</strong></i> operation. On <i><strong>sum</strong></i> and <i><strong>less</strong></i> operations this variable is not used, but an empty value <strong>should not</strong> be used, or a POSXML error might occur.
          parameter_3: '<strong>operation</strong> <span class="data-type">[string]</span><br/> Operation type, which can be: <i><strong>sum</strong></i>, <i><strong>less</strong></i> or <i><strong>difference</strong></i>.'
          parameter_4: '<strong>type</strong> <span class="data-type">[string]</span><br/> Unit of time to be calculated: years, months, days, hours, minutes or seconds.<br/>On a <i><strong>difference</strong></i> operation this variable is not used, but an empty value <strong>should not</strong> be used, or a POSXML error might occur.'
          parameter_5: <strong>value</strong> <span class='data-type'>[integer]</span><br/> Value to be added or subtracted (only for operations <i><strong>sum</strong></i> and <i><strong>less</strong></i>)</strong>.
          parameter_6: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/> If the operation is <i><strong>difference</strong></i>, the <strong>value</strong> of the difference is returned. Is case of an <i><strong>sum</strong></i> or <i><strong>less</strong></i> operation the result is: <br/><em><strong>0:</strong></em> Success<br/><em><strong>-1:</strong></em> Error.'
      title: Command
      unzipfile:
        description: Unpacks a zip file
        paragraph_1: The command <span class='code'>unzipfile</span> is used to uncompress a file compressed in the zip format.
        paragraph_2: In the example above, the command <span class='code'>unzipfile</span> was used to decompress a file called <strong>test.zip</strong>, that is stored on the device memory. After that the command <a href='inttostring' class='command'>inttostring</a> is used to convert and display the variable using the command <a href='display' class='command'>display</a>.
        parameters:
          parameter_1: <strong>filename</strong> <span class='data-type'>[string]</span><br/>Name of the zip file stored on the device.
          parameter_2: '<strong>variablereturn</strong> <span class="data-type">[integer]</span><br/>Return of the command, where:<br/><ul><li>0: File successfully uncompressed</li><li>-1: Error during decompression</li></ul>'
      wait:
        description: Pauses execution for a set time
        paragraph_1: The command <span class='code'>wait</span> is used to pause the execution of the application for a certain time.
        paragraph_2: In the example above the first <a href='display' class='command'>display</a> will appear and after <strong>2000 milliseconds (2 seconds)</strong> second <a href='display' class='command'>display</a> will be displayed.
        parameters:
          parameter_1: <strong>miliseconds</strong> <span class='data-type'>[integer]</span><br/>Pause time in milliseconds.
      waitkey:
        description: Pauses execution until a button is pressed
        paragraph_1: The command <span class='code'> waitkey </span> is used to wait for any key press on the device.
        paragraph_2: In the example above the command <strong>waitkey</strong> pauses the code execution at that point and only the first <a href='display' class='command'>display</a> is displayed.
        paragraph_3: By pressing any key on the POS, the command <strong>waitkey</strong> will continue the code execution, clean the display and display the second message.
        paragraph_4: The last <strong>waitkey</strong> is used so that the application is not closed immediately after execution.
      waitkeytimeout:
        description: Same as command waitkey but has a timeout
        paragraph_1: The command <span class='code'>waitkeytimeout</span> is used to wait for any key press on the device, but with a time limit.
        paragraph_2: In the example above the command <strong>waitkeytimeout</strong> will wait 10 seconds if no key is pressed.
        parameters:
          parameter_1: <strong>seconds</strong> <span class='data-type'>[integer]</span><br/>Pause time in seconds.
      while:
        description: Instruction that allows the execution of a code multiple times
        operators:
          operator_1: <strong>greaterthan:</strong> <span class='code'>&gt;</span>
          operator_2: <strong>lessthan:</strong> <span class='code'>&lt;</span>
          operator_3: <strong>greaterthanorequalto:</strong> <span class='code'>&gt;=</span>
          operator_4: <strong>lessthanorequalto:</strong> <span class='code'>&lt;=</span>
          operator_5: <strong>equalto:</strong> <span class='code'>=</span>
          operator_6: <strong>notequalto:</strong> <span class='code'>!</span>
        operators_integer:
          paragraph_1: <strong>Logic operations with integer variables</strong>
          paragraph_2: Integer operations are performed the same way as in any other programming language.
        operators_list: <strong>List of operators</strong>
        operators_string:
          paragraph_1: <strong>Logic operations with string variables</strong>
          paragraph_2: String operations with the operators <span class='code'>greaterthan</span>, <span class='code'>lessthan</span>, <span class='code'>greaterthanorequalto</span>, <span class='code'>lessthanorequalto</span>, happen in two stages; firstly the value is converted to a <b>float</b>, and then the logical operation is performed.
        other_operators: String operations with the operators <span class='code'>equalto</span> and <span class='code'>notequalto</span> are performed the same way as in any other programming language.
        paragraph_1: The command <span class='code'>while</span> is used to repeat a block of code until a condition is met.
        paragraph_2: 'In the example above, there are three conditions: <ul><li>1st - compare two texts causing it to be <em>true</em> as <em>Blue</em> is equal to the value of the variable <em>sColor</em> </li><li>2nd - compare two numbers causing it to be <em>false</em> as <em>111</em> is not greater than the value of the variable <em>iNumber</em></li><li>3rd - compare two texts is causing it <em>false</em> as <em>Blue</em> is different from the value of the variable <em>sColor</em>. POSXML considers uppercase and lowercase letters (<em>case-sensitive</em>) </li></ul> The command <a href="waitkey" class="command">waitkey</a> awaits click any key to continue code execution.'
        paragraph_3: The code inside the <strong>while</strong> block will run <em>6</em> times (the variable number has the initial value = 0) displaying the text 'Message'.
        paragraph_4: The command <a href='integeroperator' class='command'>integeroperator</a> is used to increment (one by one) the value of the variable <em>$(iNumber)</em> on each iteration of the <strong>while</strong> block until the condition is met, then exits the <strong>while</strong> block.
        parameters:
          parameter_1: <strong>variable</strong> <span class='data-type'>[integer or string]</span><br/>Variable that will be used in the comparison.
          parameter_2: '<strong>operator</strong> <span class="data-type">[string]</span><br/>Comparison operator: <span class="code">lessthan</span>, <span class="code">greaterthan</span>, <span class="code">equalto</span>, <span class="code">notequalto</span>, <span class="code">greaterthanorequalto</span> or <span class="code">lessthanorequalto</span>.'
          parameter_3: <strong>value</strong> <span class='data-type'>[string or integer]</span><br/>Value that will be used in the comparison.
      writeserialport:
        description: Writes a buffer on the serial port
        paragraph_1: The command <span class='code'>writeserialport</span> is used to write a hexadecimal message on the serial port.
        paragraph_2: In the example above the command <a href='openserialport' class='command'>openserialport</a> will open a connection on port <strong>COM1</strong> with the rate <strong>115200</strong> and configuration <strong>A8N1</strong>.
        paragraph_3: The command <a href='writeserialport' class='command'>writeserialport</a> sends a buffer (message) to the door.
        paragraph_4: The command <a href='closeserialport' class='command'>closeserialport</a> closes the serial port.
        parameters:
          parameter_1: <strong>buffer</strong> <span class='data-type'>[string]</span><br/>Buffer, hexadecimal, which will be written on the serial port.
          parameter_2: <strong>variablehandle</strong> <span class='data-type'>[integer]</span><br/>Handle of the open door.
    commands_list:
      commands:
        groups:
          card_reading: Card reading
          complete_list: All
          connectivity: Connectivity
          cryptography: cryptography
          data_entry: Data entry
          date_time: Date time
          emv: EMV
          file_manipulation: File manipulation
          flow_control: Flow control
          iso_8583: ISO 8583
          pinpad: Pinpad
          print: Print
          serial_port: Serial port
          smartcard: Smartcard
          string: String
          user_interface: User interface
          utils: Utils
          variables_conversions: Variables and conversions
        paragraph_1: For organizational purposes, the POSXML commands are grouped by similarity. In case of doubt, there is also the possibility to view all commands by category 'All commands'.
      description: List of available commands on the CloudWalk IDE.
      presentation:
        paragraph_1: List of available commands on the CloudWalk IDE.
        paragraph_2: 'If you run any application containing a command not supported by the version of CloudWalk Framework installed on the device, an error occurs <span class="code">WALK: Byte Mode Error</span>, stating that the Byte Code command does not exist in the version of CloudWalk Framework installed.'
      table_of_contents:
        commands: Commands List
        commands_list: Commands List
        presentation: Presentation
      title: POSXML - Commands List
    configuration:
      description: The CloudWalk Framework has several variables of configuration, allowing to configure any parameter of the terminal through POSXML language. List of parameters.
      parameters_list:
        accepts_track_1_and_2: Accept track 1 and 2
        accepts_track_2: Accept track 2
        config_dat_model: Model in config.dat
        manual_typing_not_allowed: Does not allow manual entry
        manual_typing_or_swap: Manual typing or pass
        option: Option
        paragraph_1: 'Below are the variables of configuration available in the config.dat file:'
        parameter_1: <strong>autooffmodem</strong><br/> offs the modem automatically after a connection.
        parameter_10: <strong>keystar</strong><br/> Key that will be used to put the <strong>*</strong> (asterisk). Optional keys vary from device to device can go up from KEY_EXTRA1 to KEY_EXTRA99
        parameter_11: '<strong>model</strong><br/> Model of the device, as shown below:'
        parameter_12: <strong>mygateway</strong><br/> Gateway which will be used by the device. You need to set the Gateway to <strong>0.0.0.0</strong> if the communication protocol <strong>PPP</strong> or <strong>DHCP</strong> is used.
        parameter_13: <strong>myip</strong><br/> Device's IP address. You must set the IP to <strong>0.0.0.0</strong> if the communication protocol <strong>PPP</strong> or <strong>DHCP</strong> is used.
        parameter_14: <strong>nomeaplicativo</strong><br/> Name of the application that will be pursued in the CloudWalk Manager.
        parameter_15: <strong>numerodestepos</strong><br/> Device's Logical number.
        parameter_16: <strong>primeiravez</strong><br/> Indicates whether this is the first time the device is running a POSXML application.
        parameter_17: <strong>qtdetentativasenvio</strong><br/> Number of packages to be sent until there is confirmation by authorizer.
        parameter_18: <strong>retentativas</strong><br/> Number of retries to connect to the CloudWalk service.
        parameter_19: <strong>sn_terminal</strong><br/> Device's Serial number.
        parameter_2: <strong>crcpaginawalkserver</strong><br/> sets the application's CRC on the CloudWalk Manager.
        parameter_20: <strong>subnet</strong><br/> Netmask. It is necessary to set the mask to <strong>255.255.255.255</strong> if the communication protocol <strong>PPP</strong> is used, if used <strong>DHCP</strong> is necessary to set the mask to <strong>0.0.0.0</strong>
        parameter_21: <strong>timeoutinput</strong><br/> Timeout for all statements that use it.
        parameter_22: '<strong>tiposcartao</strong><br/> Defines the rules for use of cards, according to the table below:'
        parameter_23: |-
          <strong>touchscreen</strong><br/>Enables or disables the virtual keyboard, if the device has touchscreen where: <pre>0 - Does not activate the virtual keyboard
          1 - Enables virtual keyboard</pre>
        parameter_24: <strong>uclapn</strong><br/> APN of the GPRS network.
        parameter_25: |-
          <strong>uclmedia</strong><br/> Connection type to be used, and can be: <pre>LANDLINE
          ETHERNET
          GPRS
          WIFI</pre>
        parameter_26: <strong>uclpassword</strong><br/> User password of the RAS or the APN (PPP).
        parameter_27: <strong>uclphoneno</strong><br/>The number that the device is going to call.
        parameter_28: |-
          <strong>uclprotocol</strong><br/>Communication protocol to be used, and can be: <pre>TCP
          SDLC</pre>
        parameter_29: <strong>uclusername</strong><br/>Name of the user of RAS or APN (PPP).
        parameter_3: <strong>dnsprimario</strong><br/> sets the primary DNS that will be used by the device. You must set the DNS to <strong>0.0.0.0</strong> if the communication protocol <strong>PPP</strong> is used.
        parameter_30: <strong>uclwifikey</strong><br/>Password for the WIFI network we want to connect (hexadecimal).
        parameter_31: <strong>uclwifinetwork</strong><br/>Name of the WIFI network we want to connect.
        parameter_32: |-
          <strong>uclwifisecurity</strong><br/>Types of encryption <pre>WEP64-40
          WEP128-104
          WPA2-PSK <strong>(for VX 680 only)</strong></pre>
        parameter_33: <strong>versaoframework</strong><br/>CloudWalk Framework version installed on the device.
        parameter_4: <strong>dnssecundario</strong><br/> sets the secondary DNS that will be used by the device. You must set the DNS to <strong>0.0.0.0</strong> if the communication protocol <strong>PPP</strong> is used.
        parameter_5: <strong>gprs_pin</strong><br/> PIN of the GPRS card.
        parameter_6: |-
          <strong>iskeytimeout</strong><br/> Used to identify what <a href='/en/posxml/commands/readkey ' class='command'>readkey </a> will return in case of timeout, where: <pre>0 - Disabled, readkey returns KEY_CANCEL on timeout.
          1 - Enabled readkey returns -1 on timeout.</pre>
        parameter_7: <strong>keyalpha</strong><br/> Key that is used to activate the <strong>alpha</strong> keyboard. Optional keys vary from device to device can go up from KEY_EXTRA1 to KEY_EXTRA99
        parameter_8: <strong>keypaperfeed</strong><br/> Key that is used to make the <a href='/en/posxml/commands/paperfeed' class='command'>paperfeed</a>
        parameter_9: <strong>keypound</strong><br/> Key that is used to put the <strong>#</strong> (sharp). Optional keys vary from device to device can go up from KEY_EXTRA1 to KEY_EXTRA99
        pos_model: Device model
        reading_type: Reading type
        tracks: Tracks
      presentation:
        paragraph_1: The CloudWalk Framework has several variables of configuration, allowing the customization of every device parameter through the POSXML language, like environment variables used by the application and equipment drivers such as modem and printer.
        paragraph_2: Any of these parameters can be set with the help of the command <a href='/en/posxml/commands/editfile' class='command'>editfile</a>, pointing config.dat file, and using the name of these parameters as a key. File config.dat is nothing more than a file in the CloudWalk's file system.
        paragraph_3: You can configure any type of communication, retries, among other parameters and make logical reconnection backup through POSXML using the instructions <a href='/en/posxml/commands/editfile' class='command'>editfile</a> and <a href='/en/posxml/commands/preconnect' class='command'>preconnect</a>.
      table_of_contents:
        parameters_list: List of parameters
        presentation: Presentation
      title: POSXML - Configuration
    file_system:
      creating_and_editing_files:
        paragraph_1: The commands <a href='/en/posxml/commands/editfile' class='command'>editfile</a>, <a href='/en/posxml/commands/readfile' class='command'>readfile</a> and <a href='/en/posxml/commands/readfilebyindex' class='command'>readfilebyindex</a> can be used to work with this file type, based on keys and values, enabling a fast and efficient way to store static data on the device.
        paragraph_2: 'We recommend using the utility EditDBFile to manipulate your WALK dbfile files. Follow this procedure:'
        paragraph_3: Download the utility from  <a href='http://dl.cloudwalk.io/edit_db_file.zip'>http://dl.cloudwalk.io/edit_db_file.zip</a>
        paragraph_4: Unzip and run the package <strong>EditDbFileWalk.exe</strong>
        paragraph_5: 'Enter the path to the dat file and press the button: <strong>Load</strong>.'
        paragraph_6: 'Make the necessary changes and press the button: <strong>Save</strong>.'
        paragraph_7: Register the <a href='/en/manager/assets'>file in CloudWalk Manager</a> and your devices can download it with command <a href='/en/posxml/commands/downloadfile' class='command'>downloadfile</a>
      description: The CloudWalk Framework has a file system that can handle files of type WALK dbfile (text file in UNIX environments). Creating and editing files. Use the utility EditDBFile to manipulate WALK dbfile files.
      presentation:
        paragraph_1: 'The CloudWalk Framework has a file system that can handle files of type WALK dbfile, where you can create and work with files in the following format:'
        paragraph_2: Basically, it would be the format of text files in UNIX environments, where <span class='code'>\n</span> represents a newline. The configuration file itself (config.dat) is a WALK dbfile file.
      table_of_contents:
        creating_and_editing_files: Creating and editing files
        presentation: Presentation
      title: POSXML - File System
    memory_and_variables:
      description: The POSXML language has the concept of variable types, where they can be of type string or integer. Limitations and parameter passing.
      introduction: The CloudWalk Framework is responsible for running compiled POSXML applications, and when installed on the device, the POSXML application assumes all responsibility for memory management and devices. Therefore, to run an application on the device, just write a file in POSXML, compile it and send it to the device.
      limitations:
        paragraph_1: There is a limit of 511 variables per POSXML application, <ul><li>256 of type string with maximum size of 1K (1023 characters, of which one is used automatically by the platform to allocate the <span class='code'>\0</span>), </li><li>and 255 of type integer. </li></ul>
        paragraph_2: When you declare a variable with the commands <a href='/en/posxml/commands/integervariable' class='command'>integervariable</a> or <a href='/en/posxml/commands/stringvariable' class='command'>stringvariable</a>, it will be in memory until the device is disconnected. For this reason, you must be careful to declare at the beginning of the application all of the variables that will be used and clean them later, to prevent any errors from occurring during the execution of the application.
        paragraph_3: Currently there is a limit of 32K memory for loading compiled POSXML pages.
      parameters:
        paragraph_1: Every POSXML command owning a parameter whose name contains the word <span class='code'>variable</span>, for example, <span class='code'>variablereturn</span>, is required to have a parameter assigned.
        paragraph_2: 'The assignment of variables is made with the nomenclature <span class="code">$(VariableName)</span>, as can be seen below:'
        paragraph_3: 'When the name of the parameter does not have the word variable, you can pass either a constant or a variable. The assignment is taken as constant in every programming language:'
        paragraph_4: In string variables, it is still possible to pass to the command just a snippet of the indexed variable, as in other programming languages, using pointers to variables.
        paragraph_5: 'In the example below, the following string would be displayed: <strong>H</strong>'
        paragraph_6: 'In the example below, the following string would be displayed: <strong>e</strong>'
        paragraph_7: 'In the example below, the following string would be displayed: <strong>ello World</strong>'
        paragraph_8: In this last example <span class='code'>!</span> symbol was specified so that it will display the characters from the position defined in <span class='code'>intIndex</span> until the end of the string. When the symbol <span class='code'>!</span> is omitted, only the character set in position <span class='code'>intIndex</span> is displayed on the device display.
      table_of_contents:
        limitations: Limitations
        parameters: Parameter passing
        variable_types: Variable Types
      title: POSXML - Variables and memory
      variable_types:
        paragraph_1: The POSXML language uses the concept of variable types. It offers two types by which you can store values and manipulate them across your entire application. These are <strong>string</strong> or <strong>integer</strong>. Several POSXML commands require a variable type, which is described in the explanation of each POSXML command operation.
        paragraph_2: You can convert variables of type <strong>integer</strong> to <strong>string</strong> and vice versa, by using the commands <code>inttostring</code> and <code>stringtoint</code>.
        paragraph_3: Variables of type <strong>double</strong> (decimal floating point) can also be used by using string variables with decimal point separated by <code>.</code> (point), and not by <code>,</code> (comma).
    structure:
      case_sensitive:
        paragraph_1: The POSXML language is <em>case sensitive</em>, so there are differences between lowercase and uppercase words. You need to pay attention, especially when naming functions and variables.
        paragraph_2: 'Example:'
      comments:
        paragraph_1: 'Comments blocks should be used with tags <span class="code">&lt;!--</span> and <span class="code">--&gt;</span> as below:'
      description: Organization and Structure, Parent tag or root tags, Case sensitive, Reserved characters, Comments.
      introduction: The POSXML language follows the <a href='http://en.wikipedia.org/wiki/XML' class='external'>XML</a> open standard. The XML standard is totally flexible and allows for rapid expansion. All formatting rules applied to XML persist in POSXML.
      reserved_characters:
        paragraph_1: All reserved characters in XML are also reserved in POSXML and should be written in the correct way.
        paragraph_2: 'The following symbols on the left should be written as they appear on the right:'
        paragraph_3: 'To display a message with the symbol <span class="code">&lt;</span> (less than), the code would be like:'
      structure:
        paragraph_1: The POSXML language is organized and structured in the form of tags with levels and sublevels of commands that form the logical structure of the application. A tag can be identified when is located between the signs <span class='code'>&lt;</span> (less than) and <span class='code'>></span> (greater than), where they are opened and closed.
        paragraph_2: 'Example:'
      table_of_contents:
        case_sensitive: Case sensitive
        comments: Comments
        reserved_characters: Reserved characters
        structure: Organization and Structure
      tag_root:
        paragraph_1: Every POSXML application has to have a parent tag or a root tag, and a valid name, following the criteria for opening and closing tags. Below the root tag, the tag <span class='code'>&lt;pagina nome="principal"&gt;</span> must be created, which is where all the application logic should be done.
        paragraph_2: 'Example:'
      title: POSXML - Language structure
    useful_functions:
      title: "POSXML - Useful functions"
      description: "POSXML functions ready to use."
      introduction: "Optimize your time and take advantage of ready to use POSXML functions."
      paragraph_1: "Do you like to share? <a href='mailto:posxml@cloudwalk.io'>Send us your function</a>, and if we publish it, we will mention you as the author!"
      table_of_contents:
        cpf_validation: "CPF validation"
        hide_credit_card_number: "Hide the credit card number entered"
        center_text: "Center text"
        format_iso8583_money: "Format ISO8583 money"
      cpf_validation:
        paragraph_1: "Function to validate a given CPF."
      hide_credit_card_number:
        paragraph_1: "Function to hide a given credit card number."
      center_text:
        paragraph_1: "Function to center a text."
      format_iso8583_money:
        paragraph_1: "Function to format any ISO8583 money value. For example, 100 becomes 1,00."
  framework:
    package:
      select: "<strong>CloudWalk Framework package:</strong> Select your device brand, model and signature (if applicable):"
      device:
        brand: "Device brand"
        model: "Model"
        signature: "Signature"
      selected: "Selected package: "
      with_signature: "signed by"
      binary: "CloudWalk Framework binary for"
      unsigned: "unsigned"
      download: "Download"
      open_url: "Go to installation process"
      supplier:
        tefti: "BRAZIL - TEFTI"
        paytec: "BRAZIL - Paytec"
        pax: "BRASIL - PAX"
        other: "Other supplier"
      models:
        list: "Supported models: "
        verix: "Vx 510, Vx 610 and Vx 670"
        evo_usb: "VX 520 and VX 680"
        evo_serial: "VX 805 and VX 820"
        telium_1: "EFT930G and EFT930S"
        telium_2: "ICT220, ICT250, IWL220, IWL250 and IWL280"
        d200: "D200"
    communication:
      paragraph_1: Common local network (Ethernet)
      paragraph_2: Landline/dial-up (PPP)
      paragraph_3: Landline/dial-up (SDLC)
      paragraph_4: If your device does not show an option, for example, GPRS, it means that your device does not support that specific type of communication.
      paragraph_5: Details of the communication types
      paragraph_6: 'Each type of communication has a particular configuration process, as shown below:'
      ethernet:
        name: "LOCAL NETWORK"
        media: "NETWORK SETTINGS"
        posxml:
          screen_1:
            line_1: "NETWORK SETTINGS\n"
            line_2: "\n"
            line_3: "DEVICE IP\n"
            line_4: ":192.168.0.200\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_2:
            line_1: "NETWORK SETTINGS\n"
            line_2: "\n"
            line_3: "SUBNET MASK\n"
            line_4: ":255.255.255.0\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_3:
            line_1: "NETWORK SETTINGS\n"
            line_2: "\n"
            line_3: "ROUTER/GATEWAY\n"
            line_4: ":192.168.0.1\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_4:
            line_1: "NETWORK SETTINGS\n"
            line_2: "\n"
            line_3: "DNS SERVER 1\n"
            line_4: ":192.168.0.1\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_5:
            line_1: "NETWORK SETTINGS\n"
            line_2: "\n"
            line_3: "DNS SERVER 2\n"
            line_4: ":192.168.0.1\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
        paragraph_1: 1. Set the device IP address (eg 192.168.0.200). If you are using DHCP, the value <strong>0.0.0.0</strong> should be set.
        paragraph_2: 2. Set the subnet mask for the defined IP address class (eg 255.255.255.0).
        paragraph_3: 3. Set the router/gateway IP address (eg 192.168.0.1).
        paragraph_4: 4. Set the primary DNS server (eg 192.168.0.1).
        paragraph_5: 5. Set the secondary DNS server (eg 192.168.0.1).
      gprs:
        name: "GPRS"
        media: "GPRS SETTINGS"
        posxml:
          screen_1:
            line_1: "GPRS SETTINGS\n"
            line_2: "\n"
            line_3: "1 CLARO\n"
            line_4: "2 TIM\n"
            line_5: "3 OI\n"
            line_6: "4 VIVO\n"
            line_7: "5 LYRA\n"
            line_8: "6 OTHER OPERATOR"
        paragraph_1: 1. Set the mobile operator.
      ppp:
        name: "LANDLINE (PPP)"
        media: "LANDLINE SETTINGS"
        posxml:
          screen_1:
            line_1: "LANDLINE SETTINGS\n"
            line_2: "\n"
            line_3: "MODEM SPEED\n"
            line_4: ":2400\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_2:
            line_1: "LANDLINE SETTINGS\n"
            line_2: "\n"
            line_3: "PROVIDER PHONE\n"
            line_4: ":11223344\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_3:
            line_1: "LANDLINE SETTINGS\n"
            line_2: "\n"
            line_3: "USERNAME\n"
            line_4: ":username\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_4:
            line_1: "LANDLINE SETTINGS\n"
            line_2: "\n"
            line_3: "PASSWORD\n"
            line_4: ":123456\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
        paragraph_1: 1. Set the modem speed (eg 2400).
        paragraph_2: 2. Set the internet provider telephone number.
        paragraph_3: 3. Set the internet username. Some providers might require the complete username (eg user@provider.com), while others might require only the short username.
        paragraph_4: 4. Set the internet password.
      sdlc:
        name: "LANDLINE (SDLC)"
        media: "LANDLINE SETTINGS"
        posxml:
          screen_1:
            line_1: "LANDLINE SETTINGS\n"
            line_2: "\n"
            line_3: "MODEM SPEED\n"
            line_4: ":2400\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_2:
            line_1: "LANDLINE SETTINGS\n"
            line_2: "\n"
            line_3: "PROVIDER PHONE\n"
            line_4: ":11223344\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
        paragraph_1: 1. Set the modem speed (eg 2400).
        paragraph_2: 2. Set the internet provider telephone number.
      wifi:
        name: "WIFI"
        media: "WIFI SETTINGS"
        posxml:
          screen_1:
            line_1: "WIFI SETTINGS\n"
            line_2: "\n"
            line_3: "NETWORK NAME\n"
            line_4: ":\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_2:
            line_1: "WIFI SETTINGS\n"
            line_2: "\n"
            line_3: "PASSWORD\n"
            line_4: ":\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_3:
            line_1: "WIFI SETTINGS\n"
            line_2: "\n"
            line_3: "SECURITY PROTOCOL\n"
            line_4: "\n"
            line_5: "1.WEP-128\n"
            line_6: "2.WEP-64\n"
            line_7: "\n"
            line_8: "STATUS: WEP-128"
          screen_4:
            line_1: "WIFI SETTINGS\n"
            line_2: "\n"
            line_3: "DEVICE IP\n"
            line_4: ":192.168.0.200\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_5:
            line_1: "WIFI SETTINGS\n"
            line_2: "\n"
            line_3: "SUBNET MASK\n"
            line_4: ":255.255.255.0\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_6:
            line_1: "WIFI SETTINGS\n"
            line_2: "\n"
            line_3: "ROUTER/GATEWAY\n"
            line_4: ":192.168.0.1\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_7:
            line_1: "WIFI SETTINGS\n"
            line_2: "\n"
            line_3: "DNS SERVER 1\n"
            line_4: ":192.168.0.1\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
          screen_8:
            line_1: "WIFI SETTINGS\n"
            line_2: "\n"
            line_3: "DNS SERVER 2\n"
            line_4: ":192.168.0.1\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
        paragraph_1: 1. Set the name of the wireless network
        paragraph_2: 2. Set the password of the wireless network
        paragraph_3: '3. Set the protocol of the wireless network(ex: WEP 128-104).'
        paragraph_4: 4. Set the device IP address (eg 192.168.0.200). If using DHCP, the value <strong>0.0.0.0</strong> should be set.
        paragraph_5: 5. Set the subnet mask for the defined IP address class (eg 255.255.255.0).
        paragraph_6: 6. Set the router/gateway IP address (eg 192.168.0.1).
        paragraph_7: 7. Set the primary DNS server (eg 192.168.0.1).
        paragraph_8: Set the secondary DNS server (eg 192.168.0.1).
      ssl:
        posxml:
          screen_1:
            line_1: "%{media}\n"
            line_2: "\n"
            line_3: "ENABLE SSL?\n"
            line_4: "\n"
            line_5: "1.YES\n"
            line_6: "2.NO\n"
            line_7: "\n"
            line_8: "STATUS: DISABLED"
        paragraph_1: '%{num}. Set whether the device should use or not use <a href="http://en.wikipedia.org/wiki/Secure_Socket_Layer" class="external">SSL</a>.'
    configuration:
      description: Procedure for setting up the device after installing the CloudWalk Framework.
      title: CloudWalk Framework - Device configuration
      table_of_contents:
        logical_number: 'LOGICAL NUMBER'
        communication: 'COMMUNICATION'
        magstripe_settings: 'MAGSTRIPE SETTINGS'
        clear_this_device: 'CLEAR THIS DEVICE'
        check_serial_number: 'CHECK S. NUMBER'
        cloudwalk_update: 'CLOUDWALK UPDATE'
        about: 'ABOUT'
      password: "To access the configuration menu, enter the password <strong>55555</strong>. This password can be <a href='/en/framework/configuration/change-password'>changed</a>."
      logical_number:
        paragraph_1: "This option is used to define the device logical number."
        paragraph_2: "More information regarding the use of logical numbers can be found at:"
        integration: "Integration"
      communication:
        paragraph_1: "This option is used to setup the device communication."
        paragraph_2: "The following types of communication can be used (options may vary depending on device):"
      magstripe_settings:
        paragraph_1: "This option defines the parameters while swiping a magnetic stripe card."
        paragraph_2: "The following parameters can be used:"
        types:
          t0: "Returns the track 2 and allow card swiping and manual entering"
          t2: "Returns the track 2 and allow only card swiping"
          t4: "Returns the tracks 1 and 2 and allow card swiping and manual entering"
          t255: "Returns the tracks 1 and 2 and allow only card swiping"
      clear_this_device:
        paragraph_1: "This option is used to delete the device's applications and the parameters file."
      check_serial_number:
        paragraph_1: "Displays the device serial number."
      cloudwalk_update:
        paragraph_1: "This options is used to remotely update the CloudWalk Framework."
      about:
        paragraph_1: "Displays some device information, such as model and CloudWalk Framework version."
      change_password:
        description: "Procedure for changing the default password to access the device configuration menu"
        title: "Password change"
        table_of_contents:
          multiple_devices: "Multiple devices"
          single_device: "Single device"
        introduction: "This guide will walk you through the process of changing the Device configuration menu password, making use of parameters."
        multiple_devices:
          paragraph_1: "To change the default password of multiple devices, it's necessary to add a new parameter on the desired group. The parameter name is <strong>menupassword</strong>, and it accepts any number sequence from four to eight digits."
          paragraph_2: "In the example below, all the logical numbers on the group <strong>CloudWalk</strong> will have the menu password changed from 55555 (default) to the new password <strong>112233</strong>."
        single_device:
          paragraph_1: "To change the default password of a single device, it's necessary to add a new parameter on the desired logical number. As is the group, the parameter name is <strong>menupassword</strong>, and it accepts any number sequence from four to eight digits."
          paragraph_2: "In the example below, the logical number being updated will have the menu password changed from 55555 (default) to the new password <strong>123456</strong>."
    first_launch:
      description: "Procedure for setting up the device after installing the CloudWalk Framework."
      title: "CloudWalk Framework - First launch"
      after_install: "Now that CloudWalk Framework has already been installed on the device, the next step is to perform the <a href='/en/framework/first-launch'>first launch</a> configuration."
      integration:
        paragraph_1: "Now that the device is activated, the next step is to perform an HTTP integration test. Click <a href='/en/integration/http'>here</a> to start the process."
      prerequisites:
        internet_access: "<strong>Computer with internet access:</strong> Necessary to register the logical number and to grant access to the device on CloudWalk"
        framework: "<strong>CloudWalk Framework:</strong> Device with CloudWalk Framework properly installed"
      table_of_contents:
        prerequisites: "Prerequisites"
        language_settings: "Language settings"
        step_1: "Step 1 - Unlocking the serial number"
        step_2: "Step 2 - Register the logical number"
        step_3: "Step 3 - Setting up communication"
        step_4: "Step 4 - Activation"
        integration: "Integration"
      language_settings:
        paragraph_1: "With the newly installed device in hand, the home screen will offer the option to choose the language that will be used during the device activation process:"
        paragraph_2: "Press <strong>1</strong> to use Portuguese or <strong>2</strong> to use English"
      step_1:
        posxml:
          screen_1:
            line_1: "STEP 1 OF 4\n"
            line_2: "\n"
            line_3: "FIRSTLY YOU WILL NEED\n"
            line_4: "TO REGISTER THE\n"
            line_5: "SERIAL NUMBER OF YOUR\n"
            line_6: "DEVICE.\n"
            line_7: "\n"
            line_8: "OK TO CONTINUE"
          screen_2:
            line_1: "RELEASE THIS SERIAL\n"
            line_2: "NUM. ON YOUR MANAGER:\n"
            line_3: "\n"
            line_4: "123-456-789\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "NEED HELP?\n"
            line_8: "www.cloudwalk.io/1"
        paragraph_1: 'After selecting the language (assuming you have selected <strong>English</strong>), the following screen appears:'
        paragraph_2: "This step is important, since in order to have access to CloudWalk, the device serial number should be registered on CloudWalk Manager. Press <strong>OK</strong> to move to the next screen:"
        paragraph_3: "The number <strong>123-456-789</strong> represents a fictitious serial number (an example), which should be used on CloudWalk Manager's Device management section. Follow this procedure:"
        paragraph_4: Access the CloudWalk Manager through <a href='https://manager.cloudwalk.io' class='external'>https://manager.cloudwalk.io</a>
        paragraph_5: Select the section <a href='https://manager.cloudwalk.io/devices' class='external'>Devices</a>
        paragraph_6: Click the button <strong>Grant access to a new device</strong>
        paragraph_7: Enter the serial number exactly as it appears on the screen of the device and click the button <strong>Grant access</strong>
        paragraph_8: "It is necessary to enter the numbers, letters and other characters, <strong>exactly</strong> as it appears on the screen of the device."
        paragraph_9: "After releasing the serial number on CloudWalk Manager, press <strong>OK</strong> to start the next step."
      step_2:
        posxml:
          screen_1:
            line_1: "STEP 2 OF 4\n"
            line_2: "\n"
            line_3: "NOW YOU WILL NEED TO\n"
            line_4: "REGISTER A LOGICAL\n"
            line_5: "NUMBER FOR YOUR\n"
            line_6: "DEVICE.\n"
            line_7: "\n"
            line_8: "OK TO CONTINUE"
          screen_2:
            line_1: "REGISTER A LOGICAL\n"
            line_2: "NUM. ON YOUR MANAGER\n"
            line_3: "AND TYPE IT HERE\n"
            line_4: "\n"
            line_5: ":\n"
            line_6: "\n"
            line_7: "NEED HELP?\n"
            line_8: "www.cloudwalk.io/2"
        paragraph_1: "The second step refers to the logical number registration process:"
        paragraph_2: Access the CloudWalk Manager through <a href='https://manager.cloudwalk.io' class='external'>https://manager.cloudwalk.io</a>
        paragraph_3: Select the section <a href='https://manager.cloudwalk.io/logical_numbers' class='external'>Logical numbers</a>
        paragraph_4: 'Click the button: <strong>New logical number</strong>'
        paragraph_5: 'Enter the logical number (for example 0001) and click the button: <strong>Register logical number</strong>'
      step_3:
        posxml:
          screen_1:
            line_1: "STEP 3 OF 4\n"
            line_2: "\n"
            line_3: "NOW IT IS NECESSARY\n"
            line_4: "TO SETUP THE TYPE OF\n"
            line_5: "COMMUNICATION THAT\n"
            line_6: "WILL BE USED.\n"
            line_7: "\n"
            line_8: "OK TO CONTINUE"
          screen_2:
            line_1: "1 LOCAL NETWORK\n"
            line_2: "2 LANDLINE (PPP)\n"
            line_3: "3 LANDLINE (SDLC)\n"
            line_4: "4 GPRS\n"
            line_5: "5 WIFI\n"
            line_6: "\n"
            line_7: "NEED HELP?\n"
            line_8: "www.cloudwalk.io/3"
        paragraph_1: 'Now that the device serial number and logical number have already been registered on CloudWalk Manager, the next step is to setup the communication:'
        paragraph_2: 'Press <strong>OK</strong> to start the configuration process:'
        paragraph_3: 'As can be seen, there are the following types of communication:'
      step_4:
        posxml:
          screen_1:
            line_1: "STEP 4 OF 4\n"
            line_2: "\n"
            line_3: "NOW YOUR DEVICE WILL\n"
            line_4: "BE ACTIVATED IN OUR\n"
            line_5: "NETWORK AND WILL BE\n"
            line_6: "READY FOR USE.\n"
            line_7: "\n"
            line_8: "OK TO CONTINUE"
          screen_2:
            line_1: "ACTIVATION PROCESS IN\n"
            line_2: "PROGRESS.\n"
            line_3: "\n"
            line_4: "WAIT ...\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: ""
        paragraph_1: "With the device properly prepared, the last step is the activation process."
        paragraph_2: "Press the button <strong>OK</strong> to start the activation process:"
      finish:
        posxml:
          screen_1:
            line_1: "CONGRATULATIONS!\n"
            line_2: "\n"
            line_3: "DEVICE ACTIVATED\n"
            line_4: "SUCCESSFULLY!\n"
            line_5: "\n"
            line_6: "\n"
            line_7: "\n"
            line_8: "OK TO CONTINUE"
        paragraph_1: "At the end of the activation process, the following message should be displayed:"
    ingenico_telium_1:
      description: Step by step process of installing the CloudWalk Framework on terminals Ingenico EFT930G and EFT930S.
      introduction: This guide will walk you through the process of installing the CloudWalk Framework on terminals Ingenico <strong>EFT930G</strong> and <strong>EFT930S</strong>. Be aware of the prerequisites and follow the installation process carefully.
      deprecated: "<strong>Telium 1</strong> (EFT930G and EFT930S) has been deprecated and therefore has no EMV support anymore. The POS terminals can still be used, but they are not allowed to perform financial transactions (Visa, Master, etc). <a href='http://www.emvco.com/approvals.aspx?id=215#I'>More ≫</a>"
      loading_the_framework:
        paragraph_1: 'The models <strong>EFT930G</strong> and <strong>EFT930S</strong> have an entry for an USB adapter on the left side of the terminal. Connect the USB adapter on the entry and then connect the USB stick on the other end, as the picture below:'
        paragraph_2: 'Then follow this procedure:'
        paragraph_3: Restart the terminal holding the key <strong>F4</strong>. The terminal should display the message <strong>USB MASS STORAGE</strong>
        paragraph_4: Wait a few seconds until the terminal show the directory WALK on display
        paragraph_5: Wait for the CloudWalk Framework loading process
        paragraph_6: 'When finished, the terminal will display the following screen:'
        paragraph_7: Then will be presented the first launch setup.
      preparing_the_pendrive:
        paragraph_1: 'To build the CloudWalk Framework setup on an USB stick, follow this procedure:'
        paragraph_2: Connect the USB pendrive to the computer
        paragraph_3: Format the USB stick
        paragraph_4: Extract the CloudWalk Framework package that was downloaded at the beginning of this tutorial
        paragraph_5: In the unzipped folder you will find a folder called 'CloudCloudWalk Framework', copy the folder called Telium lying in it for pendrive
      prerequisites:
        adapter: <strong>USB adapter:</strong> Required for installation. It is possible to purchase one with your supplier.
        operating_system: <strong>Operating System:</strong> Microsoft Windows XP SP3 or newer (Vista, Seven, etc)
        pendrive: <strong>USB memory stick:</strong> A USB pendrive.
      table_of_contents:
        loading_the_framework: Loading the framework on the device
        preparing_the_pendrive: Preparing the USB sticker
        prerequisites: Prerequisites
        wiping_the_device: Cleaning the device
      title: CloudWalk Framework - Ingenico Telium 1
      wiping_the_device:
        paragraph_1: 'Access the OS menu restarting the terminal and pressing the key <strong>f2</strong> quickly as soon as the screen below appears:'
        paragraph_2: 'On the main menu, choose the option <strong>Delete menu</strong>:'
        paragraph_3: 'And then choose the option <strong>Delete application</strong>:'
        paragraph_4: The next screen lists some application installed on the terminal, where <strong>M2OS</strong> is the Telium Manager, which should not be deleted. To delete any other file, select the file to be deleted and press the <strong>GREEN</strong>.
        paragraph_5: <strong>DO NOT</strong> delete the content of the menu <strong>Delete library</strong> or the file <strong>M2OS</strong>, since it could harm the terminal.
      troubleshooting:
        one:
          title: "If the loading process didn't start, please make sure that:"
          paragraph_1: "The USB stick is formatted with <strong>FAT32</strong>."
          paragraph_2: "Just the TELIUM folder is present on the root of the USB pendrive."
        two:
          title: "What is the setup menu password?"
          paragraph_1: "If your device is requesting a password to access the setup menu, this password was previously set by someone. Please get in touch with your the POS supplier."
    ingenico_telium_2:
      description: Step by step process of installing the CloudWalk Framework for Ingenico iCT220, iCT250, iWL220, iWL250 and iWL280.
      introduction: This guide will walk you through the process of installing the CloudWalk Framework on terminals Ingenico <strong>ICT220</strong>, <strong>ICT250</strong>, <strong>IWL220</strong>, <strong>IWL250</strong> and <strong>IWL280</strong>. Be aware of the prerequisites and follow the installation process carefully.
      loading_the_framework:
        paragraph_1: '<strong>ICT220 </strong> and <strong>ICT250</strong> Models contain a USB input located on the bottom of the device, plug in your USB stick as in the picture:'
        paragraph_2: 'IWL220, IWL250 and IWL280 models already have an entry for an USB adapter on the left side of the device. Connect the USB and then connect the USB on the other end, as the image below:'
        paragraph_3: 'Then follow this procedure:'
        paragraph_4: Restart the device and hold <strong>F4</strong> button. The device will display the message <strong>USB MASS STORAGE</strong>
        paragraph_5: Wait a few seconds until the device show the WALK directory on display
        paragraph_6: Select the WALK directory pressing <strong>GREEN</strong>
        paragraph_7: Wait for the process to load CloudWalk Framework package
        paragraph_8: 'When finished, the device will display the following screen:'
        paragraph_9: Then will be presented the first launch setup.
      preparing_the_pendrive:
        macosx: <strong>Mac OS X users:</strong> To avoid problems with hidden files when unzipping the CloudWalk Framework package, it is recommended to use the free app <a href='https://itunes.apple.com/br/app/izip-archiver/id478738838' class='external'>iZip Archiver</a> to uncompress the package.
        paragraph_1: 'To load the CloudWalk Framework package on the USB pendrive, follow this procedure:'
        paragraph_2: Connect the USB pendrive to the computer
        paragraph_3: Format the pendrive
        paragraph_4: Extract the CloudWalk Framework downloaded at the beginning of this tutorial
        paragraph_5: n the unzipped folder you will find a folder called 'CloudCloudWalk Framework', copy the folder called Telium lying in it for pendrive
      prerequisites:
        adapter: '<strong>USB Adapter:</strong> Required only for installation on IWL220, IWL250 and IWL280'
        operating_system: '<strong>Operating System:</strong> Microsoft Windows XP SP3 or later.'
        pendrive: <strong>USB memory stick:</strong> A USB pendrive.
      table_of_contents:
        loading_the_framework: Loading the framework on the device
        preparing_the_pendrive: Preparing pendrive
        prerequisites: Prerequisites
        wiping_the_device: Cleaning the device
      title: CloudWalk Framework - Ingenico Telium 2
      wiping_the_device:
        paragraph_1: 'Access the menu of the OS restarting the device and pressing <strong>F</strong> and the screen below will appear:'
        paragraph_2: 'From the main menu, select the <strong>Delete menu</strong> option:'
        paragraph_3: 'Then select the menu <strong>Delete application</strong>:'
        paragraph_4: The next screen lists some applications installed on the device where <strong> M2OS </strong> refers to Telium Manager, that should not be deleted. To delete any other file, select the file to be deleted and press the <strong>GREEN</strong> button.
        paragraph_5: <strong>DO NOT</strong> delete the contents of the menu <strong>Delete library</strong> or file <strong>M2OS</strong>, otherwise the device may be damaged.
      troubleshooting:
        one:
          title: "If the loading process didn't start, please make sure that:"
          paragraph_1: "The USB stick is formatted with <strong>FAT32</strong>."
          paragraph_2: "Just the TELIUM folder is present on the root of the USB pendrive."
        two:
          title: "What is the setup menu password?"
          paragraph_1: "If your device is requesting a password to access the setup menu, this password was previously set by someone. Please get in touch with your the POS supplier."
    verifone_evo:
      description: Step by step process of installing the CloudWalk Framework for Verifone VX 520 and VX 680.
      identify_os:
        os_version: Operating System Version
        eos_version: Extended Operating System Version
        paragraph_1: To identify the version of the operating system that is installed on your device, note the second line of the display screen, considering the last two characters. This screen is displayed when the device is connected.
        paragraph_2: Keep the operating system of your devices up to date. Devices with outdated operating system can be slow and may also have communication problems.
        paragraph_3: 'Minimum operating system requirements for installing the CloudWalk Framework:'
        pos_model: Model POS
      installing_vx805_and_vx820: To load the framework on terminals <strong>VX 805</strong> and <strong>VX 820</strong>, check out <a href='/en/framework/verifone-evo-vx805'>this guide</a>.
      installing_vx805_and_vx820_intro: This guide will walk you through the process of installing the CloudWalk Framework on terminals Verifone <strong>VX 805</strong> and <strong>VX 820</strong>. Be aware of the prerequisites and follow the installation process carefully.
      introduction: This guide will walk you through the process of installing the CloudWalk Framework on terminals Verifone <strong>VX 520</strong> and <strong>VX 680</strong>. Be aware of the prerequisites and follow the installation process carefully.
      introduction_cable_terminals: This guide will walk you through the process of installing the CloudWalk Framework on terminals Verifone VX 805 and VX 820. Be aware of the prerequisites and follow the installation process carefully.
      loading_the_framework:
        paragraph_1: To start charging, run <strong>carrega_na_flash.bat</strong> to load the certificates and the CloudWalk Framework.
        paragraph_2: 'The following DOS screen will appear:'
        paragraph_3: This screen shows the continuation of downloading the framework to the device. No action is required, since the commands are executed automatically.
        paragraph_4: 'While the charge is made, the device displays the progress of the case:'
        paragraph_5: At the end of the charging process, the DOS screen will close and the device will restart a few times, and will then present the first launch setup.
      loading_the_framework_usb:
        paragraph_1: 'On terminals <strong>VX 520</strong>, connect the USB stick on the back of the terminal as shown below:'
        paragraph_2: 'On terminals <strong>VX 680</strong>, the place to connect the USB stick is located on the recharge cable, as shown below:'
        paragraph_3: 'The terminal will detect the connected stick, and the following screen is displayed:'
        paragraph_4: Choose the option 1, Yes, to begin the loading process.
        paragraph_5: After loading all the files, the terminal will request to remove the stick.
        paragraph_6: Remove the pendrive and press Enter (green). The device will restart a few times, and then show the first launch setup.
      preparing_the_device:
        paragraph_1: Unpack the CloudWalk Framework from the choosen download directory.
        paragraph_2: This directory must be local directory (e.g. C:\temp\dir), and not network directory (\\)
        paragraph_3: 'Before performing any file, you must prepare your device to download the package. The first thing that should be checked is whether the charge cable is properly connected to the serial port on your computer and the <strong>RS 232</strong> port of the device as the image below:'
        paragraph_4: <strong>Attention!</strong>
        paragraph_5: This step is the one with the highest rate of errors because many people connect the serial cable to the wrong port on the POS or the wrong port on the PC, if it has two COM ports.
        paragraph_6: Another important point is that the COM1 port on your computer may be in use by another process which will cause an error in the loading of the CloudWalk Framework, and because the download is only possible through the COM1 port, it must be correctly configured in Windows.
      preparing_the_device_usb:
        paragraph_1: 'After turning on the terminal and after displaying the splash screen that displays the version of the operating system, the following screen should be shown:'
      preparing_the_pendrive:
        paragraph_1: 'To load the CloudWalk Framework package on the USB pendrive, follow this procedure:'
        paragraph_2: Connect the USB pendrive to the computer
        paragraph_3: Format the pendrive (format FAT32)
        paragraph_4: 'Unzip the downloaded CloudWalk Framework package'
        paragraph_5: 'Copy the file: verifone_evo_usb/lib_cless/model(VX 520 or VX 680)/<strong>VERIFONE.zip</strong> to the pendrive (on root)'
        paragraph_6: 'Connect the USB pendrive to the POS and after being recognized select the option Yes'
        paragraph_7: 'Wait for the files to load, remove the pendrive and repeat the process with the file: verifone_evo_usb/framework/<strong>VERIFONE.zip</strong>, replacing the one copied on step 4 and repeat step 5'
      prerequisites:
        cable: <strong>Charge cable:</strong> USB or Serial
        operating_system: <strong>Operating System:</strong> Microsoft Windows XP SP3 or later.
        pendrive: <strong>USB memory stick:</strong> A USB pendrive.
        serial_port: <strong>Serial port or USB:</strong> available and configured as <strong>COM1</strong>
      table_of_contents:
        identify_os: Checking the device OS version
        loading_the_framework: Loading the framework on the device
        preparing_the_device: Preparing the device
        preparing_the_pendrive: Preparing the USB stick
        prerequisites: Prerequisites
        wiping_the_device: Cleaning the device
      title: CloudWalk Framework - Verifone EVO
      wiping_the_device:
        paragraph_1: 'With the cable properly connected, power on the device. In the model VX 520 press the F2 and F4 at the top right of the device. In the model VX 680 press the enter (green) and 7 simultaneously, and the following screen will appear:'
        paragraph_10: Press 1 to see the next screen.
        paragraph_11: Press 2, then press 2 again to choose the COM1, so that the device will be awaiting the execution of any file from the directory CloudWalk Framework, which was previously uncompressed.
        paragraph_12: The first file to be executed is <strong>limpa_terminal.bat</strong>. This file clears any information that is in the device, so there is no 'junk' in the device memory when it loads new framework.
        paragraph_13: 'When you run the file limpa_terminal.bat you will see the following DOS screen:'
        paragraph_14: This screen shows that the device is being cleaned. No action is required, since the commands are executed automatically. At the end the screen closes and the device will reboot.
        paragraph_15: 'After being restarted, the following screen appears:'
        paragraph_16: This screen indicates that the device is waiting for the execution of the file (CloudWalk Framework).
        paragraph_2: This is the first screen of the device before receiving the package. You must enter a password to access the configuration menu.
        paragraph_3: If you do not know the password, contact your device supplier.
        paragraph_4: 'After entering the password, press the green button (OK) to access the next screen:'
        paragraph_5: 'The menu option to download the CloudWalk Framework is the DOWNLOAD option. Press 3 in the setup menu. The following screen appears:'
        paragraph_6: 'Press the green button (OK) to move to the next screen:'
        paragraph_7: Enter the password again.
        paragraph_8: Press the green button (OK) to select the type of download.
        paragraph_9: Press 1 to select Single App and move to the option screen.
      troubleshooting:
        one:
          title: "If the loading process didn't start, please make sure that:"
          paragraph_1: "The USB stick is formatted with <strong>FAT32</strong>."
          paragraph_2: "Just the file VERIFONE.zip is present on the root of the USB pendrive."
    verifone_verix:
      description: Step by step process of installing the CloudWalk Framework for Verifone Vx 510, Vx 610 and Vx 670.
      identify_os:
        os_version: Operating System Version
        paragraph_1: To identify the version of the operating system that is installed on your device, note the second line of the display screen, considering the last two characters. This screen is displayed when the device is connected.
        paragraph_2: Keep the operating system of your devices up to date. Devices with outdated operating system can be slow and may also have communication problems.
        paragraph_3: 'Minimum system requirements for installing the operating CloudWalk Framework:'
        pos_model: Model POS
      introduction: This guide will walk you through the process of installing the CloudWalk Framework on terminals Verifone <strong>Vx 510</strong>, <strong>Vx 610</strong> and <strong>Vx 670</strong>. Be aware of the prerequisites and follow the installation process carefully.
      loading_the_framework:
        paragraph_1: To start charging, run <strong>carrega_na_flash.bat</strong> to load the certificates and the CloudWalk Framework.
        paragraph_2: 'The following DOS screen will appear:'
        paragraph_3: This screen shows the continuation of downloading the framework to the device. No action is required, since the commands are executed automatically.
        paragraph_4: 'While the charge is made, the device displays the progress of the case:'
        paragraph_5: At the end of the charging process, the DOS screen will close and the device will restart a few times, and will then present the first launch setup.
      preparing_the_device:
        paragraph_1: Unpack the CloudWalk Framework from the download directory.
        paragraph_2: This directory must be a local directory (eg C:\temp\dir), and not a network directory (\\).
        paragraph_3: 'Before performing any file, you must prepare the device to download the package. The first thing that should be checked is whether the charge cable is properly connected to the serial port on your computer and the <strong>RS 232</strong> port or the device as the image below:'
        paragraph_4: <strong>Attention!</strong>
        paragraph_5: This step is the one with the highest rate of errors because many people connect the serial cable to the wrong port on the POS or the wrong port on the PC, if it has two COM ports.
        paragraph_6: Another important point is that the COM1 port on your computer may be in use by another process, causing error in the load time of the CloudWalk Framework, and how the download is only possible through COM1, it must be correctly configured in Windows.
      prerequisites:
        cable: <strong>Charge Cable for Verifone Verix 510 and 610:</strong> If you are using the device Verix 670, it will require a special adapter which can be requested with your device supplier.
        operating_system: <strong> Operating System:</strong> Microsoft Windows XP SP3 or later.
        serial_port: <strong>Serial port or USB:</strong> available and configured as <strong>COM1</strong>
      table_of_contents:
        identify_os: Checking the device OS version
        loading_the_framework: Loading the framework on the device
        preparing_the_device: Preparing the device
        prerequisites: Prerequisites
        wiping_the_device: Cleaning the device
      title: CloudWalk Framework - Verifone Verix
      wiping_the_device:
        paragraph_1: 'With the cable properly connected, turn the device on the power cord. In the model VX 520 press the F2 and F4 at the top right of the device. In the model VX 680 press the enter (green) and 7 simultaneously, and the following screen will appear:'
        paragraph_10: 'Press F3 to select FULL option and move to the screen of the selection of the transfer mode:'
        paragraph_11: 'Press F3 to choose  COM1, so that the device will be awaiting the execution of any file from CloudWalk Framework directory, which was earlier unzipped:'
        paragraph_12: The first file to be executed is <strong>limpa_terminal.bat</strong>. This file clears any information that is in the device, so it is no 'junk' in the device memory when it loads new framework.
        paragraph_13: 'When you run the file limpa_terminal.bat you will see the following DOS screen:'
        paragraph_14: This screen shows that the device is being cleaned. No action is required, since the commands are executed automatically.
        paragraph_15: At the end of execution, the screen closes and the device will reboot.
        paragraph_16: 'After being restarted, the following screen appears:'
        paragraph_17: This screen indicates that the device is waiting for the execution of the file (CloudWalk Framework).
        paragraph_2: This is the first screen of the device before receiving the package. You must enter a password to access the configuration menu.
        paragraph_3: If you do not know the password, contact your device supplier.
        paragraph_4: 'After entering the password, press the green button (OK) to access the next screen:'
        paragraph_5: 'Press the red buttons just below the little arrow that appears on the display to scroll the menu and access more options, as shown below:'
        paragraph_6: 'The menu option to download the CloudWalk Framework is the DOWNLOAD option. Press 3 in the setup menu. The following screen appears:'
        paragraph_7: 'Press the green button (OK) to move to the next screen:'
        paragraph_8: Enter the password again.
        paragraph_9: Press the green button (OK) to select the type of download.
    pax_d200:
      title: CloudWalk Framework - PAX D200 (Windows)
      description: Step by step process of installing the CloudWalk Framework for PAX D200.
      introduction: This guide will walk you through the process of installing the CloudWalk Framework on the terminal PAX D200. Be aware of the prerequisites and follow the installation process carefully.
      note: "Guide for Windows users: <a href='/en/framework/pax-d200'>PAX D200 Windows</a> <i class='fa fa-windows'></i>"
      loading_the_framework:
        paragraph_1: To start the loading process, open the TermAssist
        paragraph_2: 'With the device connected to the computer, select <em>Setting</em> and then select the option <strong>Serial Port</strong> in the <em>Connection Mode</em> field.'
        paragraph_3: 'Next on the field <em>Serial Port Setting</em> click on the refresh icon and you will see which port your device is using'
        paragraph_4: 'After that, click on the <em>Play</em> button, to connect to the device'
        paragraph_5: 'Now go to the <em>Installer</em> option, click on <strong>Select Installation Files</strong> and select the framework file, as shown below:'
        paragraph_6: 'To proceed with the loading process click on the download button, according to the image below:'
      preparing_the_device:
        paragraph_1: "Unpack the CloudWalk Framework from the download directory"
        paragraph_2: This directory must be a local directory (eg C:\temp\dir), and not a network directory (\\)
        paragraph_3: 'Before running (double click) anything, you must prepare the device to download the package. The first thing that should be checked is whether the charge cable is properly connected to the serial port of your computer and the USB port of the device'
        paragraph_4: "Enter the device's main menu. To achieve this, turn on the device, repeatedly press the number <strong>2</strong> key and the device will enter the following screen:"
      prerequisites:
        cable: <strong>Cable:</strong> 5 pin USB
        operating_system: <strong>Operating System:</strong> Microsoft Windows XP SP3 or higher (Vista, 7, etc.)
        linux: <strong>Operating System:</strong> Ubuntu/Debian
        software: "<strong>TermAssist:</strong> Available at <a href='https://dl.cloudwalk.io/util/term-assist.zip' class='external'>https://dl.cloudwalk.io/util/term-assist.zip</a>"
        cltool: "<strong>XCB:</strong> Available at <a href='https://dl.cloudwalk.io/util/xcb-with-driver.zip' class='external'>https://dl.cloudwalk.io/util/xcb-with-driver.zip</a>"
      table_of_contents:
        loading_the_framework: Loading the framework on the device
        preparing_the_device: Preparing the device
        prerequisites: Prerequisites
      linux:
        title: CloudWalk Framework - PAX D200 (Linux)
        note: "Guide for Linux users: <a href='/en/framework/pax-d200-linux'>PAX D200 Linux</a> <i class='fa fa-linux'></i>"
        path: This directory must be a local directory (eg ~/temp/), and not a network directory  (\\).
        step_1: "Before issuing XCB commands, it is helpful to know what emulator/device instances are connected to the XCB server. You can generate a list of attached emulators/devices using the devices command:"
        step_2: "Use the serial mode to connect the emulator or device"
        step_3: "Install the application package:"
  manager:
    apps:
      description: The concept of Application in the CloudWalk Manager defines the applications available for use by devices. How to submit an application in 3 steps.
      functionality:
        paragraph_1: The concept of <strong>Application</strong> in the CloudWalk Manager, as its name suggests, defines the applications available to run on the devices.
        paragraph_2: These applications in practice are generated by the <a href='/en/introduction/ide'>CloudWalk IDE</a>, whenever a <a href='/en/introduction/posxml'>POSXML</a> application is compiled.
      interface:
        paragraph_1: 'To submit an application, just follow this procedure:'
        paragraph_2: In the CloudWalk Manager, click the menu <strong>Applications</strong>.
        paragraph_3: Click the <strong>New Application</strong> button.
        paragraph_4: 'Fill in the form:'
        paragraph_5: <strong>Name</strong> is a unique reference on the system (attention to naming rule)
        paragraph_6: <strong>Brief Description</strong> is a name used to identify the application in CloudWalk Manager
        paragraph_7: <strong>Authorizer IP address or URL</strong> is the address of the authorization server
        paragraph_8: <strong>Application should be displayed in the menu of services.</strong> Define whether or not the application will appear on the device screen. If this option is selected, it is also necessary to set the name that will be displayed.
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
      title: CloudWalk Manager - Applications
    assets:
      description: 'Any file that is different from a POSXML application can be sent to the device. Examples of files that can be sent: Pictures, Texts, Zips.'
      functionality:
        paragraph_1: 'Any file that is different from a POSXML application can be sent to the device through this functionality, using the command <a href="/posxml/commands/downloadfile" class="command">downloadfile</a>. Examples of files that can be sent:'
        paragraph_2: <strong>Pictures:</strong> Logo for the device screen or for the printed ticket
        paragraph_3: <strong>Texts:</strong> message files, names, etc.
        paragraph_4: Anything that could be unzipped directly on the POS.
        paragraph_5: Before updating a file, <strong>clean your browser's cache</strong>, to prevent sending old version of the file that could be maintained by the browser.
      interface:
        paragraph_1: 'To submit a file, just follow this procedure:'
        paragraph_2: Click the menu <strong>File</strong>.
        paragraph_3: Click the <strong>New File</strong> button.
        paragraph_4: 'Fill in the form:'
        paragraph_5: <strong>Brief Description</strong> is a name used for internal reference
        paragraph_6: <strong>Choose the file</strong> to be stored on CloudWalk which can later be downloaded to devices
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
      title: CloudWalk Manager - Files
    devices:
      description: To allow a particular device to contact with the CloudWalk servers, it is first necessary to release access to this device. How to release a device in 3 steps.
      functionality:
        paragraph_1: For safety reasons, by default, a device cannot access CloudWalk. To allow a particular device to connect with CloudWalk servers, it is first necessary to grant access to this device, and this proccess is made through this feature.
      interface:
        paragraph_1: 'To grant access to a device, just follow this procedure:'
        paragraph_2: Click the menu <strong>Devices</strong>.
        paragraph_3: Click the <strong>Grant access to a new device</strong> button.
        paragraph_4: 'Fill in the form:'
        paragraph_5: '<strong>Serial Number</strong> is the number found on the back of the device, usually defined as: <strong>Serial N</strong>, <strong>S/N</strong> or <strong>Serial Number</strong>.'
        paragraph_6: (Optional) Click the tab <strong>release batch (file)</strong> to release many serial numbers at once.
        paragraph_7: Enter the file (.txt) containing a list of serial numbers (one per line).
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
      title: CloudWalk Manager - Devices
    groups:
      description: Group is the association of one or more logical numbers with one or more applications. How to register a group and add parameters to it.
      functionality:
        paragraph_1: '<strong>Group</strong> is the association of one or more logical numbers with one or more applications. The group is referenced in two distinct stages, which are:'
        paragraph_2: <strong>Interface of Logical Numbers:</strong> Where logical numbers are registered and associated in groups;
        paragraph_3: <strong>Interface of Groups:</strong> Where applications are associated.
      interface:
        paragraph_1: 'To register a group, please follow this procedure:'
        paragraph_2: Click the menu <strong>Groups</strong>.
        paragraph_3: Click the <strong>New Group</strong> button.
        paragraph_4: 'Fill in the form:'
        paragraph_5: <strong>Group Name</strong> is the group identification
      parameters:
        paragraph_1: It is possible to add parameters to a group. For example, the group <strong>AREA 51</strong> has several logical numbers and sales applications. This group then has a parameter called <strong>SPECIAL_TICKET</strong>, with the value <strong>1</strong>. Thus, all the devices belonging to this group inherit this parameter.
        paragraph_2: The logic of the sales application makes a validation on the parameter <strong>SPECIAL_TICKET</strong>, and since the value is <strong>1</strong>, the application prints a special ticket, with additional company information for purposes of disclosure.
        paragraph_3: After long analysis by the strategic team, they came to the conclusion that the cost of printing this special, more detailed ticket, is not worth it. Analysts then decided to change the parameter <strong>SPECIAL_TICKET</strong> value from <strong>1</strong> to <strong>0</strong>. Ready! Now all devices belonging to the group <strong>AREA 51</strong> will no longer print the special tickets.
        paragraph_4: In order of preference, the parameter of a logical number overlaps the parameter of a group.
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
        parameters: Parameters
      title: CloudWalk Manager - Groups
    logical_numbers:
      description: Logical Number is the device ID, and is directly associated with a Group. How to register a logical number and add parameters to it.
      functionality:
        paragraph_1: 'The <strong>Logical Number</strong> is the ID of the device, and is directly associated with a <strong>Group</strong>. The logical number is referenced in two distinct stages, which are:'
        paragraph_2: <strong>Interface of Logical Numbers:</strong> where logical numbers are registered and associated in groups.
        paragraph_3: <strong>Device:</strong> Accessing the setup menu of the POS, on the option <strong>Logical Number</strong>
        paragraph_4: Do not confuse <strong>Logical Number</strong> with <strong>Serial Number</strong>. The logical number is used to identify the device while the serial number is used to grant access to the device on the CloudWalk network.
      interface:
        paragraph_1: 'To register a logical number, just follow this procedure:'
        paragraph_2: Click the menu <strong>Logical Numbers</strong>.
        paragraph_3: Click the <strong>New logical number</strong> button.
        paragraph_4: 'Fill in the form:'
        paragraph_5: <strong>Logical number</strong> is the ID of the device
      parameters:
        paragraph_1: You can add parameters to a logical number. For example, the logical number <strong>100022</strong> is used on the device on the restaurant 'Chop Suey' of Mr. Li Hanzo. This logical number then has a parameter called <strong>NUM_PARCELS</strong>, with the value <strong>1</strong>.
        paragraph_2: The logic of the sales application makes a validation on the parameter <strong>NUM_PARCELS</strong>, and since the value is <strong>1</strong>, the application offers only the payment option 'on cash'.
        paragraph_3: The restaurant of Mr. Li, presenting excellent results, drew the attention of the strategic team of restaurants 'Chop Suey', and they decided to offer the possibility to Mr. Li to accept payment in installments. For this change, it is enough that someone from the strategic staff alters the parameter <strong>NUM_PARCELS</strong> value from <strong>1</strong> to <strong>3</strong>. Ready!
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
        parameters: Parameters
      title: CloudWalk Manager - Logical numbers
    push_notifications:
      title: "CloudWalk Manager - Push notifications"
      description: "Send instant notifications to your POS terminals"
      table_of_contents:
        functionality: "Functionality"
        interface: "Interface presentation"
      functionality:
        paragraph_1: "Push notifications are used to interact with POS terminals. Notifications are instantly delivered, and if the POS terminal is out of reach, the notification remains on a queue for up to 35 days before being removed."
        paragraph_2: "Currently, there are two types of notifications: Instant display and Processing."
        instant_display: "Instant display"
        paragraph_3: "The notification is simply displayed on the POS terminal screen."
        use_cases: "Practical use cases:"
        use_case_1: "Welcome the POS operator;"
        use_case_2: "Notify the POS operator that there is a scheduled update;"
        use_case_3: "Request the POS operator to get in touch with the customer support."
        processing: "Processing"
        paragraph_4: "The notification will not be displayed on the POS screen. Instead, the notification will be stored on the POS file system, on the file <strong>cw_notifications.dat</strong> under the key <strong>processing_message</strong>, so that your application can dynamically process it."
      interface:
        paragraph_1: 'To send a push notification, follow this procedure:'
        paragraph_2: Select the menu option <strong>Push notifications</strong> on CloudWalk Manager.
        paragraph_3: Enter the message (ASCII characters only).
        paragraph_4: Select <strong>Group</strong> and click on the group that will receive the notification.
        paragraph_5: Select <strong>Scope</strong> and click on Specific logical number or All logical numbers. For Specific logical numbers a new entry field will open below where you can enter a comma separated list of logical numbers.
        paragraph_6: Select <strong>Type</strong> and click to choose Instant display or Processing.
        paragraph_7: "Optional: If the type \"Processing\" was selected, select <strong>Application</strong> and click on the application responsible to handle the notification."
    transactions_monitor:
      description: The transactions monitor displays all the operations that have been performed. Just specify the record type in the search filters.
      functionality:
        paragraph_1: The transactions monitor displays all the operations that have been performed by all your devices. You just need to specify the record type in the search filters.
      interface:
        paragraph_1: 'To access the transactions monitor, just follow this procedure:'
        paragraph_2: Click the menu <strong>Transactions monitor</strong>.
        paragraph_3: Click the <strong>Filters</strong> button.
        paragraph_4: 'Specify the type of record:'
        paragraph_5: <strong>Requests -</strong> delimit the time interval of the query
        paragraph_6: <strong>Record Type -</strong> define the type of record to be consulted (download, transaction, etc.)
        paragraph_7: <strong>Status -</strong> define the status of the records (successful, error, etc.)
      table_of_contents:
        functionality: Functionality
        interface: Interface presentation
      title: CloudWalk Manager - Transactions monitor
  guides:
    transactions_patterns:
      intro:
        title: "Transaction patterns"
        description: "Learn about your transaction patterns automatically identified by our service."
        table_of_contents:
          introduction: "Introduction"
          pattern: "What is a pattern?"
          anomaly: "What is an anomaly?"
          algorithm: "The core algorithm"
        introduction:
          paragraph_1: "You can see your transaction logs in real-time in CloudWalk Manager at <a href='https://manager.cloudwalk.io/realtime' class='external'>manager.cloudwalk.io/realtime</a>, but it is too difficult to detect any pattern just by looking at the scrolling lines."
          paragraph_2: "To help us, only humans in this task, we created an artificial intelligence service that watches, in real-time, each log line generated by your transactions, looking for patterns and anomalies within them."
        pattern:
          paragraph_1: "Our algorithm looks for patterns, but what is a pattern?"
          paragraph_2: "For our purposes, a pattern is a set of somewhat similar transactions. To discover which transactions are similar, our algorithm keeps an eye on the size of messages sent by your POS to your authorizer and on the size of messages received in response. A pattern is then a set of transactions with similar sized messages. It's the algorithm's job to find those similar transactions."
          paragraph_3: "To help the algorithm, we separate all your transactions by application, meaning that any pattern created is a transaction pattern for a specific application. More on that later!"
        anomaly:
          paragraph_1: "An anomaly is a transaction that does not fit in any previously seen pattern. So an anomalous transaction has messages with unusual (until then) sizes. As our algorithm keeps learning from your transactions, it will eventually recognize a recurring anomaly as a new pattern, and will stop giving you any warnings about it."
          paragraph_2: "Be cautious when giving meaning to an anomalous transaction. It does not necessarily mean something bad has happened. As an example, when you start testing a new application, you will probably see a lot of anomalous transactions, as they won't fit any previously seen pattern."
        algorithm:
          paragraph_1: "At the core of the service there is an algorithm called <em>density-based spatial clustering of applications with noise</em> (<a href='http://www.wikiwand.com/en/DBSCAN' class='external'>DBSCAN</a>), which we modified to work efficiently with discrete streaming data (as those from your logs), calling it <em>discrete density-based spatial clustering of applications with noise</em> (DDBSCAN). Our DDBSCAN implementation is available as a <a href='https://pypi.python.org/pypi/ddbscan/' class='external'>Python package</a> and its source code is open at <a href='https://github.com/cloudwalkio/ddbscan' class='external'>Github</a>."
        next: "Tutorial overview"
      overview:
        title: "Transaction patterns - Tutorial overview"
        description: "Learn in this tutorial how to access your transaction patterns and anomalies."
        paragraph_1: "In this tutorial you will learn: <ul><li>how to access a report with your latest anomalous transactions,</li><li>how to see all your transaction patterns and anomalies in a nice chart,</li><li>how to see configure your models, and,</li><li>how to receive notifications via email or webhook when something anomalous happens.</li></ul>"
        image_1: "<img src='/img/en/guides/transactions_patterns/overview.gif' class='img-tutorial img-polaroid' alt='Anomalies tab' />"
        paragraph_2: "This is a service integrated into CloudWalk Manager and you can access it at <a href='http://manager.cloudwalk.io/transactions/patterns' class='external'>manager.cloudwalk.io/transactions/patterns</a>."
        paragraph_3: "You won't see anything at this location unless you have made at least one transaction using your CloudWalk account."
        paragraph_4: "Let's get started!"
        previous: "Introduction"
        next: "Anomalies report"
      anomalies_report:
        title: "Transaction patterns - Anomalies report"
        description: "Learn how to access a report with your latest anomalous transactions."
        paragraph_1: "When accessing the anomalies tab, you will see a screen similar to this:"
        image_1: "<img src='/img/en/guides/transactions_patterns/report.png' class='img-tutorial img-polaroid' alt='Anomalies tab' />"
        paragraph_2: "This is the default tab you arrive at when you access the transaction patterns URL."
        paragraph_3: "As you can see in the above image, we highlight the time when we detected the last anomaly."
        paragraph_4: "Down the screen you can see a table with the ten last anomalies detected. You can expand each line of the table to see more details about the corresponding transaction by clicking on the plus sign. The details for the transaction includes time, application name, serial number, size and message buffers for the sent data and the received one. This is helpful to see exactly what triggered the anomaly detector, so that you can investigate it further."
        image_2: "<img src='/img/en/guides/transactions_patterns/report.gif' class='img-tutorial img-polaroid' alt='Anomalies tab' />"
        paragraph_5: "Now, let's take a look at a graphical representation of our transactions!"
        previous: "Tutorial overview"
        next: "Patterns chart"
      patterns_chart:
        title: "Transaction patterns - Patterns chart"
        description: "Learn how to access a chart with your transaction patterns."
        table_of_contents:
          interface_presentation: "Interface presentation"
          chart_interaction: "Chart interaction"
          transactions_stacks: "Transactions stacks"
          parameters: "Understanding the parameters"
          play_with_it: "Play with it!"
        interface_presentation:
          paragraph_1: "When accessing the patterns tab, you will see a screen similar to this:"
          image_1: "<img src='/img/en/guides/transactions_patterns/patterns.gif' class='img-tutorial img-polaroid' alt='Patterns tab' />"
          paragraph_2: "This nice colorful chart is a representation of your transactions. The horizontal axis corresponds to the size of the message sent by your POS and the vertical axis corresponds to the size of the message received in response. Each circle represents a transaction with specific sizes for the sent and received messages."
          paragraph_3: "The colorful circles represent patterns: same color transactions belong to the same pattern. You can see some smaller circles are the same color as the larger ones: they also belong to same pattern, but they barely made it into the pattern."
          paragraph_4: "The little gray circles are all anomalous transactions and don't belong to any pattern. The little gray squares represents the last ten anomalies."
          paragraph_5: "The big square is your latest transaction, and if it is grey, it's an anomalous transaction."
        chart_interaction:
          paragraph_1: "Here are all the ways you can interact with the chart:"
          list:
            item_1: "You can hover your mouse over any point to see more details about the transaction."
            item_2: "You can click on the point to see even more information: it will show the message buffers."
            item_3: "You can drag the graph panel to see transactions outside the default region represented."
            item_4: "You can also use your mousewheel to zoom in/out."
        transactions_stacks:
          paragraph_1: "Notice that it can happen that one single circle represents more than one transaction."
          paragraph_2: "As an example, if you are sending pings from your POS to your server, you expect the same messages being sent and received each time, so their circles get stacked in the graph."
          paragraph_3: "When this situation arises, you can hover the mouse over the circle representing the transaction to see how many times a transaction with same message size was seen, along with other information, like the time of it's last occurrence. You can also click on it to see the message buffer of its last ocurrence."
        parameters:
          paragraph_1: "We can set our model parameters by clicking on the cog in front of the application name. You will see two sliders that can be used to change some parameters of your detector."
          paragraph_2: "Our algorithm relies on two parameters that effectively setup its sensitiveness, one of them controlling how easy/hard it is to flag two transactions as similar and the other controlling how many of these similar transactions we need to define a new pattern:"
          list:
            item_1: "<strong>What amount of similar transactions defines a pattern:</strong> this parameter controls how easy/hard it is for the algorithm to define a new pattern. If we say a small amount of similar transactions defines a pattern (slider to the left), then the algorithm will create new patterns after seeing few similar transactions. On the other extreme, setting this parameter to many similar transactions defining a pattern (slider to the right), the algorithm will have to see many similar transactions occuring before saying they form a pattern. In summary, as the slider goes left to right we will be detecting less to more anomalies, or alternatively, more to less patterns."
            item_2: "<strong>How similar a set of transactions should be in order to define a pattern:</strong> this parameter controls how easy/hard it is for two transactions to be considered as similar. If we say they need to be little similar (slider to left), then it will flag transactions as similar more easily, i.e., it will flag transactions with message sizes not so similar as similar. On the other extreme, saying the transactions need to be very similar (slider to right), means the algorithm will be more selective when flaging transactions as similar, i.e., it will only flag as similar transactions with close messages sizes. Oversimplifying, as the slider goes left to right we will be detecting less to more anomalies, or alternatively, more to less patterns."
        play_with_it:
          paragraph_1: "To you get a better sense of the effect of each parameter in the algorithm, we created a simulation which you can interact with. Just play with the sliders:<br>"
          paragraph_2: "If you are having trouble understanding it, remember that each circle in this chart represents one transaction, each pattern being represented by its unique color: circles with same color belongs to same pattern. The small sized gray circles represents anomalous transactions and don't belong to any pattern."
          paragraph_3: "Notice that when the parameters are somewhere in the middle of the scale we get reasonably patterns, so this may be the best setting for you. In fact, this is our default settings."
          simulation:
            title: "Set parameters"
            parameter_1:
              title: "What amount of similar transactions defines a pattern?"
              right: "Many"
              left: "Few"
            parameter_2:
              title: "How similar transactions should be to define a pattern?"
              right: "Very"
              left: "Little"
        previous: "Anomalies report"
        next: "Advanced settings"
      advanced_settings:
        title: "Transaction patterns - Advanced settings"
        description: "Learn how to set the time interval to look for patterns."
        paragraph_1: "When accessing the advanced settings tab, you will see a screen similar to this:"
        image_1: "<img src='/img/en/guides/transactions_patterns/advanced.png' class='img-tutorial img-polaroid' alt='Anomalies tab' />"
        paragraph_2: "In this screen you can set how many months in the past to look for transaction patterns for each application."
        paragraph_3: "Using the image above as an example, we see that the application <em>emc2.posxml</em> is using transactions from the past three months to create its model."
        previous: "Patterns chart"
        next: "Setting notifications"
      notifications_settings:
        title: "Transaction patterns - Setting notifications"
        description: "Learn how to setup an e-mail or webhook to receive anomalous transactions notifications."
        table_of_contents:
          interface: "Interface presentation"
          setting_email: "Setting an e-mail"
          setting_webhook: "Setting a webhook"
        interface:
          paragraph_1: "This is what you will find when accessing the settings tab:"
          image_1: "<img src='/img/en/guides/transactions_patterns/settings.gif' class='img-tutorial img-polaroid' alt='Notifications tab' />"
          paragraph_2: "In this screen you can setup notifications to be sent by us in case anomalous transactions are caught."
          paragraph_3: "Currently, there are two notifications mechanisms: e-mail and webhook (via HTTP Post). You can activate one, another or both."
        setting_email:
          paragraph_1: "To set an e-mail, just select the notification type as e-mail and type your e-mail in the appropriate field. If you are registered in more than one company, you can subscribe to receive notifications for each one by accessing this setting while logged into each account."
          paragraph_2: "To keep things simple, we only allow subscription of one e-mail per company, so if you want us to send notifications to a group of people, you can create an e-mail group with your provider."
        setting_webhook:
          paragraph_1: "To set a webhook, just select the notification type as HTTP Post and type your webhook's URL in the URL field."
          paragraph_2: "If we catch any anamolous transaction, we will send you a JSON payload with a structure similar to this:"
          slack_webhook:
            title: "Receiving Slack notifications"
            paragraph_1: "If you use <a href='https://slack.com/' class='external'>Slack</a>, we can send anomalies notifications to a configured channel in your account."
            paragraph_2: "To use this service, you must setup a <a href='https://cloudwalk.slack.com/services/new/incoming-webhook' class='external'>Incoming WebHook</a> in your Slack account. In the process you will receive a URL for the webhook, something like <code>https://hooks.slack.com/services/BUnCh0F/A1PhaNUMERIC/ChARAcT3RSHErE</code>."
            paragraph_3: "The last step is to set this URL in CloudWalker Manager, as explained above."
            paragraph_4: "Now you are ready to receive our notifications!"
        previous: "Advanced settings"
    emulator_card_swipe:
      title: "Emulator Card Swipe"
      description: "Learn how to use cards on CloudWalk Emulator"
      table_of_contents:
        introduction: "Introduction"
        creating_cards: "Creating cards"
        emulating: "Emulating"
        adding_new_cards: "Adding new cards"
      introduction:
        paragraph_1: "Most POS applications will require you to get information from cards, therefore it's extremely desirable to make sure the software in development runs smoothly before installing to a real device. Fortunately, CloudWalk's IDE emulator comes with a very simple way to use cards. On this page, you will learn how to use them. Enjoy!"
      creating_cards:
        paragraph_1: "With your project source code open inside the IDE, you will see a blue vertical bar on the left holding the icons of the main functionalities of the IDE. In this bar you will find an icon in the shape of a card. Let's go click it:"
        img_1_alt: "Cards icon and panel"
        paragraph_2: "A panel will appear with two cards. These cards are completely editable and selectable. Simply click on the different texts and they will become input fields where you can enter the information you want."
        img_2_alt: "Editing cards"
        paragraph_3: "When done, click out of the fields and the information will be saved. The last step before running the emulation is to <strong>click the card you want to use</strong>, it will end up highlighted in blue. As you see there are several cards on the list. Edit any of them and click the one of your choice!"
      emulating:
        paragraph_1: "Now, let's emulate the POSXML command <a href='/en/posxml/commands/getcardvariable' class='command'>getcardvariable</a> with the following example code:"
        paragraph_2: "After clicking the card you want to use (the blue one), go to the emulator and click on the green <strong>POWER</strong> button to start the application. The emulator needs a few seconds to start but once it's running the information is retrieved from the card created in an instant, and you can continue with the tests. You can see it happening here:"
        img_1_alt: "Using a card"
      adding_new_cards:
        paragraph_1: "To add new cards, simply edit the last card available and a new card will appear below instantly!"
        img_1_alt: "Add a new card"
    emulator_serial_ports:
      title: "Emulator Serial Ports"
      description: "Learn how to use serial ports on the CloudWalk Emulator"
      table_of_contents:
        introduction: "Introduction"
        creating_ports: "Creating ports"
        emulating: "Emulating"
        ports_order: "Ports order"
      introduction:
        paragraph_1: "Some POS applications might need to interact with other devices via serial ports. Using real devices it can be tricky but nothing puzzling, however you might wonder how to test your code under the web development environment. The web is not able to use serial ports, but we have developed some tools to help you with this process, and here we will explain how to use these functionalities."
        paragraph_2: "The way we let you have serial ports is by setting some values organized by port number, rate and configuration values, so instead of having a memory place where you retrieve things that arrive from another device, there will be a place where the program takes values, but you pre-define them."
      creating_ports:
        paragraph_1: "Once you open an application on the IDE, go to the icon that looks like a tree, click it and you will see the ports panel:"
        img_1_alt: "Ports icon and panel"
        paragraph_2: "If it is your first time there, you will see two values which correspond to two different port configurations (more on it later). For now, let's create a new port."
        paragraph_3: "There is a form on the ports panel that consists on 4 fields, where the first three fields let you choose your port number, rate and configuration value. The last input field is where you put the data that will be read from your application. Pick your settings, click <b>Create</b> and you will see your port added to the list below."
        img_2_alt: "Creating ports"
      emulating:
        paragraph_1: "A simple code that we can use to read and write into the ports is the following:"
        paragraph_2: "Open the emulator panel and press the green <b>POWER</b> button, the code will read one time from the port with number <b>COM2</b>, rate <b>1200</b>, and configuration <b>A701</b>, after that it will write <b>CloudWalk</b> in that port, and finally it will read it again to retrieve the value we just wrote. The emulation will go as follows:"
        img_1_alt: "Reading from a port, twice"
      ports_order:
        paragraph_1: "Finally, there are some buttons under the ports that allow you to change the order of ports and remove them. The icons are pretty intuitive, so let's see them in action:"
        img_1_alt: "Moving and deleting ports"
    using_http_headers:
      title: "Using HTTP headers"
      description: "Learn how to use HTTP headers with POSXML"
      table_of_contents:
        introduction: "Introduction"
        app_sample: "Sample application"
      introduction:
        paragraph_1: "HTTP requests can use headers to describe additional properties of the request, like authentication, content type, etc. On this page, you will learn how to use them. Enjoy!"
      app_sample:
        paragraph_1: "The sample application builds the HTTP request <span class='code'>buffer</span> (method, headers, path and payload), converts the <span class='code'>buffer</span> to hexadecimal and send it to the host, through the command <a href='/en/posxml/commands/network.send' class='command'>network.send</a>. After that, 4 bytes are requested, related to the size of the answer, through the command <a href='/en/posxml/commands/network.receive' class='command'>network.receive</a>, and after a validation, the complete answer is requested."
        note: "Watch out the spaces, because some variables will be concatenated!"
  help:
    faq:
      description: "The most frequently asked questions about CloudWalk"
      title: "Frequently Asked Questions about CloudWalk"
      table_of_contents:
        device: "Device"
        development: "Development"
        communication: "Communication"
        cloudwalk: "Contracts and Services"
      device:
        question_1: "How do I setup the device communication?"
        answer_1:
          paragraph_1: "There is an interactive wizard that will guide you through the whole setup process:"
          paragraph_2: "First, press the device <strong>Function</strong> button (<span class='code'>F</span> for Ingenico, <span class='code'>F1</span> for Verifone);"
          paragraph_3: "Enter the password (default is <span class='code'>55555</span>);"
          paragraph_4: "On the setup menu, select the option <strong>DEVICE SETTINGS</strong>;"
          paragraph_5: "Then select the option <strong>COMMUNICATION</strong>;"
          paragraph_6: "Now you can choose the communication type and fill in the required information."
        question_2: "Can I add new files (images, text, etc.) to a device?"
        answer_2:
          paragraph_1: "Yes. This process can be done in four steps:"
          paragraph_2: "Go to the <a href='https://manager.cloudwalk.io/files'>File management</a> section and upload the files;"
          paragraph_3: "Go to the <a href='https://manager.cloudwalk.io/apps/posxml'>Application management</a> section and <strong>edit</strong> the application that will make use of those files;"
          paragraph_4: "Check the files on the <strong>Application files</strong> list and update the app;"
          paragraph_5: "Now, assuming that your device is associated with the app that you've just added the files, you can update your device and the new files will be downloaded."
        question_3: "How do I clean a device?"
        answer_3:
          paragraph_1: "First, press the device <strong>Function</strong> button (<span class='code'>F</span> for Ingenico, <span class='code'>F1</span> for Verifone);"
          paragraph_2: "Enter the password (default is <span class='code'>55555</span>);"
          paragraph_3: "On the setup menu, select the option <strong>CLOUDWALK</strong>;"
          paragraph_4: "Then select the option <strong>DELETE APPS</strong>."
        question_4: "What is the most suitable device for my needs?"
        answer_4: "That depends on the project, but in general, before purchasing a device, make sure that it meets the project requirements. For example, if mobility is an important factor, a device with <strong>GPRS</strong> should be considered. It's also necessary to ensure that the device is compatible with CloudWalk."
        question_5: "Which devices are compatible with CloudWalk?"
        answer_5: "Check out the <a href='https://docs.cloudwalk.io/en/introduction/framework#approved-devices'>approved devices list</a>."
        question_6: "Is it possible to have many applications on the same device?"
        answer_6:
          paragraph_1: "Yes, that's perfectly possible, since CloudWalk devices are prepared to handle multiple POSXML applications. If a device was configured to have access to a single application, when the <strong>green</strong> button is pressed, that application is automatically started. However, if the device have access to multiple applications, when the <strong>green</strong> button is pressed, a menu listing all of the applications is displayed, so you can choose one of them to start."
          paragraph_2: "The <a href='https://manager.cloudwalk.io/groups'>Group management</a> section defines which applications should be accessible to a group. After configuring a group, any amount of logical numbers can be assigned to that group, through the <a href='https://manager.cloudwalk.io/logical-numbers'>Logical numbers</a> section."
        question_7: "How do I setup a basic integration between my device and an endpoint?"
        answer_7: "Check out the <a href='https://docs.cloudwalk.io/en/integration/http'>HTTP integration example</a>."
        question_8: "What is the password to access the configuration menu?"
        answer_8: "The default password is <span class='code'>55555</span>."
        question_9: "Is it possible to change the default configuration menu password?"
        answer_9: "Yes, check out the <a href='https://docs.cloudwalk.io/en/framework/configuration/change-password'>password change guide</a>."
        question_10: "How do I check the device serial number and where do I register it?"
        answer_10:
          paragraph_1: "First, press the device <strong>Function</strong> button (<span class='code'>F</span> for Ingenico, <span class='code'>F1</span> for Verifone);"
          paragraph_2: "Enter the password (default is <span class='code'>55555</span>);"
          paragraph_3: "On the setup menu, select the option <strong>DEVICE SETTINGS</strong>;"
          paragraph_4: "Then select the option <strong>SERIAL NUMBER</strong>;"
          paragraph_5: "The serial number registration is done through the <a href='https://manager.cloudwalk.io/devices'>Device management</a> section."
        question_11: "How do I reset the certificate already installed on Verifone EVO terminals?"
        answer_11: "Get in touch with your POS terminal supplier and request a reset file, which then can be used to reset the certificate."
        question_12: "What may be preventing the device from downloading a new file?"
        answer_12:
          paragraph_1: "Check the following points:"
          paragraph_2: "If it's an application or module, certify that the deploy was successful;"
          paragraph_3: "If it's common file or image, ensure that the file was properly uploaded. You can also clear the browser's cache and upload the file again to avoid any browser miss behaviours."
      development:
        question_1: "What is the CloudWalk Manager?"
        answer_1: "The <a href='https://manager.cloudwalk.io'>CloudWalk Manager</a> is a tool used to grant access to devices, register applications, files, logical numbers and groups. It is also through this tool that user management and transactions monitoring is done."
        question_2: "How is the CloudWalk development environment?"
        answer_2: "Further reading: <a href='/en/ide/overview'>IDE overview</a>"
        question_3: "What is POSXML?"
        answer_3:
          paragraph_1: "POSXML (acronym for <strong>P</strong>oint <strong>O</strong>f <strong>S</strong>ale e<strong>X</strong>tended <strong>M</strong>arkup <strong>L</strong>anguage) is a programming language that is used to create applications for POS terminals."
          paragraph_2: "Normally the programming language used to develop POS terminal applications is C or C++, which requires an in-depth knowledge of both the technical specifications of the machine (Hardware) and the programming language."
          paragraph_3: "The main purpose of POSXML is to simplify the development of applications for POS terminals. It contains a set of instructions and pre-programmed commands, which allow direct interaction with the device, resulting in a large reduction in application development time."
        question_4: "What is the maximum size of a String in POSXML?"
        answer_4: "The maximum size of a <a href='https://docs.cloudwalk.io/en/posxml/commands/stringvariable'>String</a> is 1024 bytes."
        question_5: "Are there reserved characters or words in the POSXML language?"
        answer_5: "There are more information about the <a href='https://docs.cloudwalk.io/en/posxml/structure'>POSXML structure</a>."
        question_6: "Does CloudWalk supports ISO8583?"
        answer_7:
          paragraph_1: "Yes. CloudWalk and the POSXML language is full compliance with the standard ISO8583. In fact, there are many CloudWalk applications that have been successfully integrated with ISO8583 hosts."
          paragraph_2: "Do you need help? Just <a href='https://www.cloudwalk.io/contact'>get in touch</a> and we will be more than happy to get you started."
        question_7: "Is there a sample bitmap.dat file for ISO8583 transactions?"
        answer_7: "Yes, there is a <a href='https://dl.dropboxusercontent.com/u/436039/cloudwalk/util/iso8583/bitmap.dat'>sample bitmap.dat file</a> which you can use as an entry point, but you should check and update the parameters and the type of each bit according to your ISO8583 host specification before downloading it to your devices."
        question_8: "Is there a comprehensive list of POSXML commands?"
        answer_8: "Yes, there is a <a href='https://docs.cloudwalk.io/en/posxml/commands'>comprehensive list</a> of POSXML commands. However, if you are having a hard time to figure out how to tackle a specific situation, <a href='https://www.cloudwalk.io/contact'>drop us a note</a> and we will help you out."
        question_9: "How do I set a custom background image on my device home screen?"
        answer_9:
          paragraph_1: "Due the diversity of all CloudWalk supported devices, to use a custom background image, it is necessary to follow a set of rules in order to achieve the best results for a given device."
          table:
            header:
              model: "Device model"
              type: "Bitmap type"
              filename: "Filename"
              sample: "Sample"
            content:
              view: "View"
          paragraph_2: "After creating your custom image, follow these steps:"
          paragraph_3: "Go to the <a href='https://manager.cloudwalk.io/files'>File management</a> section and upload your custom bitmap image, following the naming convention on the table above."
          paragraph_4: "Go to the <a href='https://manager.cloudwalk.io/apps/posxml'>Application management</a> and <strong>edit</strong> your application;"
          paragraph_5: "Check the bitmap file that was previously submitted on the <strong>Application files</strong> list and update the app;"
          paragraph_6: "Now, assuming that your device is associated with the app that you've just added the bitmap, you can update your device and the new background will be displayed."
          paragraph_7: "<strong>Note:</strong> Only bitmap (.bmp) images are supported. Other formats like JPG, GIF and PNG are not supported."
        question_10: "What is the authorizer server (host)?"
        answer_10:
          paragraph_1: "Authorizer is the component responsible to verify and validate the information provided by POS terminals."
          paragraph_2: "Further reading: <a href='https://docs.cloudwalk.io/en/introduction/authorizer'>Authorizer</a>"
        question_11: "How do I set the authorizer's endpoint?"
        answer_11:
          paragraph_1: "The endpoint is configured at the application level, through the following steps:"
          paragraph_2: "Go to the <a href='https://manager.cloudwalk.io/apps/posxml'>Application management</a> and <strong>edit</strong> your application;"
          paragraph_3: "Set the endpoint, which can be http, https, tcp, tcps, etc;"
          paragraph_4: "Now, assuming that your device is associated with the app that you've just set the endpoint, you are good to go, because once a transaction is performed, the data being sent will be forwarded to the new endpoint URL."
        question_12: "Is it possible to set multiple endpoints to an app?"
        answer_12:
          paragraph_1: "No. An application can be associated to only one endpoint. Note that the modules being used by an application will automatically use that application's endpoint."
          paragraph_2: "However, if you need to communicate with multiple endpoints on the same application, you can follow these steps:"
          paragraph_3: "Create your main application (example, myapp.posxml) poiting to one of the endpoints (example, https://my-endpoint.com);"
          paragraph_4: "Create a new application (example, activation.posxml) poiting to another endpoint (example, https://activation.com), and on this application, the <strong>Label</strong> should be to <span class='code'>x</span>, indicating that this app will be hidden. Note that this application should be responsible for the complete communication workflow, including <span class='code'>preconnect</span>, <span class='code'>network.send</span>, <span class='code'>network.receive</span> and <span class='code'>network.hostdisconnect</span>;"
          paragraph_5: "Repeat the step above as you need, creating hidden apps for all your endpoints;"
          paragraph_6: "Now, on the main application (myapp.posxml), you can use the command <a href='/en/posxml/commands/execute' class='command'>execute</a>, which will execute one of your hidden apps, communicating with the desired endpoint."
        question_13: "The CloudWalk platform has an API?"
        answer_13: "Yes! Check out the <a href='/en/api/overview'>API section</a> for more information."
      communication:
        question_1: "Which communication types are supported?"
        answer_1: "That depends on the device, but in general, Ethernet, GPRS and dialed is supported."
        question_2: "How do I setup my Ethernet device to use DHCP?"
        answer_2: "That's quite simple! All you have to do is set the IP to <strong>0.0.0.0</strong>. After restarting the device, an IP should be automatically assigned to it."
        question_3: "When using GPRS, which APN, user and password should be set?"
        answer_3:
          paragraph_1: "First you need to check if your GPRS SIM card uses private or public APN. You can get this information with your SIM card provider."
          paragraph_2: "If you have acquired the chip through a telecommunication company such as Lyra Network, it will probably use a private APN, otherwise it should use a public APN. The <strong>username</strong> and <strong>password</strong> should also be requested with your SIM card provider."
          paragraph_3: "Brazilian customers can take advantage of some pre-configured providers (CLARO, TIM, OI, VIVO, LYRA, etc), while customers outside Brazil should pick the option <strong>Other operator</strong> and manually enter the information."
        question_4: "Why my device is not connecting?"
        answer_4:
          paragraph_1: "In general, you can assume that our service is always up. If you are not sure, just check our <a href='http://status.cloudwalk.io/'>status page</a>. So assuming that our service is up, communication problems should be related to your <strong>POS</strong>, your <strong>infrastructure</strong> or some sort of <strong>configuration</strong>."
          pos_problems:
            title: "POS problems"
            paragraph_1: "When troubleshooting communication problems, it is essential to narrow the range of possibilities, and you should start by making sure that your device is working properly."
          infrastructure_problems:
            title: "Infrastructure problems"
            paragraph_1: "After making sure that your device your working, you should check your infraestructure."
            paragraph_2: "Make sure your host (your endpoint) is active and responding to requests."
            paragraph_3: "For Ethernet and wi-fi devices, make sure your network connection is active and check if you can access the Internet with a laptop or a smartphone on that network."
            paragraph_4: "For Ethernet and wi-fi devices, make sure there are no restrictions or rules (firewall) on the network that may block the connection."
            paragraph_5: "For Ethernet and dial devices, make sure that the cable is not damaged and that it is properly connected on both extremities."
            paragraph_6: "For GPRS devices, check the signal and make sure the SIM card is operating normally (try in other devices). If it is prepaid, check if it has credit."
          configuration_problems:
            title: "Configuration problems"
            paragraph_1: "Assuming that the problem is not related to your device (physical problem) and that your infraestructure is fine, it can only be some sort of configuration problem:"
            paragraph_2: "Make sure that your device serial number is properly registered on the <a href='https://manager.cloudwalk.io/devices'>Devices management</a>."
            paragraph_3: "For Ethernet and wi-fi devices on a DHCP network, the IP should be set to <span class='code'>0.0.0.0</span>, so it will be assigned by the DHCP client."
            paragraph_4: "For Ethernet and wi-fi devices, make sure that you have set the correct values for Network Mask (e.g. <span class='code'>255.255.255.0</span>), Gateway (e.g. <span class='code'>192.168.1.1</span>), DNS 1 (e.g. <span class='code'>8.8.8.8</span>), DNS 2 (e.g. <span class='code'>8.8.4.4</span>) and SSL (e.g. <span class='code'>0</span>)."
            paragraph_5: "For GPRS devices, double check the APN configuration. You might need to get in touch with your telecomunications provider to make sure that everything is correct."
      cloudwalk:
        question_1: "What is a transaction?"
        answer_1:
          paragraph_1: "A transaction is defined by any data message from approved and certified POS equipment with the CloudWalk Framework and an operational application installed that is integrated with CloudWalk's servers and our customer's authorisers, via an applicable telecommunications channel."
          paragraph_2: "Note: all transactions conform to PCI standards and additional CloudWalk security protocols, being private and exclusively accessible by the customer."
        question_2: "Do CloudWalk sell POS terminals?"
        answer_2: "No, CloudWalk provides only the service. However, if you need to buy POS terminals, you can <a href='https://www.cloudwalk.io/contact'>get in touch</a> and we will be more than happy to help you out!"
        question_3: "Is the authorizer server included with the CloudWalk service?"
        answer_3: "No, authorizer development and maintenance is the customer's responsibility."
